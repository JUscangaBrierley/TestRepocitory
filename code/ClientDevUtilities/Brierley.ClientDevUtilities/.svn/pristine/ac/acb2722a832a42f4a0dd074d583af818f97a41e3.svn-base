using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Brierley.FrameWork.Common;
using Brierley.FrameWork.Data;
using Brierley.FrameWork.Data.DataAccess;
using Brierley.FrameWork.Data.DomainModel;
using PetaPoco;

namespace Brierley.ClientDevUtilities.LWGateway
{
    public interface IContentService : IServiceBase
    {
        bool KeepCacheLoaded { get; set; }

        void AddCategory(Category category);
        void AddNotificationCategory(NotificationCategory notificationCategory);
        long CheckAndUpdateBonusQuotaCount(long bonusId, long completed);
        void CreateAttribute(StructuredContentAttribute attribute);
        void CreateBatch(Batch batch);
        void CreateBonusDef(BonusDef bonus);
        void CreateChannelDef(ChannelDef channel);
        void CreateContentAttributeDef(ContentAttributeDef att);
        void CreateContentElement(StructuredContentElement element);
        void CreateCouponDef(CouponDef coupon);
        void CreateCouponDefs(List<CouponDef> coupons);
        void CreateDatum(StructuredContentData datum);
        void CreateDocument(Document document);
        void CreateExchangeRate(ExchangeRate exchangeRate);
        void CreateFulfillmentProviderProductMap(FulfillmentProviderProductMap map);
        void CreateMessageDef(MessageDef message);
        void CreateNotificationDef(NotificationDef notification);
        void CreateProduct(Product product);
        void CreateProductImage(ProductImage image);
        void CreateProducts(List<Product> products);
        void CreateProductVariant(ProductVariant variant);
        void CreatePromoCertificate(PromotionCertificate cert);
        void CreatePromoCertificate(List<PromotionCertificate> certs);
        void CreatePromotion(Promotion promotion);
        void CreateRewardDef(RewardDef reward);
        void CreateStoreDef(List<StoreDef> stores);
        void CreateStoreDef(StoreDef store);
        void CreateTemplate(Template template);
        void CreateTextBlock(TextBlock textBlock);
        void CreateUserAgentMap(UserAgentMap map);
        void DeleteAttribute(long id);
        void DeleteBatch(long batchID);
        void DeleteBatchSequence(long batchID, long sequenceID);
        void DeleteBonusDef(long id);
        void DeleteCategory(long categoryId);
        void DeleteChannelDef(string name);
        void DeleteChannelDef(long id);
        void DeleteContentAttributeDef(long attId);
        void DeleteContentElement(long id);
        void DeleteCouponDef(long couponId);
        void DeleteDatum(long id);
        void DeleteDatumBatch(long id);
        void DeleteDocument(long id);
        void DeleteExchangeRate(long exchangeRateId);
        void DeleteFulfillmentProviderProductMap(long id);
        void DeleteMessageDef(long id);
        void DeleteNotificationCategory(long categoryId);
        void DeleteNotificationDef(long id);
        void DeleteProduct(long productId);
        void DeleteProductImage(long imageId);
        void DeleteProductVariant(long imageId);
        void DeletePromoCertificate(string certNmbr);
        void DeletePromotion(long promotionId);
        void DeleteRewardDef(long rewardId);
        void DeleteStoreDef(long storeNmbr);
        void DeleteTemplate(long id);
        void DeleteTextBlock(string name);
        void DeleteTextBlock(long id);
        void DeleteUserAgentMap(long id);
        void GeneratePromoCertificates(int quantity, string certNumberFormat, string typeCode, ContentObjType contentObjectType, DateTime? startDate, DateTime? endDate);
        List<Batch> GetActiveBatches();
        List<StructuredContentAttribute> GetAllAttributes(DateTime changedSince);
        List<StructuredContentAttribute> GetAllAttributes();
        List<BonusDef> GetAllBonusDefs();
        List<BonusDef> GetAllChangedBonusDefs(DateTime since);
        List<Category> GetAllChangedCategories(DateTime since);
        List<ContentAttributeDef> GetAllChangedContentAttributeDefs(DateTime since);
        List<CouponDef> GetAllChangedCouponDefs(DateTime since);
        List<MessageDef> GetAllChangedMessageDefs(DateTime since);
        List<NotificationCategory> GetAllChangedNotificationCategories(DateTime since);
        List<NotificationDef> GetAllChangedNotificationDefs(DateTime since);
        List<ProductImage> GetAllChangedProductImages(DateTime since);
        List<Product> GetAllChangedProducts(DateTime since);
        List<ProductVariant> GetAllChangedProductVariants(DateTime since);
        List<Promotion> GetAllChangedPromotions(DateTime since);
        List<RewardDef> GetAllChangedRewardDefs(DateTime since);
        List<StoreDef> GetAllChangedStoreDefs(DateTime since);
        List<ContentAttributeDef> GetAllContentAttributeDefs(ContentObjType contentType);
        List<ContentAttributeDef> GetAllContentAttributeDefs();
        List<StructuredContentElement> GetAllContentElements();
        List<StructuredContentElement> GetAllContentElements(DateTime changedSince);
        List<StructuredContentElement> GetAllContentElementsInTemplate(long templateID);
        List<CouponDef> GetAllCouponDefs();
        List<StructuredContentData> GetAllDatums();
        List<StructuredContentData> GetAllDatums(DateTime changedSince);
        Page<ExchangeRate> GetAllExchangeRates(long pageNumber, long resultsPerPage);
        List<ExchangeRate> GetAllExchangeRates();
        List<ProductImage> GetAllImagesByProduct(long productId);
        List<MessageDef> GetAllMessageDefs(LWQueryBatchInfo batchInfo);
        List<NotificationDef> GetAllNotificationDefs(LWQueryBatchInfo batchInfo);
        List<long> GetAllProductIds(string sortExpression, bool ascending, bool visibleInLN);
        List<ProductImage> GetAllProductImages();
        List<Product> GetAllProducts(bool visibleInLN);
        List<Product> GetAllProducts(long[] ids, bool retrieveContent);
        List<Product> GetAllProductsSortedByName(bool visibleInLN);
        List<ProductVariant> GetAllProductVariants();
        List<ProductVariant> GetAllProductVariantsByProduct(long productId);
        List<Promotion> GetAllPromotions(LWQueryBatchInfo batchInfo);
        List<long> GetAllRewardDefIds(string sortExpression, bool ascending);
        List<RewardDef> GetAllRewardDefs(long[] ids);
        List<RewardDef> GetAllRewardDefs();
        List<StoreDef> GetAllStoreDefs(long[] storeIds);
        List<StoreDef> GetAllStoreDefs(LWQueryBatchInfo batchInfo = null);
        List<UserAgentMap> GetAllUserAgentMaps();
        List<UserAgentMap> GetAllUserAgentMaps(DateTime changedSince);
        StructuredContentAttribute GetAttribute(long id);
        StructuredContentAttribute GetAttribute(string elementName, string attributeName);
        Batch GetBatch(long batchID);
        Batch GetBatch(string batchName);
        List<StructuredContentData> GetBatchElements(long batchID, long elementID);
        List<Batch> GetBatches();
        List<Batch> GetBatches(DateTime changedSince);
        List<StructuredContentData> GetBatchGlobals(long batchID);
        BonusDef GetBonusDef(string name);
        BonusDef GetBonusDef(long id);
        List<long> GetBonusDefIds(List<Dictionary<string, object>> parms, string sortExpression, bool ascending, long? folderId = null);
        List<BonusDef> GetBonusDefs(List<Dictionary<string, object>> parms, bool populateAttributes, LWQueryBatchInfo batchInfo);
        List<BonusDef> GetBonusDefs(long[] ids, bool populateAttributes);
        List<BonusDef> GetBonusDefsByCategory(long categoryId, bool includeChildren, bool excludeExpired = true);
        List<Category> GetCategories(long[] ids);
        List<Category> GetCategories(bool isVisibleInLN);
        List<Category> GetCategories();
        List<Category> GetCategoriesByType(CategoryType type, bool isVisibleInLN);
        Category GetCategory(long parentId, string catName);
        Category GetCategory(long categoryId);
        List<Template> GetChangedTemplates(TemplateType type, DateTime changedSince);
        ChannelDef GetChannelDef(string name);
        ChannelDef GetChannelDef(long id);
        List<ChannelDef> GetChannelDefs();
        List<Category> GetChildCategories(long categoryId, bool isVisibleInLN, LWQueryBatchInfo batchInfo);
        List<Category> GetChildCategories(long categoryId, bool isVisibleInLN);
        List<NotificationCategory> GetChildNotificationCategories(long categoryId, bool isVisibleInLN, LWQueryBatchInfo batchInfo);
        List<NotificationCategory> GetChildNotificationCategories(long categoryId, bool isVisibleInLN);
        ContentAttributeDef GetContentAttributeDef(string attName);
        ContentAttributeDef GetContentAttributeDef(long attId);
        StructuredContentElement GetContentElement(string name);
        StructuredContentElement GetContentElement(long id);
        ContentProperties GetContentProperties();
        CouponDef GetCouponDef(long couponId);
        CouponDef GetCouponDef(string name);
        CouponDef GetCouponDefByCode(string code);
        List<long> GetCouponDefIds(List<Dictionary<string, object>> parms, string sortExpression, bool ascending, long? folderId = null);
        List<CouponDef> GetCouponDefs(long[] ids, bool populateAttributes);
        Page<CouponDef> GetCouponDefs(List<Dictionary<string, object>> parms, ActiveCouponOptions options, bool populateAttributes, int pageNumber, int resultsPerPage);
        List<CouponDef> GetCouponDefs(List<Dictionary<string, object>> parms, bool populateAttributes, LWQueryBatchInfo batchInfo);
        List<CouponDef> GetCouponDefsByCategory(long categoryId, bool includeChildren);
        List<StructuredContentData> GetDataColumn(string attributeName);
        DataTable GetDataRows(long batchID, long elementID, StructuredContentAttribute matchAttribute, string matchValue, bool unexpiredOnly);
        StructuredContentData GetDatum(long datumID);
        StructuredContentData GetDatum(long batchID, long sequenceID, long attributeID);
        List<StructuredContentData> GetDatumBatch(string name);
        List<StructuredContentData> GetDatumBatch(long id);
        SortedList<string, long> GetDatumBatches();
        Document GetDocument(long id);
        Document GetDocument(string name);
        List<Document> GetDocuments();
        List<Document> GetDocuments(DocumentType docType);
        List<Document> GetDocuments(DocumentType docType, DateTime changedSince);
        StructuredContentAttribute GetElementAttribute(string name, long elementID);
        List<StructuredContentAttribute> GetElementAttributes(long elementID);
        ExchangeRate GetExchangeRate(string fromCurrency, string toCurrency);
        ExchangeRate GetExchangeRateById(long exchangeRateId);
        List<ExchangeRate> GetExchangeRatesByFromCurrency(string fromCurrency);
        Page<ExchangeRate> GetExchangeRatesByFromCurrency(string fromCurrency, long pageNumber, long resultsPerPage);
        List<ExchangeRate> GetExchangeRatesByProperties(List<Dictionary<string, object>> properties);
        Page<ExchangeRate> GetExchangeRatesByProperties(List<Dictionary<string, object>> properties, long pageNumber, long resultsPerPage);
        List<ExchangeRate> GetExchangeRatesByToCurrency(string toCurrency);
        Page<ExchangeRate> GetExchangeRatesByToCurrency(string toCurrency, long pageNumber, long resultsPerPage);
        FilterCollection GetFilterCollection(long batchID, long elementID);
        StructuredDataRowList GetFilteredAttributes(long batchID, long elementID, Dictionary<long, string> filterValues);
        FilterCollection GetFiltersForElement(long elementID);
        FulfillmentProviderProductMap GetFulfillmentProviderProductMapByProduct(long providerId, long productId);
        FulfillmentProviderProductMap GetFulfillmentProviderProductMapByProductVariant(long providerId, long variantId);
        FulfillmentProviderProductMap GetFulfillmentProviderProductMapByProviderPartNumber(long providerId, string partNumber);
        StructuredContentAttribute GetGlobalAttribute(string name);
        StructuredContentAttribute GetGlobalAttribute(long id);
        List<StructuredContentAttribute> GetGlobalAttributes();
        ProductImage GetImageByProduct(long productId, string image);
        List<LangChanContent> GetLangChanContents(ContentObjType? type, LanguageDef language, ChannelDef channel);
        LanguageDef GetLanguageDef(string culture);
        List<LanguageDef> GetLanguageDefs();
        MessageDef GetMessageDef(long id);
        MessageDef GetMessageDef(string name);
        List<long> GetMessageDefIds(List<Dictionary<string, object>> parms, string sortExpression, bool ascending, long? folderId = null);
        List<long> GetMessageDefIds(bool activeOnly, string sortExpression, bool ascending, long? folderId = null);
        List<MessageDef> GetMessageDefs(long[] ids, bool populateAttributes);
        List<MessageDef> GetMessageDefs(List<Dictionary<string, object>> parms, bool populateAttributes, LWQueryBatchInfo batchInfo);
        long GetNextBatchID();
        long GetNextSequenceID(long batchID, long elementID);
        List<NotificationCategory> GetNotificationCategories(bool isVisibleInLN);
        List<NotificationCategory> GetNotificationCategories();
        List<NotificationCategory> GetNotificationCategories(long[] ids);
        List<NotificationCategory> GetNotificationCategoriesByType(CategoryType type, bool isVisibleInLN);
        NotificationCategory GetNotificationCategory(long parentId, string catName);
        NotificationCategory GetNotificationCategory(long categoryId);
        NotificationDef GetNotificationDef(long id);
        NotificationDef GetNotificationDef(string name);
        List<long> GetNotificationDefIds(bool activeOnly, string sortExpression, bool ascending, long? folderId = null);
        List<long> GetNotificationDefIds(List<Dictionary<string, object>> parms, string sortExpression, bool ascending, long? folderId = null);
        List<NotificationDef> GetNotificationDefs(List<Dictionary<string, object>> parms, bool populateAttributes, LWQueryBatchInfo batchInfo);
        List<NotificationDef> GetNotificationDefs(long[] ids, bool populateAttributes);
        Product GetProduct(string name);
        Product GetProduct(long productId);
        Product GetProductByPartNumber(string partNumber);
        Product GetProductByVariantPartNumber(string partNumber);
        List<long> GetProductIds(List<Dictionary<string, object>> parms, string sortExpression, bool ascending, bool visibleInLN);
        ProductImage GetProductImage(long id);
        List<Product> GetProductsByCategory(long categoryId, bool visibleInLN);
        List<Product> GetProductsByCategorySortedByName(long categoryId, bool visibleInLN);
        List<Product> GetProductsByUserField(string userField);
        List<Product> GetProductsByUserField(long userField);
        ProductVariant GetProductVariant(long id);
        ProductVariant GetProductVariantByProductAndDescription(long productId, string description);
        ProductVariant GetProductVariantByProductAndPartNumber(long productId, string partNumber);
        Promotion GetPromotion(long promotionId);
        Promotion GetPromotionByCode(string code);
        Promotion GetPromotionByName(string name);
        List<long> GetPromotionIds(bool activeOnly, string sortExpression, bool ascending, long? folderId = null);
        List<Promotion> GetPromotionIds(long[] ids);
        List<long> GetPromotionIds(List<Dictionary<string, object>> parms, string sortExpression, bool ascending, long? folderId = null);
        List<Promotion> GetPromotions(List<Dictionary<string, object>> parms, bool populateAttributes, LWQueryBatchInfo batchInfo);
        Dictionary<long, string> GetPromotionsByProperty(string propertyName, string whereClause);
        RewardDef GetRewardDef(string rewardName);
        RewardDef GetRewardDef(long rewardId);
        Category GetRewardDefCategory(long rewardDefId);
        RewardDef GetRewardDefForExchange(Member member);
        List<long> GetRewardDefIds(List<Dictionary<string, object>> parms, string sortExpression, bool ascending);
        List<RewardDef> GetRewardDefsByCategory(long categoryId);
        List<RewardDef> GetRewardDefsByCertificateType(string certTypeCode);
        List<RewardDef> GetRewardDefsByProperty(List<Dictionary<string, object>> parms, string sortExpression, bool ascending, LWQueryBatchInfo batchInfo, long? categoryId = null);
        List<RewardDef> GetRewardDefsByTier(long tierId);
        List<RewardDef> GetRewardDefsByType(RewardType rewardType);
        List<StoreDef> GetStoreDef(string storeNmbr);
        StoreDef GetStoreDef(long storId);
        StoreDef GetStoreDefByBrand(string brandName, string brandStoreNmbr);
        StoreDef GetStoreDefByStoreNumberAndBrand(string storeNmbr, string brandName);
        List<StoreDef> GetStoreDefsByCityAndStateOrProvince(string city, string stateOrProvince, int maxRows);
        Dictionary<long, string> GetStoreDefsByProperty(string propertyName, string whereClause);
        List<StoreDef> GetStoreDefsByUserField(string userField);
        List<StoreDef> GetStoreDefsByUserField(long userField);
        List<StoreDef> GetStoreDefsByZipOrPostalCode(string zipOrPostalCode, int maxRows);
        NearbyStoreCollection GetStoreDefsNearby(double latitude, double longitude, double radiusInMiles, int maxRows);
        List<Document> GetSurveyRunnerDocuments();
        List<Template> GetSurveyRunnerTemplates();
        Template GetTemplate(string name);
        Template GetTemplate(long id);
        List<Template> GetTemplates(TemplateType type);
        List<Template> GetTemplates();
        List<Template> GetTemplatesByFolder(long folderId);
        TextBlock GetTextBlock(string name);
        TextBlock GetTextBlock(long id);
        List<TextBlock> GetTextBlocks(DateTime changedSince);
        List<TextBlock> GetTextBlocks();
        List<Category> GetTopLevelCategories(bool isVisibleInLN);
        List<Category> GetTopLevelCategoriesByType(CategoryType type, bool isVisibleInLN);
        List<NotificationCategory> GetTopLevelNotificationCategories(bool isVisibleInLN);
        List<NotificationCategory> GetTopLevelNotificationCategoriesByType(CategoryType type, bool isVisibleInLN);
        List<BonusDef> GetUnexpiredBonusDefs();
        List<CouponDef> GetUnexpiredCouponDefs();
        List<Promotion> GetUnexpiredPromotions();
        UserAgentMap GetUserAgentMap(long id);
        UserAgentMap GetUserAgentMap(string userAgent);
        int HowManyBonusDefs(List<Dictionary<string, object>> parms);
        int HowManyCouponDefs(List<Dictionary<string, object>> parms, ActiveCouponOptions options = null);
        int HowManyMessageDefs(List<Dictionary<string, object>> parms);
        int HowManyNotificationDefs(List<Dictionary<string, object>> parms);
        long HowManyProducts();
        long HowManyPromoCertificates(ContentObjType? objectType, string typeCode, DateTime? startDate, DateTime? endDate, bool? available);
        int HowManyPromotions(List<Dictionary<string, object>> parms);
        int HowManyRewardDefs(List<Dictionary<string, object>> parms, long? categoryId = null);
        void InitializeDocuments();
        void InitializeStructuredContentMeta();
        void InitializeTextBlocks();
        bool IsChannelSupported(string name);
        bool IsDeletableContentElement(long elementID);
        bool IsLanguageSupported(string culture);
        void LoadCache(bool keepCacheLoaded);
        int ReclaimCertificates(string[] certNmbrs);
        List<PromotionCertificate> RetrieveAvailablePromoCertificate(ContentObjType? objectType, string typeCode, DateTime? startDate, DateTime? endDate, int howMany);
        PromotionCertificate RetrieveFirstAvailablePromoCertificate(ContentObjType? objectType, string typeCode, DateTime? startDate, DateTime? endDate);
        SearchDatumResult SearchDatums(SearchDatumArgs args);
        void SetKeepCacheLoaded(bool value);
        void UpdateAttribute(StructuredContentAttribute attribute);
        void UpdateBatch(Batch batch);
        void UpdateBonusDef(BonusDef bonus);
        void UpdateCategory(Category category);
        void UpdateChannelDef(ChannelDef channel);
        void UpdateContentAttributeDef(ContentAttributeDef att);
        void UpdateContentElement(StructuredContentElement element);
        void UpdateCouponDef(CouponDef coupon);
        void UpdateCouponDefs(List<CouponDef> coupons);
        void UpdateDatum(StructuredContentData datum);
        void UpdateDocument(Document document);
        void UpdateExchangeRate(ExchangeRate exchangeRate);
        void UpdateFulfillmentProviderProductMap(FulfillmentProviderProductMap map);
        void UpdateMessageDef(MessageDef message);
        void UpdateNotificationCategory(NotificationCategory category);
        void UpdateNotificationDef(NotificationDef notification);
        void UpdateProduct(Product product, bool deep = true);
        void UpdateProductImage(ProductImage image);
        long UpdateProductQuantity(long id, long changeBy);
        void UpdateProducts(List<Product> products, bool deep);
        void UpdateProductVariant(ProductVariant variant);
        long UpdateProductVariantQuantity(long id, long changeBy);
        void UpdatePromotion(Promotion promotion);
        void UpdateRewardDef(RewardDef reward);
        void UpdateStoreDef(StoreDef store);
        void UpdateStoreDef(List<StoreDef> stores);
        void UpdateTemplate(Template template);
        void UpdateTextBlock(TextBlock textBlock);
        void UpdateUserAgentMap(UserAgentMap map);
    }
}
