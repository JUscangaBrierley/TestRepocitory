using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Brierley.FrameWork.Common;
using Brierley.FrameWork.Data.DomainModel;
using PetaPoco;

namespace Brierley.ClientDevUtilities.LWGateway
{
    public interface ISurveyManager : IServiceBase
    {
        void CloneStates(long surveyID, List<long> stateIDs, List<SMTransition> transitions, ref List<SMState> clonedStates, ref List<SMTransition> clonedTransitions);
        SMSurvey CloneSurvey(long oldSurveyID, string newSurveyName, bool resetDocID);
        void CreateAnswerContent(SMAnswerContent answerContent);
        void CreateConcept(SMConcept concept);
        void CreateConceptView(SMConceptView conceptView);
        void CreateCultureMap(SMCultureMap cultureMap);
        void CreateDecision(SMDecision decision);
        void CreateFieldList(SMFieldList fieldList);
        void CreateLanguage(SMLanguage language);
        void CreateMatrixAnswer(SMMatrixAnswer matrixAnswer);
        void CreateMessage(SMMessage message);
        void CreateQuestion(SMQuestion question);
        void CreateQuestionContent(SMQuestionContent questionContent);
        void CreateRespondent(SMRespondent respondent);
        void CreateRespondentList(SMRespondentList respondentList);
        void CreateRespondents(long surveyID, long languageID, long respListID, List<string> mtouchValues, List<string> propertiesXMLs);
        void CreateResponse(SMResponse response);
        void CreateState(SMState state);
        void CreateSurvey(string name, string description);
        void CreateSurvey(SMSurvey survey);
        void CreateTransition(SMTransition transition);
        void DeleteAnswerContent(long answerContentID);
        void DeleteAnswerContent(SMAnswerContent answerContent);
        void DeleteConcept(SMConcept concept);
        void DeleteConcept(long conceptID);
        void DeleteConceptView(SMConceptView conceptView);
        void DeleteConceptView(long conceptViewID);
        void DeleteConceptViewsByConcept(long conceptID);
        void DeleteConceptViewsByRespondent(long respondentID);
        int DeleteConceptViewsForSurvey(long surveyID, long languageID = -1);
        void DeleteCultureMap(SMCultureMap cultureMap);
        void DeleteCultureMap(long cultureMapID);
        void DeleteDecision(SMDecision decision);
        void DeleteDecision(long decisionID);
        void DeleteFieldList(long fieldListID);
        void DeleteFieldList(SMFieldList fieldList);
        void DeleteLanguage(long languageID);
        void DeleteLanguage(SMLanguage language);
        void DeleteMatrixAnswer(long matrixAnswerID);
        void DeleteMatrixAnswer(SMMatrixAnswer matrixAnswer);
        void DeleteMessage(long messageID);
        void DeleteMessage(SMMessage message);
        void DeleteQuestion(long questionID);
        void DeleteQuestion(SMQuestion question);
        void DeleteQuestionContent(SMQuestionContent questionContent);
        void DeleteQuestionContent(long questionContentID);
        void DeleteRespondent(SMRespondent respondent);
        void DeleteRespondent(long respondentID);
        void DeleteRespondentList(long respondentListID);
        void DeleteRespondentList(SMRespondentList respondentList);
        void DeleteRespondents(List<long> respondentIDs);
        void DeleteResponse(SMResponse response);
        void DeleteResponse(long responseID);
        int DeleteResponses(long surveyID, long languageID, string mtouch, long ipcode);
        int DeleteResponsesForQuestionContent(long questionContentID);
        int DeleteResponsesForRespondent(long respondentID);
        int DeleteResponsesForSurvey(long surveyID, long languageID = -1);
        int DeleteStagedRespondentList(long respListID);
        void DeleteState(long stateID);
        void DeleteStates(List<long> stateIDs, List<SMTransition> transitions);
        void DeleteSurvey(long surveyID);
        void DeleteTransition(long srcStateID, long srcConnectorIndex, long dstStateID, long dstConnectorIndex);
        void DeleteTransition(SMTransition transition);
        void EvictRespondentFromCache(SMRespondent respondent);
        void File2StagedRespondentList(long respListID, string inputFileName, string connectionString);
        IDataReader GetRespondentListExport(long respListID);
        Dictionary<long, SMState> GetStateMap(List<SMState> states);
        bool IsQuotaMet(long surveyID, long quota);
        bool IsRespondentListStaged(long respListID);
        bool IsSurveyCompleted(SMSurvey survey, SMLanguage language, Member member);
        bool IsValidMTouch(string mtouch);
        void LoadAppCache(bool force);
        void MoveStatesToPage(List<long> stateIDs, List<SMTransition> transitions, long newPageID, List<SMTransition> orphanTransitions);
        bool NeedResponse(long stateID, long languageID, long respondentID);
        long NumCompletesForSegment(long surveyID, string respondentPropName, string respondentPropValue);
        long NumRespondents(long surveyID, long languageID);
        long NumRespondents(long surveyID, long questionID, long matrixIndex);
        int ResetRespondents(long surveyID, long languageID, string mtouch, long ipcode);
        List<SMFieldList> RetrieveAllFieldLists();
        List<long> RetrieveAllIPCodes(long surveyID, long languageID);
        List<long> RetrieveAllIPCodes();
        List<long> RetrieveAllIPCodesForLanguageID(long languageID);
        List<long> RetrieveAllIPCodesForSurveyID(long surveyID);
        List<string> RetrieveAllMTouches();
        List<string> RetrieveAllMTouches(long surveyID, long languageID);
        List<string> RetrieveAllMTouchesForLanguageID(long languageID);
        List<string> RetrieveAllMTouchesForSurveyID(long surveyID);
        List<SMRespondentList> RetrieveAllRespondentLists();
        SMAnswerContent RetrieveAnswerContent(long answerContentID);
        List<SMAnswerContent> RetrieveAnswerContents(long questionID, long languageID);
        List<SMSurvey> RetrieveChangedSurveys(DateTime changedSince);
        SMConcept RetrieveConcept(long conceptID);
        SMConcept RetrieveConceptByName(long surveyID, long languageID, string name);
        List<SMConcept> RetrieveConcepts(long surveyID, long languageID);
        SMConceptView RetrieveConceptView(long conceptViewID);
        List<SMConceptView> RetrieveConceptViews();
        List<SMConceptView> RetrieveConceptViewsByConcept(long conceptID);
        List<SMConceptView> RetrieveConceptViewsByRespondent(long respondentID);
        List<SMConceptView> RetrieveConceptViewsByRespondentAndState(long respondentID, long stateID);
        long RetrieveConceptViewsForGroup(long respondentID, string groupName);
        long RetrieveConceptViewsForSegment(long conceptID, string respondentPropName, string respondentPropValue);
        SMCultureMap RetrieveCultureMap(long cultureMapID);
        SMCultureMap RetrieveCultureMap(string culture);
        List<SMCultureMap> RetrieveCultureMaps();
        SMDecision RetrieveDecision(long decisionID);
        SMDecision RetrieveDecisionByStateID(long stateID);
        List<SMRespondent> RetrieveEligibleMTouches(long surveyID, long languageID, int maxResults);
        List<SMRespondent> RetrieveEligibleRespondents(long surveyID, long languageID, string mtouch, long ipcode);
        List<SMRespondent> RetrieveEligibleRespondents(long languageID, string mtouch, long ipcode);
        SMFieldList RetrieveFieldList(long fieldListID);
        SMFieldList RetrieveFieldListByName(string fieldListName);
        List<SMTransition> RetrieveInputTransitions(long stateID);
        SMLanguage RetrieveLanguage(long languageID);
        SMLanguage RetrieveLanguage(string description);
        List<SMLanguage> RetrieveLanguages();
        List<SMMatrixAnswer> RetrieveMatrixAnswerByQuestionContentID(long questionContentID);
        List<SMMatrixAnswer> RetrieveMatrixAnswerByQuestionID(long questionID, long languageID);
        SMMatrixAnswer RetrieveMatrixAnswerID(long matrixAnswerID);
        SMMessage RetrieveMessage(long messageID);
        SMMessage RetrieveMessageByStateID(long stateID);
        List<SMSurvey> RetrieveNonProfileSurveys();
        List<SMTransition> RetrieveOutputTransitions(long stateID);
        List<SMSurvey> RetrieveProfileSurveys();
        SMQuestion RetrieveQuestion(long questionID);
        SMQuestion RetrieveQuestionByStateID(long stateID);
        SMQuestion RetrieveQuestionByStateName(long surveyID, string stateName);
        SMQuestionContent RetrieveQuestionContent(long questionContentID);
        List<SMQuestionContent> RetrieveQuestionContents(long questionID, long languageID, QuestionContentType contentType);
        List<SMQuestion> RetrieveQuestions(long surveyID);
        SMRespondent RetrieveRespondent(long respondentID);
        SMRespondent RetrieveRespondent(long surveyID, long languageID, string mtouch, long ipcode);
        List<long> RetrieveRespondentIDs(long surveyID, long languageID, string mtouch, long ipcode, long? respListID);
        SMRespondentList RetrieveRespondentList(long respondentListID);
        SMRespondentList RetrieveRespondentListByBatchID(string batchID);
        List<SMRespondent> RetrieveRespondents(long surveyID, long languageID);
        SMResponse RetrieveResponse(long responseID);
        List<SMResponse> RetrieveResponses(long respondentID, long questionContentID);
        string RetrieveResponsesAsCSV(long surveyID, bool forSPSS);
        byte[] RetrieveResponsesAsXLS(long surveyID, string worksheetName);
        List<SMResponse> RetrieveResponsesForState(long respondentID, long stateID);
        string RetrieveResponsesSPSSDatamap(long surveyID);
        string RetrieveResponsesSPSSMetadata(long surveyID);
        SMState RetrieveState(long ID);
        SMState RetrieveState(long surveyID, string name);
        List<SMState> RetrieveStatesByPageID(long pageID);
        List<SMState> RetrieveStatesBySurveyID(long surveyID);
        SMSurvey RetrieveSurvey(long ID);
        SMSurvey RetrieveSurvey(string name);
        long RetrieveSurveyCompleteRuleId(long surveyId);
        List<long> RetrieveSurveyIds(string search, DateTime? startDate, DateTime? endDate, SurveyType? type, SurveyAudience? audience, SurveyStatus? status);
        List<SMSurvey> RetrieveSurveys(int statusFilter, int typeFilter, long? folderId = null);
        List<SMSurvey> RetrieveSurveys();
        long RetrieveSurveyTerminateAndTallyRuleId(long surveyId);
        SMTransition RetrieveTransition(long srcStateID, long srcConnectorIndex, long dstStateID, long dstConnectorIndex);
        SMConcept SelectConcept(long surveyID, long languageID, long respondentID, List<string> desiredConceptNames);
        void SetForceQueryCacheRefresh(bool value);
        SMSurveyReportData SimpleReport(long surveyID, string filter);
        void StagedRespondentList2File(long respListID, string outputFileName, string connectionString);
        ITransaction StartTransaction(int timeout);
        bool SurveyExists(string name);
        void UpdateAnswerContent(SMAnswerContent answerContent);
        void UpdateConcept(SMConcept concept);
        void UpdateConceptView(SMConceptView conceptView);
        void UpdateCultureMap(SMCultureMap cultureMap);
        void UpdateDecision(SMDecision decision);
        void UpdateFieldList(SMFieldList fieldList);
        void UpdateLanguage(SMLanguage language);
        void UpdateMatrixAnswer(SMMatrixAnswer matrixAnswer);
        void UpdateMessage(SMMessage message);
        void UpdateQuestion(SMQuestion question);
        void UpdateQuestionContent(SMQuestionContent questionContent);
        void UpdateRespondent(SMRespondent respondent);
        void UpdateRespondentList(SMRespondentList respondentList);
        void UpdateResponse(SMResponse response);
        void UpdateState(SMState state);
        void UpdateSurvey(SMSurvey survey);
        void UpdateTransition(SMTransition transition);
    }
}
