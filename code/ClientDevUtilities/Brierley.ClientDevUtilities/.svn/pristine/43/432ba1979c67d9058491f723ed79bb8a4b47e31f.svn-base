//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated LoyaltyWare.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

package com.brierley.loyaltyware.clientlib;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;
import java.util.ArrayList;
import javax.xml.namespace.*;
import java.util.concurrent.Semaphore;

import com.brierley.loyaltyware.clientlib.domainmodel.*;
import com.brierley.loyaltyware.clientlib.domainmodel.client.*;
import com.brierley.loyaltyware.clientlib.domainmodel.framework.*;

public class LWIntegrationSvcClientManager {

	// Begin - Enumerations
	public enum Language {
		English, French, Spanish, German, Russian
	};

	public enum MemberSearch {
		MemberID, CardID, EmailAddress, PhoneNumber, AlternateID, LastName, Username, PostalCode
	};
	
	public enum RewardType {
		Earned, Entitlement
	};

	public enum ConsumptionPolicy {
		NoAction, Consume, Hold
	};

	public enum RewardFulfillmentOption {
		Printed, Mobile, Electronic, ThirdParty
	};
	
	// End - Enumerations

	// Begin - Private fields
	private String _url;
	private String _source;
	private String _srcEnv;
	private LWXmlSerializer _serializer = null;
	private LWLogger _logger = null;
	private int _timeout = 30000; // milliseconds
	private String _clientVersion = "$clazz.AssemblyVersion";

	private ArrayList<ILWIntegrationService> _proxyPool = new ArrayList<ILWIntegrationService>();
	private Semaphore _sempahore = null;
	// End - Private fields

	// Begin Proxy Helpers
	private synchronized void createProxyPool(int poolSize) throws MalformedURLException
	{
		_proxyPool.clear();
		URL url = new URL(_url);
		QName qname = new QName("urn:Brierley.LoyaltyWare.LWIntegrationSvc", "LWIntegrationService");
		for(int i = 0; i< poolSize; i++)
		{
			LWIntegrationService svc = new LWIntegrationService(url,qname);
			ILWIntegrationService proxy = svc.getPort(ILWIntegrationService.class);

			//use the url that has been provided, not the url from the WSDL
			((javax.xml.ws.BindingProvider)proxy).getRequestContext().put(javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY, _url);

			_proxyPool.add(proxy);
		}
		_sempahore = new Semaphore(poolSize);
	}
	
	private synchronized ILWIntegrationService getProxy()
	{		
		return _proxyPool.get(0);		
	}
	
	private synchronized void putProxy(ILWIntegrationService proxy)
	{
		_proxyPool.add(proxy);		
	}
	
	private ILWIntegrationService reserveProxy() throws InterruptedException
	{
		_sempahore.acquire();
		_logger.writeMessage("Proxies left after reserve = " + _sempahore.availablePermits());
		return getProxy();		
	}
	
	private void reclaimProxy(ILWIntegrationService proxy)
	{
		putProxy(proxy);
		_sempahore.release();
		_logger.writeMessage("Proxies available after release = " + _sempahore.availablePermits());
	}

	private void initialize(String url,		 
			String source, 
			int proxyPoolSize,
			Boolean writeToConsole, 
			String outputFile)throws LWClientException{
		_url = url;
		_source = source;
		if (source == null || source.trim().length() == 0) {
			throw new LWClientException("Please provide a client source.", 1);
		}

		if ( source.length() > 50 ){
			throw new LWClientException("source cannot be more than 50 characters.", 2002);
		}

		try {
			_srcEnv = "Java Version: " + System.getProperty("java.version");
			new java.net.URL(_url);
			createProxyPool(proxyPoolSize);
		} catch (MalformedURLException e) {
			throw new LWClientException("Malformed URL", e, 1);
		}

		_serializer = new LWXmlSerializer();
		_logger = new LWLogger(writeToConsole, outputFile);
		
	}

	// End Proxy Helpers

	// Begin - Construction & Initialization
	
	public LWIntegrationSvcClientManager(
		String url,		 
		String source, 
		Boolean writeToConsole, 
		String outputFile) throws LWClientException {
		initialize(url, source, 10, writeToConsole, outputFile);
	}

	public LWIntegrationSvcClientManager(
		String url,		 
		String source, 
		int proxyPoolSize,
		Boolean writeToConsole, 
		String outputFile) throws LWClientException {
		initialize(url, source, proxyPoolSize, writeToConsole, outputFile);
	}

	// End - Construction & Initialization

	// Begin - properties

	public String getClientVersion() {
	   return _clientVersion;
	}

	public int getTimeout() {
	   return _timeout;
	}

	public void setTimeout(int timeout) {
	   _timeout = timeout;
	}
	// End - properties
	
	// Begin - Generic

	public LWAPIResponse execute(String operationName, String payload, LWCDISExtraArgs extraArgs)
			throws LWClientException {
		String method = "execute";		
		
		_logger.writeMessage("Invoking method " + method);
		_logger.writeMessage(payload);

		ILWIntegrationService proxy = null;
		LWAPIResponse response = null;		
		try {
		    if ( !LWUtils.isEmptyString(operationName) && operationName.length() > 50 ){
				throw new LWClientException("operationName cannot be more than 50 characters.", 2002);
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			proxy = reserveProxy();			
			response = proxy.execute(operationName, _source, _srcEnv, extraArgs.getExternalId(), payload);
		} catch (InterruptedException e) {
		} finally {
			if ( proxy != null){				
				reclaimProxy(proxy);
			}
		}				
		return response;
	}

	// End - Generic
	
	// Begin - Client Specific API							
#foreach($operation in $clazz.Operations)
		/// <summary>
		/// $clazz.GetOperationSummary($operation)
		/// </summary>
		$clazz.GetOperationParamDoc($operation)
		$clazz.GetOperationReturnDoc($operation)								
		public $clazz.GetOperationReturnType($operation) $clazz.GetOperationName($operation)($clazz.GetOperationParms($operation))
			throws LWClientException, InterruptedException{		
			String method = "$operation.Name";

			$clazz.GetSerializationStatement($operation) 
			$clazz.GetEnvelopeStatement($operation)           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				$clazz.GetReturnStatement($operation)
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
#end
// End - Client Specific API		
}
