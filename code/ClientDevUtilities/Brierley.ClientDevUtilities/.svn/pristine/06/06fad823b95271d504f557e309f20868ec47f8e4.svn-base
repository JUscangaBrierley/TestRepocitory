using Brierley.FrameWork.Data.ModelAttributes;
using System;

namespace Brierley.FrameWork.Data.DomainModel
{
	/// <summary>
	/// POCO for ProductVariant. This class is autogenerated
	/// </summary>
	[Serializable]
	[PetaPoco.ExplicitColumns]
	[PetaPoco.PrimaryKey("Id", sequenceName = "hibernate_sequence")]
	[PetaPoco.TableName("LW_ProductVariant")]
    [AuditLog(true)]
    [UniqueIndex(ColumnName = "VariantDescription,ProductId", RequiresLowerFunction = false)]
    public class ProductVariant : LWCoreObjectBase
	{
		/// <summary>
		/// Gets or sets the ID for the current ProductVariant
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public long ID { get; set; }
		
		/// <summary>
		/// Gets or sets the ProductId for the current ProductVariant
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
        [ForeignKey(typeof(Product), "Id")]
        [ColumnIndex]
        public long ProductId { get; set; }
		
		/// <summary>
		/// Gets or sets the VariantDescription for the current ProductVariant
		/// </summary>
        [PetaPoco.Column(Length = 255, IsNullable = false)]
        public string VariantDescription { get; set; }

		/// <summary>
		/// Gets or sets the PartNumber for the current ProductVariant
		/// </summary>
        [PetaPoco.Column(Length = 100)]
		public string PartNumber { get; set; }

		/// <summary>
		/// Gets or sets the Quantity for the current ProductVariant
		/// </summary>
        [PetaPoco.Column]
		public long? Quantity { get; set; }

		/// <summary>
		/// Gets or sets the Threshold for the current ProductVariant
		/// </summary>
        [PetaPoco.Column]
		public long? QuantityThreshold { get; set; }

		/// <summary>
		/// Gets or sets the VariantOrder for the current ProductVariant
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public long VariantOrder { get; set; }

		/// <summary>
		/// Initializes a new instance of the ProductVariant class
		/// </summary>
		public ProductVariant()
		{
		}			

        public ProductVariant Clone()
        {
            return Clone(new ProductVariant());
        }

        public ProductVariant Clone(ProductVariant dest)
        {
            dest.ProductId = ProductId;
            dest.VariantDescription = VariantDescription;
            dest.PartNumber = PartNumber;
            dest.Quantity = Quantity;
            dest.QuantityThreshold = QuantityThreshold;
            dest.VariantOrder = VariantOrder;
            return dest;
        }

        public override LWObjectAuditLogBase GetArchiveObject()
        {
            ProductVariant_AL ar = new ProductVariant_AL()
            {
                ObjectId = this.ID,
                ProductId = this.ProductId,
                VariantDescription = this.VariantDescription,
                PartNumber = this.PartNumber,
                Quantity = this.Quantity,
                QuantityThreshold = this.QuantityThreshold,
                VariantOrder = this.VariantOrder,
                CreateDate = this.CreateDate,
                UpdateDate = this.UpdateDate
            };
            return ar;
        }
    }
}