using System;
using System.Collections.Generic;
using Brierley.FrameWork;
using Brierley.FrameWork.Common;
using Brierley.FrameWork.Common.Exceptions;
using Brierley.FrameWork.Common.Logging;
using Brierley.FrameWork.Data.DomainModel;
using Brierley.FrameWork.Interfaces;
using Brierley.FrameWork.LWIntegration.Util;
using Brierley.LoyaltyWare.LWMobileGateway.Authentication;
using Brierley.LoyaltyWare.LWMobileGateway.DomainModel;

namespace Brierley.LoyaltyWare.LWMobileGateway.OperationProviders.Members
{
	public class UpdateMember : OperationProviderBase
	{
		private const string _className = "UpdateMember";
		private LWLogger _logger = LWLoggerManager.GetLogger(LWConstants.LW_MOBILEGATEWAY_SERVICE);

		public UpdateMember()
			: base("UpdateMember")
		{
		}

		public override object Invoke(string source, WcfAuthenticationToken token, object[] parms)
		{
			const string methodName = "Invoke";

			if (parms == null || parms.Length != 2)
			{
				string errMsg = "Invalid parameters provided for UpdateMember.";
				_logger.Error(_className, methodName, errMsg);
				throw new LWOperationInvocationException(errMsg) { ErrorCode = 1 };
			}

			string modeStr = (string)parms[1];
			RuleExecutionMode mode = RuleExecutionMode.Real;
			if (!string.IsNullOrEmpty(modeStr))
			{
				modeStr = modeStr.ToLower();
				if (modeStr != "real" && modeStr != "simulation")
				{
					string err = string.Format("Invalid execution mode {0} specified.  Valid values are real or simulation", modeStr);
					throw new LWIntegrationException(err) { ErrorCode = 3231 };
				}
				if (modeStr == "simulation")
				{
					mode = RuleExecutionMode.Simulation;
				}
			}
			_logger.Debug(_className, methodName, "Execution mdoe = " + mode.ToString());

			MGMember member = parms[0] as MGMember; //null;
			if (member == null)
			{
				string errMsg = string.Format("No member provided for creating member.");
				_logger.Error(_className, methodName, errMsg);
				throw new LWException(errMsg) { ErrorCode = 1 };
			}

			MobileGatewayDirectives.APIOperationDirective opDirective = Config.GetOperationDirectiveByName(Name) as MobileGatewayDirectives.APIOperationDirective;
			IInboundMobileInterceptor interceptor = null;
			if (opDirective.Interceptor != null)
			{
				interceptor = InterceptorUtil.GetInterceptor(opDirective.Interceptor) as IInboundMobileInterceptor;
				if (interceptor == null)
				{
					_logger.Error(_className, methodName, "Unable to instantiate interceptor.");
					throw new LWException("Unable to instantiate interceptor.") { ErrorCode = 1 };
				}
			}

			string loadDirectiveStr = GetFunctionParameter("LoadDirective");
			if (string.IsNullOrEmpty(loadDirectiveStr))
			{
				string errMsg = string.Format("No load directives specified to check for existing member.");
				_logger.Error(_className, methodName, errMsg);
				throw new LWException(errMsg) { ErrorCode = 1 };
			}

			Member existing = MGMemberUtils.LoadExistingMember(loadDirectiveStr, member, interceptor);
			if (existing == null)
			{
				string errMsg = string.Format("The required member does not exist.");
				_logger.Error(_className, methodName, errMsg);
				throw new LWException(errMsg) { ErrorCode = 1 };
			}

			/*
			 * Verify that the member being updated is the currently authenticated member.
			 */

			if (existing.IpCode != token.CachedMember.IpCode)
			{
				string errMsg = string.Format("The member being updated (IpCode = {0}) is not the same the member logged in(IpCode = {1}).", member.IpCode, token.CachedMember.IpCode);
				_logger.Error(_className, methodName, errMsg);
				throw new LWException(errMsg) { ErrorCode = 1 };
			}

			existing = member.PopulateMember(Config, opDirective, existing);
			existing.ChangedBy = "Mobile Gateway Service";

			if (interceptor != null)
			{
				try
				{
					_logger.Debug(_className, methodName, "Invoking ProcessMemberBeforeSave on interceptor.");
					interceptor.ProcessMemberBeforeSave(Config, existing);
				}
				catch (Exception iex)
				{
					string msg = string.Format("Error generated by {0}.ProcessMemberBeforeSave", interceptor.GetType().ToString());
					_logger.Error(_className, methodName, msg, iex);
					throw;
				}
			}

			//double pointsReturned = 0;
			var results = new List<ContextObject.RuleResult>();
			LoyaltyService.SaveMember(existing, results, mode);

			// Calculate poins earned
			//foreach (ContextObject.RuleResult res in results)
			//{
			//    Brierley.FrameWork.Rules.AwardPoints.AwardPointsRuleResult result = res as Brierley.FrameWork.Rules.AwardPoints.AwardPointsRuleResult;
			//    if (result != null)
			//    {
			//        pointsReturned += result.PointsAwarded;
			//    }
			//}

			if (interceptor != null)
			{
				try
				{
					_logger.Debug(_className, methodName, "Invoking ProcessMemberAfterSave on interceptor.");
					interceptor.ProcessMemberAfterSave(Config, existing, results);
				}
				catch (Exception iex)
				{
					string msg = string.Format("Error generated by {0}.ProcessMemberAfterSave", interceptor.GetType().ToString());
					_logger.Error(_className, methodName, msg, iex);
					throw;
				}
			}
			_logger.Debug(_className, methodName, "Updated member with Ipcode " + existing.MyKey.ToString());

			token.ReplaceCachedMember(existing);

			return string.Empty;
		}
	}
}