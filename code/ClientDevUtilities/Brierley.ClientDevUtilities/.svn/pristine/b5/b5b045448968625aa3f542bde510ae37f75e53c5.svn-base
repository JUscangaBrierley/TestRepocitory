using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Brierley.FrameWork.Dmc.Exceptions
{
	/// <summary>
	/// Represents an exception generated by Teradata's DMC system.
	/// </summary>
	public abstract class DmcException : Exception
	{
		/// <summary>
		/// Gets or sets the party which is responsible for the error, according to DMC
		/// </summary>
		[DataMember(Name = "errorActor")]
		[JsonProperty(PropertyName = "errorActor")]
		public string ErrorActor { get; set; }

		/// <summary>
		/// Gets or sets the error code for the DMC exception
		/// </summary>
		[DataMember(Name = "errorCode")]
		[JsonProperty(PropertyName = "errorCode")]
		public ErrorCode ErrorCode { get; set; }

		public static DmcException GetException(string json)
		{
			if (string.IsNullOrEmpty(json))
			{
				throw new ArgumentNullException("json");
			}
			JObject jobject = JsonConvert.DeserializeObject<JObject>(json);
			return GetException(jobject);
		}

		public static DmcException GetException(JObject json)
		{
			DmcException ret = null;

			if (json["errorCode"] != null)
			{
				ErrorCode code = (ErrorCode)Enum.Parse(typeof(ErrorCode), json["errorCode"].ToString());
				string message = (json["message"] ?? string.Empty).ToString();
				switch (code)
				{
					case ErrorCode.NO_SUCH_OBJECT:
						ret = new NoSuchObjectException(message, json);
						break;
					case ErrorCode.OBJECT_ALREADY_EXISTS:
						ret = new ObjectAlreadyExistsException(message, json);
						break;
					case ErrorCode.INVALID_PARAMETER:
						ret = new InvalidParameterException(message, json);
						break;
					case ErrorCode.UNEXPECTED_ERROR:
						ret = new UnexpectedErrorException(message, json);
						break;
					default:
						break;
				}
			}
			if (ret == null)
			{
				ret  = new UnexpectedErrorException(string.Format("Unknown error received from DMC. Response body: {0}", json.ToString()), json) { ErrorCode = ErrorCode.UNEXPECTED_ERROR };
			}
			return ret;
		}

		public DmcException()
		{
			ErrorCode = Dmc.ErrorCode.UNEXPECTED_ERROR;
		}

		public DmcException(string message, JObject json)
			: base(message)
		{
			ErrorCode = Dmc.ErrorCode.UNEXPECTED_ERROR;

			if (json["errorActor"] != null)
			{
				ErrorActor = json["errorActor"].ToString();
			}
		}
	}
}
