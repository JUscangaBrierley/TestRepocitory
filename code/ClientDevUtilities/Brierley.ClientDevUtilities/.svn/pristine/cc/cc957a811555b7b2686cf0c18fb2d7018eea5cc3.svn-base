//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Brierley.FrameWork.JobSchedulerService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HourlyScheduleType", Namespace="http://schemas.datacontract.org/2004/07/Brierley.FrameWork.Common")]
    public enum HourlyScheduleType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TopOfTheHour = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HourFrequency = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduleType", Namespace="http://schemas.datacontract.org/2004/07/Brierley.FrameWork.Common")]
    public enum ScheduleType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OneTime = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Recurring = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JobSchedulerService.ILWJobScheduler")]
    public interface ILWJobScheduler {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILWJobScheduler/ScheduleImmediateJob", ReplyAction="http://tempuri.org/ILWJobScheduler/ScheduleImmediateJobResponse")]
        long ScheduleImmediateJob(string org, string env, string jobName, string jobType, string assemblyName, string factoryType, bool executeInSeparateThread, bool pauseTimerWhileRunning, System.DateTime startDate, System.DateTime endDate, string emailReportTo, string parms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILWJobScheduler/ScheduleHourlyJob", ReplyAction="http://tempuri.org/ILWJobScheduler/ScheduleHourlyJobResponse")]
        long ScheduleHourlyJob(string org, string env, string jobName, string jobType, string assemblyName, string factoryType, bool executeInSeparateThread, bool pauseTimerWhileRunning, System.DateTime startDate, System.DateTime endDate, Brierley.FrameWork.JobSchedulerService.HourlyScheduleType type, int hourFrequency, string emailReportTo, string parms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILWJobScheduler/ScheduleMinutelyJob", ReplyAction="http://tempuri.org/ILWJobScheduler/ScheduleMinutelyJobResponse")]
        long ScheduleMinutelyJob(string org, string env, string jobName, string jobType, string assemblyName, string factoryType, bool executeInSeparateThread, bool pauseTimerWhileRunning, System.DateTime startDate, System.DateTime endDate, int minuteFrequency, string emailReportTo, string parms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILWJobScheduler/ScheduleDailyJob", ReplyAction="http://tempuri.org/ILWJobScheduler/ScheduleDailyJobResponse")]
        long ScheduleDailyJob(
                    string org, 
                    string env, 
                    string jobName, 
                    string jobType, 
                    string assemblyName, 
                    string factoryType, 
                    bool executeInSeparateThread, 
                    bool pauseTimerWhileRunning, 
                    int runAtHour, 
                    int runAtMinute, 
                    Brierley.FrameWork.JobSchedulerService.ScheduleType recurringType, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int dailyFrequency, 
                    System.DayOfWeek[] runEvery, 
                    string emailReportTo, 
                    string parms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILWJobScheduler/ScheduleOneTimeJob", ReplyAction="http://tempuri.org/ILWJobScheduler/ScheduleOneTimeJobResponse")]
        long ScheduleOneTimeJob(string org, string env, string jobName, string jobType, string assemblyName, string factoryType, bool executeInSeparateThread, bool pauseTimerWhileRunning, System.DateTime runTime, string emailReportTo, string parms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILWJobScheduler/CancelJob", ReplyAction="http://tempuri.org/ILWJobScheduler/CancelJobResponse")]
        void CancelJob(string org, string env, long jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILWJobScheduler/AbortJobRun", ReplyAction="http://tempuri.org/ILWJobScheduler/AbortJobRunResponse")]
        void AbortJobRun(string org, string env, long jobId, long jobRunId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILWJobSchedulerChannel : Brierley.FrameWork.JobSchedulerService.ILWJobScheduler, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LWJobSchedulerClient : System.ServiceModel.ClientBase<Brierley.FrameWork.JobSchedulerService.ILWJobScheduler>, Brierley.FrameWork.JobSchedulerService.ILWJobScheduler {
        
        public LWJobSchedulerClient() {
        }
        
        public LWJobSchedulerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LWJobSchedulerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LWJobSchedulerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LWJobSchedulerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long ScheduleImmediateJob(string org, string env, string jobName, string jobType, string assemblyName, string factoryType, bool executeInSeparateThread, bool pauseTimerWhileRunning, System.DateTime startDate, System.DateTime endDate, string emailReportTo, string parms) {
            return base.Channel.ScheduleImmediateJob(org, env, jobName, jobType, assemblyName, factoryType, executeInSeparateThread, pauseTimerWhileRunning, startDate, endDate, emailReportTo, parms);
        }
        
        public long ScheduleHourlyJob(string org, string env, string jobName, string jobType, string assemblyName, string factoryType, bool executeInSeparateThread, bool pauseTimerWhileRunning, System.DateTime startDate, System.DateTime endDate, Brierley.FrameWork.JobSchedulerService.HourlyScheduleType type, int hourFrequency, string emailReportTo, string parms) {
            return base.Channel.ScheduleHourlyJob(org, env, jobName, jobType, assemblyName, factoryType, executeInSeparateThread, pauseTimerWhileRunning, startDate, endDate, type, hourFrequency, emailReportTo, parms);
        }
        
        public long ScheduleMinutelyJob(string org, string env, string jobName, string jobType, string assemblyName, string factoryType, bool executeInSeparateThread, bool pauseTimerWhileRunning, System.DateTime startDate, System.DateTime endDate, int minuteFrequency, string emailReportTo, string parms) {
            return base.Channel.ScheduleMinutelyJob(org, env, jobName, jobType, assemblyName, factoryType, executeInSeparateThread, pauseTimerWhileRunning, startDate, endDate, minuteFrequency, emailReportTo, parms);
        }
        
        public long ScheduleDailyJob(
                    string org, 
                    string env, 
                    string jobName, 
                    string jobType, 
                    string assemblyName, 
                    string factoryType, 
                    bool executeInSeparateThread, 
                    bool pauseTimerWhileRunning, 
                    int runAtHour, 
                    int runAtMinute, 
                    Brierley.FrameWork.JobSchedulerService.ScheduleType recurringType, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int dailyFrequency, 
                    System.DayOfWeek[] runEvery, 
                    string emailReportTo, 
                    string parms) {
            return base.Channel.ScheduleDailyJob(org, env, jobName, jobType, assemblyName, factoryType, executeInSeparateThread, pauseTimerWhileRunning, runAtHour, runAtMinute, recurringType, startDate, endDate, dailyFrequency, runEvery, emailReportTo, parms);
        }
        
        public long ScheduleOneTimeJob(string org, string env, string jobName, string jobType, string assemblyName, string factoryType, bool executeInSeparateThread, bool pauseTimerWhileRunning, System.DateTime runTime, string emailReportTo, string parms) {
            return base.Channel.ScheduleOneTimeJob(org, env, jobName, jobType, assemblyName, factoryType, executeInSeparateThread, pauseTimerWhileRunning, runTime, emailReportTo, parms);
        }
        
        public void CancelJob(string org, string env, long jobId) {
            base.Channel.CancelJob(org, env, jobId);
        }
        
        public void AbortJobRun(string org, string env, long jobId, long jobRunId) {
            base.Channel.AbortJobRun(org, env, jobId, jobRunId);
        }
    }
}
