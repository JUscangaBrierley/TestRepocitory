using System;
using System.Xml;
using System.Xml.Linq;
using System.Threading;

using Brierley.FrameWork.Common;
using Brierley.FrameWork.Common.Exceptions;
using Brierley.FrameWork.Common.Extensions;
using Brierley.FrameWork.Common.Logging;
using Brierley.FrameWork.JobScheduler;

namespace Brierley.FrameWork.Data.DomainModel
{
	/// <summary>
    /// POCO for ScheduledJob. This class is autogenerated
	/// </summary>
	[Serializable]
	[PetaPoco.ExplicitColumns]
	[PetaPoco.PrimaryKey("ID", sequenceName = "hibernate_sequence")]
	[PetaPoco.TableName("LW_ScheduledJob")]
	public class ScheduledJob : LWCoreObjectBase
	{
		private const string _className = "ScheduledJob";
		
		/// <summary>
		/// Gets or sets the Id for the current ScheduledJob
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public long ID { get; set; }

		
		/// <summary>
		/// Gets or sets the Name for the current ScheduledJob
		/// </summary>
        [PetaPoco.Column(Length = 100, IsNullable = false)]
		public string Name { get; set; }

        /// <summary>
        /// Gets or sets the JobType for the current ScheduledJob
        /// </summary>
        [PetaPoco.Column(Length = 255)]
		public string JobType { get; set; }

		/// <summary>
		/// Gets or sets the AssemblyName for the current ScheduledJob
		/// </summary>
        [PetaPoco.Column(Length = 255, IsNullable = false)]
		public string AssemblyName { get; set; }
		

		/// <summary>
		/// Gets or sets the FactoryName for the current ScheduledJob
		/// </summary>
        [PetaPoco.Column(Length = 255)]
		public string FactoryName { get; set; }

		
		/// <summary>
		/// Gets or sets the Parms for the current ScheduledJob
		/// </summary>
        [PetaPoco.Column]
		public string Parms { get; set; }
		
		/// <summary>
		/// Gets or sets the ExecuteInSeparateThread for the current ScheduledJob
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
        public bool ExecuteInSeparateThread { get; set; }

		/// <summary>
		/// Gets or sets the PauseTimerWhileRunningJob for the current ScheduledJob
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
        public bool PauseTimerWhileRunningJob { get; set; }

		/// <summary>
		/// Gets or sets the StartDate for the current ScheduledJob
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public DateTime StartDate { get; set; }

		/// <summary>
		/// Gets or sets the EndDate for the current ScheduledJob
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public DateTime EndDate { get; set; }

		/// <summary>
		/// Gets or sets the Schedule for the current ScheduledJob
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public string Schedule { get; set; }

		/// <summary>
		/// Gets or sets the email address of the person to email the job report to.
		/// </summary>
        [PetaPoco.Column(Length = 2000)]
		public string EmailReportTo { get; set; }
		

		/// <summary>
        /// Initializes a new instance of the LWScheduledJob class
		/// </summary>
		public ScheduledJob()
		{
			PauseTimerWhileRunningJob = true;
			StartDate = EndDate = DateTimeUtil.MinValue;
		}


		public static ScheduledJob Parse(XElement element)
		{
			string dateFormat = string.Empty;
			ScheduledJob jd = new ScheduledJob();

			if (element.Attribute("ExecuteInSeparateThread") != null)
			{
				jd.ExecuteInSeparateThread = bool.Parse(element.AttributeValue("ExecuteInSeparateThread"));
			}

			if (element.Attribute("PauseTimerWhileRunningJob") != null)
			{
				jd.PauseTimerWhileRunningJob = bool.Parse(element.AttributeValue("PauseTimerWhileRunningJob"));
			}

			foreach (XElement current in element.Descendants())
			{
				if (current.Name == "JobName")
				{
					jd.Name = current.Value;
				}
				else if (current.Name == "DateFormat")
				{
					dateFormat = current.Value;
				}
				else if (current.Name == "StartDate")
				{
					string startDate = current.Value;
					jd.StartDate = DateTimeUtil.ConvertStringToDate(dateFormat, startDate);
				}
				else if (current.Name == "EndDate")
				{
					string endDate = current.Value;
					jd.EndDate = DateTimeUtil.ConvertStringToDate(dateFormat, endDate);
				}
				else if (current.Name == "JobFactoryType")
				{
					jd.FactoryName = current.Value;
				}
				else if (current.Name == "AssemblyName")
				{
					jd.AssemblyName = current.Value;
				}
				else if (current.Name == "JobParm")
				{
					jd.Parms = current.Value;
				}
			}

			return jd;
		}



		public ISchedule ParseSchedule()
		{
			ISchedule schedule = null;

			if (!string.IsNullOrEmpty(Schedule))
			{
				XElement element = XElement.Parse(Schedule);
				if (element.Element("ImmediateSchedule") != null)
				{
					schedule = ImmediateSchedule.Parse(element.Element("ImmediateSchedule"));
				}
				if (element.Element("MinutelySchedule") != null)
				{
					schedule = MinuteSchedule.Parse(element.Element("MinutelySchedule"));
				}
				if (element.Element("HourlySchedule") != null)
				{
					schedule = HourlySchedule.Parse(element.Element("HourlySchedule"));
				}
				if (element.Element("DailySchedule") != null)
				{
					schedule = DailySchedule.Parse(element.Element("DailySchedule"));
				}
				if (element.Element("OneTimeSchedule") != null)
				{
					schedule = OneTimeSchedule.Parse(element.Element("OneTimeSchedule"));
				}
				if (element.Element("WeeklySchedule") != null)
				{
					//...
				}
				if (element.Element("MonthlySchedule") != null)
				{
					//...
				}
			}
			return schedule;
		}

		//backward compatability for BizTalkSdk
		public static ScheduledJob ParseJobDetail(XmlNode rootNode)
		{
			ScheduledJob job = null;
			if (rootNode == null || rootNode.LocalName != "JobSchedule" && rootNode.LocalName != "JobInfo")
			{
				throw new LWSchedulerException("Malformed JobSchedule provided.");
			}
			foreach (XmlNode node in rootNode.ChildNodes)
			{
				if (node.LocalName == "JobDetail")
				{
					job = ScheduledJob.Parse(XElement.Parse(node.ToString()));
				}
			}
			return job;
		}
		
		public void SetSchedule(ISchedule schedule)
		{
			if (schedule is ImmediateSchedule)
			{
				ImmediateSchedule immediate = (ImmediateSchedule)schedule;
				Schedule = LWSchedulerUtil.CreateImmediateScheduleXml(this);
			}
			else if (schedule is OneTimeSchedule)
			{
				OneTimeSchedule oneTime = (OneTimeSchedule)schedule;
				Schedule = LWSchedulerUtil.CreateOneTimeScheduleXml(this, oneTime);
			}
			else if (schedule is DailySchedule)
			{
				DailySchedule daily = (DailySchedule)schedule;
				Schedule = LWSchedulerUtil.CreateDailyScheduleXml(this, daily);
			}
			else if (schedule is HourlySchedule)
			{
				HourlySchedule hourly = (HourlySchedule)schedule;
				Schedule = LWSchedulerUtil.CreateHourlyScheduleXml(this, hourly);
			}
			else if (schedule is MinuteSchedule)
			{
				MinuteSchedule minute = (MinuteSchedule)schedule;
				Schedule = LWSchedulerUtil.CreateMinutelyScheduleXml(this, minute);
			}
		}
	}
}