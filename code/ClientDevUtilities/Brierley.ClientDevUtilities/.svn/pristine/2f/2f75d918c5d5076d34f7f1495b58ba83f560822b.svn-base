//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated LoyaltyWare.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.ServiceModel;
using System.ServiceModel.Channels;

using Brierley.LoyaltyWare.ClientLib.DomainModel;
using Brierley.LoyaltyWare.ClientLib.DomainModel.Framework;
using Brierley.LoyaltyWare.ClientLib.DomainModel.Client;

namespace Brierley.LoyaltyWare.ClientLib
{
	public class LWIntegrationSvcClientManager : IDisposable
	{	
		#region Enumerations
		public enum Language { English = 1, French = 2, Spanish = 3, German = 4, Russian = 5 };
        public enum MemberSearch { MemberID, CardID, EmailAddress, PhoneNumber, AlternateID, LastName, Username, PostalCode };		
		public enum RewardType { Earned, Entitlement };
        public enum ConsumptionPolicy { NoAction, Consume, Hold };
		public enum RewardFulfillmentOption { Printed, Mobile, Electronic, ThirdParty };		
        #endregion

	    #region Fields
        private string _url = string.Empty;
		private string _source = string.Empty;
		private string _srcEnv = string.Format(".NET Framework: {0}", System.Environment.Version.ToString());
        private LWXmlSerializer _serializer = null;
        private LWLogger _logger = null;
		private int _timeout = 60000; // milliseconds
		private int _maxStringContentLength = 16384;
		private long _maxReceivedMessageSize = 65536;
		private string _clientVersion = "$clazz.AssemblyVersion";

		private LWIntegrationServiceClient _proxy = null;
        #endregion

		#region properties

		public string ClientVersion
        {
            get { return _clientVersion; }
        }

		/// <summary>
		/// Get/set the send timeout in milliseconds
		/// </summary>
		public int Timeout
		{
			get { return _timeout; }
			set 
            { 
                _timeout = value;
                _proxy = null;
            }
		}
		
		/// <summary>
		/// Get/set the maximum length for strings in the XML
		/// </summary>
		public int MaxStringContentLength
		{
			get { return _maxStringContentLength; }
			set 
            { 
                _maxStringContentLength = value;
                _proxy = null;
            }
		}

		/// <summary>
		/// Get/set the maximum message size
		/// </summary>
		public long MaxReceivedMessageSize
		{
			get { return _maxReceivedMessageSize; }
			set 
            { 
                _maxReceivedMessageSize = value;
                _proxy = null;
            }
		}
        #endregion
			
	    #region Contruction & Intialization
		/// <summary>
        /// Initializes a new instance of the <see cref="LWIntegrationSvcClientManager"/> class.
        /// </summary>
        /// <param name="url">The URL.</param>
        /// <param name="source">The source.</param>
        /// <param name="writeToConsole">if set to <c>true</c> [write to console].</param>
        /// <param name="outputFile">The output file.</param>
        /// <remarks></remarks>
        public LWIntegrationSvcClientManager(string url, string source, bool writeToConsole, string outputFile)
        {
            _url = url;
            _source = source;
            if (string.IsNullOrEmpty(source))
            {
                throw new LWClientException("Please provide a client source.");
            }
			if (source.Length > 50)
            {
                throw new LWClientException("source cannot be more than 50 characters.") { ErrorCode = 2002 };
            }
            _logger = new LWLogger(writeToConsole, outputFile);
            _serializer = new LWXmlSerializer(_logger);

			_proxy = GetLWIntegrationServiceProxy(_url);
        }
		
		public void Dispose()
        {
            if (_logger != null)
            {
                _logger.Dispose();
            }
			if (_proxy != null)
            {
                _proxy.Close();
                _proxy = null;
            }
        }        
        #endregion
					
		#region LWINtegration Svc Proxy Helpers
		/// <summary>
        /// Gets the LW integration service proxy.
        /// </summary>
        /// <param name="uriString">The URI string.</param>
        /// <returns></returns>
        /// <remarks></remarks>
        private LWIntegrationServiceClient GetLWIntegrationServiceProxy(string uriString)
        {
            Binding binding = null;
            Uri uri = new Uri(uriString);
            EndpointAddress endpointAddress = new EndpointAddress(uri);
            if (uri.Scheme == "http")
            {
                binding = new BasicHttpBinding();
				((BasicHttpBinding)binding).ReaderQuotas.MaxStringContentLength = _maxStringContentLength;
				((BasicHttpBinding)binding).MaxReceivedMessageSize = MaxReceivedMessageSize;
            }
			else if (uri.Scheme == "https")
            {
                binding = new BasicHttpBinding();
				((BasicHttpBinding)binding).ReaderQuotas.MaxStringContentLength = _maxStringContentLength;
				((BasicHttpBinding)binding).MaxReceivedMessageSize = MaxReceivedMessageSize;
                ((BasicHttpBinding)binding).Security.Mode = BasicHttpSecurityMode.Transport;
            }
            else if (uri.Scheme == "net.tcp")
            {
                binding = new NetTcpBinding();
            }
            else if (uri.Scheme == "net.pipe")
            {
                binding = new NetNamedPipeBinding();
            }
            else
            {
                return null;
            }
			binding.SendTimeout = new TimeSpan(0, 0, 0, 0, _timeout);
            return new LWIntegrationServiceClient(binding, endpointAddress);
        }
        #endregion
					
		#region Generic
		/// <summary>
        /// Executes the specified op name.
        /// </summary>
        /// <param name="opName">Name of the op.</param>
        /// <param name="payload">The payload.</param>
        /// <returns></returns>
        /// <remarks></remarks>
		public Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse Execute(string opName, string payload, string externalId)
        {
            string method = "Execute";

            _logger.WriteMessage("Invoking method " + method);
			_logger.WriteMessage(payload);

			if (!string.IsNullOrEmpty(opName) && opName.Length > 50)
            {
                throw new LWClientException("operationName cannot be more than 50 characters.") { ErrorCode = 2002 };
            }            
			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }
			if ( _proxy == null )
			{				
				_proxy = GetLWIntegrationServiceProxy(_url);
			}
			return _proxy.Execute(opName, _source, _srcEnv, externalId, payload);
        }
		#endregion
				
		#region Client Specific API		
#foreach($operation in $clazz.Operations)
		/// <summary>
		/// $clazz.GetOperationSummary($operation)
		/// </summary>
		$clazz.GetOperationParamDoc($operation)
		$clazz.GetOperationReturnDoc($operation)								
		public virtual $clazz.GetOperationReturnType($operation) $operation.Name ($clazz.GetOperationParms($operation))
		{
			string method = "$operation.Name";

			$clazz.GetSerializationStatement($operation) 
			$clazz.GetEnvelopeStatement($operation)           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                $clazz.GetReturnStatement($operation)				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
#end
		#endregion
	}
}
