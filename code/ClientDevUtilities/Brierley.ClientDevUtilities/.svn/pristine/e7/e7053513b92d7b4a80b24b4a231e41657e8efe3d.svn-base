using System;
using System.Text.RegularExpressions;
using Brierley.FrameWork.Common.Exceptions;
using Brierley.FrameWork.Data.ModelAttributes;

namespace Brierley.FrameWork.Data.DomainModel
{
	/// <summary>
	/// POCO for ValidatorTrigger. This class is autogenerated
	/// </summary>
	[Serializable]
	[PetaPoco.ExplicitColumns]
	[PetaPoco.PrimaryKey("ID", sequenceName = "hibernate_sequence")]
	[PetaPoco.TableName("LW_ValidatorTriggers")]
	public class ValidatorTrigger : LWCoreObjectBase
	{
		/// <summary>
		/// Gets or sets the ID for the current ValidatorTrigger
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public long ID { get; set; }

		/// <summary>
		/// Gets or sets the ValidatorId for the current ValidatorTrigger
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public long ValidatorId { get; set; }

		/// <summary>
		/// Gets or sets the AttributeCode for the current ValidatorTrigger
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
        [ColumnIndex]
		public long AttributeCode { get; set; }

		/// <summary>
		/// Gets or sets the Sequence for the current ValidatorTrigger
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public long Sequence { get; set; }

		/// <summary>
		/// Gets or sets the ErrorMessage for the current ValidatorTrigger
		/// </summary>
        [PetaPoco.Column(Length = 2000)]
		public string ErrorMessage { get; set; }

		/// <summary>
		/// Gets or sets the OnErrorContinue for the current ValidatorTrigger
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public bool OnErrorContinue { get; set; }


		/// <summary>
		/// Initializes a new instance of the ValidatorTrigger class
		/// </summary>
		public ValidatorTrigger()
		{
		}

		/// <summary>
		/// Initializes a new instance of the ValidatorTrigger class
		/// </summary>
		/// <param name="attributeCode">Initial <see cref="ValidatorTrigger.AttributeCode" /> value</param>
		/// <param name="sequence">Initial <see cref="ValidatorTrigger.Sequence" /> value</param>
		/// <param name="onErrorContinue">Initial <see cref="ValidatorTrigger.OnErrorContinue" /> value</param>
		/// <param name="updateDate">Initial <see cref="ValidatorTrigger.UpdateDate" /> value</param>
		public ValidatorTrigger(long attributeCode, long sequence, bool onErrorContinue, DateTime updateDate)
		{
			AttributeCode = attributeCode;
			Sequence = sequence;
			OnErrorContinue = onErrorContinue;
			UpdateDate = updateDate;
		}

		/// <summary>
		/// Minimal constructor for class ValidatorTrigger
		/// </summary>
		/// <param name="attributeCode">Initial <see cref="ValidatorTrigger.AttributeCode" /> value</param>
		/// <param name="sequence">Initial <see cref="ValidatorTrigger.Sequence" /> value</param>
		/// <param name="updateDate">Initial <see cref="ValidatorTrigger.UpdateDate" /> value</param>
		public ValidatorTrigger(long attributeCode, long sequence, DateTime updateDate)
		{
			AttributeCode = attributeCode;
			Sequence = sequence;
			UpdateDate = updateDate;
		}

		public void Validate(object data)
		{
			using (var loyalty = LWDataServiceUtil.LoyaltyDataServiceInstance())
			{
				Validator validator = loyalty.GetValidator(ValidatorId);
				try
				{
					Regex regEx = new Regex(validator.RegularExpression);
					if (regEx.IsMatch(data.ToString()) == false)
					{
						if (!string.IsNullOrEmpty(ErrorMessage))
						{
							throw new LWValidationException(ErrorMessage);
						}
						else
						{
							throw new LWValidationException("Validation failed for " + validator.Name);
						}
					}
				}
				catch (Exception ex)
				{
					if (!string.IsNullOrEmpty(ErrorMessage))
					{
						throw new LWValidationException(ErrorMessage, ex);
					}
					else
					{
						throw new LWValidationException("Unable to validate " + validator.Name, ex);
					}
				}
			}
		}

		public ValidatorTrigger Clone()
		{
			return Clone(new ValidatorTrigger());
		}

		public ValidatorTrigger Clone(ValidatorTrigger dest)
		{
			dest.ValidatorId = ValidatorId;
			dest.AttributeCode = AttributeCode;
			dest.Sequence = Sequence;
			dest.ErrorMessage = ErrorMessage;
			dest.OnErrorContinue = OnErrorContinue;
			return (ValidatorTrigger)base.Clone(dest);
		}
	}
}