using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Brierley.FrameWork.Data;
using Brierley.FrameWork.Data.DomainModel;
using Brierley.FrameWork;
using Brierley.FrameWork.Common;
using PetaPoco;
using Brierley.FrameWork.Data.DataAccess;
using Brierley.ClientDevUtilities.LWGateway.DataAccess;

namespace Brierley.ClientDevUtilities.LWGateway
{
    public interface ILoyaltyDataService : IServiceBase
    {
        ILWEventDao LWEventDao { get; }
        IMemberDao MemberDao { get; }
        IPointTransactionDao PointTransactionDao { get; }

        IEnumerable<MemberNextBestAction> AssignNextBestActions(long memberId, int count, bool persist = true, IEnumerable<NextBestActionType> actionTypes = null, bool assignCertificates = false, int? displayOrder = null, DateTime? expirationDate = null);
        bool AttributeSetExists(string attSetName);
        void CancelOrReturnMemberOrder(string orderNumber, string cancellationNumber, string notes);
        void CancelOrReturnMemberReward(MemberReward reward, RewardOrderStatus newStatus, string notes);
        decimal CancelOrTerminateMember(Member m, DateTime effectiveDate, string reason, bool terminateFlag, MemberCancelOptions options);
        decimal CancelVirtualCard(Member m, string loyaltyId, string reason, DateTime effectiveDate, bool cancelMembership, bool saveMember, bool expirePoints);
        decimal CancelVirtualCard(Member m, long vcKey, string reason, DateTime effectiveDate, bool cancelMembership, bool saveMember, bool expirePoints);
        void ChangeMemberPassword(AuthenticationFields identityType, string identity, string oldPassword, string newPassword, bool passwordResetRequired);
        void ChangeMemberPassword(Member member, string newPassword, bool updateMember = true);
        void ClearRuleResult(Member member);
        void ClearRuleResult(IClientDataObject container);
        decimal ConsumePoints(IList<VirtualCard> vcList, IList<PointType> pt, IList<PointEvent> pe, DateTime consumptionDate, decimal points, PointTransactionOwnerType ownerType, string notes, long ownerId, long rowKey);
        decimal ConsumePoints(Member member, PointType pt, PointEvent pe, DateTime consumptionDate, DateTime expirationDate, decimal points, PointTransactionOwnerType ownerType, long ownerId, long rowKey, string locationId, string changedBy);
        decimal ConsumePoints(VirtualCard vc, PointType pt, PointEvent pe, DateTime consumptionDate, decimal points, PointTransactionOwnerType ownerType, long ownerId, long rowKey, string notes, string locationId, string changedBy);
        decimal ConsumePoints(Member member, PointType pt, PointEvent pe, DateTime consumptionDate, decimal points, PointTransactionOwnerType ownerType, long ownerId, long rowKey, string locationId, string changedBy);
        decimal ConsumePoints(long vcKey, PointTransaction trx, decimal pointsToConsume, PointType pt, PointEvent pe, DateTime consumptionDate, PointTransactionOwnerType ownerType, long ownerId, long rowKey, string notes, string locationId, string changedBy);
        Member ConvertToMember(Member member, DateTime effectiveDate);
        long CountAttributeSetObjects(IAttributeSetContainer owner, AttributeSetMetaData meta, LWCriterion criteria);
        long CountAttributeSetObjects(IAttributeSetContainer owner, AttributeSetMetaData meta, string whereClause);
        void CreateAttribute(AttributeMetaData att);
        void CreateAttribute(string name, DataType dataType, long attSetCode, bool isRequired, bool isUnique, AttributeEncryptionType encryptionType, long minLength, long maxLength, string displayText, string description, string defaultValues, bool visibleInGrid = false, bool canBeUpdated = false, bool isSortable = false, bool isMigrationText = false);
        void CreateAttributeSet(AttributeSetMetaData attSet);
        void CreateAttributeSetTable(long attSetCode);
        void CreateLWEvent(LWEvent lwevent);
        void CreateMemberCoupon(MemberCoupon coupon);
        void CreateMemberCouponRedemption(MemberCouponRedemption redemption);
        void CreateMemberCoupons(List<MemberCoupon> coupons);
        void CreateMemberLoginEvent(MemberLoginEvent memberLoginEvent);
        void CreateMemberMessage(MemberMessage message);
        void CreateMemberNextBestAction(MemberNextBestAction nba);
        void CreateMemberOffer(MemberBonus ad);
        void CreateMemberOrder(Member member, MemberOrder order);
        void CreateMemberPromotion(MemberPromotion promotion);
        void CreateMemberReward(MemberReward reward);
        void CreateMemberSocNet(long memberId, SocialNetworkProviderType providerType, string providerUID, string properties);
        void CreateMemberSocNet(MemberSocNet socNet);
        void CreateMemberTier(MemberTier tier);
        void CreateMobileDevice(MobileDevice device);
        MTouch CreateMTouch(MTouchType mtouchType, string entityId, string secondaryId = null, bool available = true, int? usesAllowed = null);
        void CreateMTouch(MTouchType mtouchType, int howMany, string secondaryId = null, int? usesAllowed = null);
        void CreateMTouches(IList<MTouch> mtouches);
        void CreateNextBestAction(NextBestAction nba);
        void CreateNextBestActions(IEnumerable<NextBestAction> nbas);
        void CreatePointEvent(PointEvent pe);
        void CreatePointsSummaries(List<PointsSummary> summaries);
        void CreatePointsSummary(PointsSummary summary);
        void CreatePointTransaction(PointTransaction txn);
        void CreatePointTransactions(List<PointTransaction> txnList);
        void CreatePointType(PointType pt);
        void CreatePushSession(PushSession session);
        void CreateRuleTrigger(RuleTrigger rt);
        void CreateTierDef(TierDef tier);
        void CreateTriggerUserEventLog(TriggerUserEventLog log);
        void CreateValidator(Validator validator);
        void CreateValidatorTrigger(ValidatorTrigger vt);
        ValidatorTrigger CreateValidatorTrigger(long attributeCode, long validatorId, bool OnError, long sequence, string errorMessage);
        List<PointTransaction> Credit(VirtualCard vc, PointType pt, PointEvent pe, decimal points, string promoCode, DateTime pointsTransactionDate, DateTime pointsExpirationDate, PointTransactionOwnerType ownerType, long ownerId, long rowKey, string notes, string locationId, string changedBy);
        List<PointTransaction> Credit(VirtualCard vc, PointType pt, PointEvent pe, decimal points, string promoCode, DateTime pointsTransactionDate, DateTime pointsExpirationDate, string locationId, string changedBy);
        List<PointTransaction> Debit(VirtualCard vc, PointType pt, PointEvent pe, decimal points, DateTime transactionDate, DateTime expDate, PointTransactionOwnerType ownerType, long ownerId, long rowKey, string notes, string locationId, string changedBy, string promoCode = "");
        List<PointTransaction> Debit(VirtualCard vc, PointType pt, PointEvent pe, decimal points, DateTime transactionDate, DateTime expDate, string locationId, string changedBy);
        decimal Debit(IClientDataObject row, VirtualCard vc, PointType pt, PointEvent pe, DateTime transactionDate, DateTime expDate, string note, string locationId, string changedBy, string promoCode = "");
        void DeleteAttribute(long attCode);
        void DeleteAttribute(AttributeSetMetaData attSet, long attCode);
        void DeleteAttributeSet(long attSetCode);
        void DeleteAttributeSetTable(long attSetCode);
        int DeleteClientDataObjects(string attributeSetName, long[] keys);
        void DeleteLWEvent(long lweventId);
        void DeleteMember(long ipCode, bool deep);
        void DeleteMemberCoupon(long couponId);
        void DeleteMemberMessage(long messageId);
        void DeleteMemberNextBestAction(long id);
        void DeleteMemberOffer(long offerId);
        void DeleteMemberPromotion(string code);
        void DeleteMemberPromotion(long id);
        void DeleteMembers(long[] ipCodes, bool deep);
        void DeleteMemberStore(long storeId);
        void DeleteMemberStoreByMember(long memberId);
        void DeleteMemberTier(long tierId);
        void DeleteMobileDevice(long deviceId);
        void DeleteMobileDevicesByMember(long memberId);
        void DeleteMTouches(IList<long> mtouchIDs);
        void DeleteNextBestAction(long memberId, int priority);
        void DeletePointEvent(long peId);
        int DeletePointsSummariesByMembers(long[] memberIds);
        int DeletePointsSummaryByMember(long memberId);
        void DeletePointTransaction(long txnId);
        int DeletePointTransactionRowKey(long rowKey);
        void DeletePointType(long ptId);
        void DeleteRuleTrigger(long rtId);
        void DeleteTierDef(long tierId);
        void DeleteValidator(long validatorId);
        void DeleteValidatorTrigger(long id);
        void EndPushSession(PushSession session, DateTime endDate);
        MemberPromotion EnrollMemberPromotion(long promotionId, Member member, bool useCertificate = false, List<ContextObject.RuleResult> results = null, RuleExecutionMode mode = RuleExecutionMode.Real, bool skipRules = false);
        MemberPromotion EnrollMemberPromotion(string promoCode, Member member, bool useCertificate = false, List<ContextObject.RuleResult> results = null, RuleExecutionMode mode = RuleExecutionMode.Real, bool skipRules = false);
        void Execute(RuleTrigger trigger, IAttributeSetContainer owner, IClientDataObject currentRow, List<ContextObject.RuleResult> results, RuleExecutionMode mode);
        void Execute(RuleTrigger trigger, ContextObject contextobj);
        void ExecuteEventRules(ContextObject context, string eventName, RuleInvocationType invocation = RuleInvocationType.Manual);
        void ExpirePoints(Member member, string notes, PointExpirationReason reason);
        decimal ExpirePoints(long[] vcKeys, DateTime? cutOffDate, DateTime expiryDate, PointExpirationReason reason, string notes);
        decimal ExpirePoints(VirtualCard vc, DateTime expiryDate, PointExpirationReason reason, string notes);
        int ExpireUnexpiredUncompletedBonus(long bonusId, DateTime newDate);
        int ExtendExpiredUncompletedBonus(long bonusId, DateTime newDate);
        void ExtendPointsExpirationDate(VirtualCard vc, DateTime expFrom, DateTime expTo, DateTime newExpiryDate);
        void ExtendPointsExpirationDate(Member member, DateTime from, DateTime to, DateTime newExpiryDate);
        string GenerateMemberResetCode(Member member, int expiryMinutes);
        PushSession GetActivePushSessions(long deviceId);
        List<AttributeSetMetaData> GetAllAttributeSets();
        List<AttributeSetMetaData> GetAllAttributeSets(long[] ids);
        List<AttributeSetMetaData> GetAllChangedAttributeSets(DateTime since);
        List<LWEvent> GetAllChangedLWEvents(DateTime since, bool userDefinedOnly);
        List<PointEvent> GetAllChangedPointEvents(DateTime since);
        List<PointType> GetAllChangedPointTypes(DateTime since);
        List<RuleTrigger> GetAllChangedRules(DateTime since);
        List<TierDef> GetAllChangedTierDefs(DateTime since);
        List<FulfillmentProvider> GetAllFulfillmentProviders();
        List<LWEvent> GetAllLWEvents(bool userDefinedOnly);
        List<MemberCoupon> GetAllMemberCoupons();
        List<long> GetAllMemberIds(LWCriterion criteria, LWQueryBatchInfo batchInfo);
        List<MemberBonus> GetAllMemberOffers();
        List<MemberPromotion> GetAllMemberPromotion();
        List<MemberReward> GetAllMemberRewards(LWQueryBatchInfo batchInfo);
        List<Member> GetAllMembers(long[] ipCodeList, bool loadVirtualCards);
        List<Member> GetAllMembers(LWCriterion criteria, LWQueryBatchInfo batchInfo);
        List<Member> GetAllMembersByVcKeys(long[] vcKeys);
        List<MemberTier> GetAllMemberTiers();
        List<MobileDevice> GetAllMobileDevices(LWQueryBatchInfo batchInfo);
        List<PointEvent> GetAllPointEvents();
        List<PointTransaction> GetAllPointTransactions();
        List<PointType> GetAllPointTypes();
        List<RuleTrigger> GetAllRules(long[] ids);
        List<RuleTrigger> GetAllRules();
        List<TierDef> GetAllTierDefs();
        List<AttributeSetMetaData> GetAllTopLevelAttributeSets();
        List<PointTransaction> GetAllUnexpiredPointTransactions(VirtualCard vc);
        List<Validator> GetAllValidators();
        List<ValidatorTrigger> GetAllValidatorTriggers();
        AttributeMetaData GetAttribute(long attCode);
        AttributeSetMetaData GetAttributeSetMetaData(long attributeSetCode);
        AttributeSetMetaData GetAttributeSetMetaData(string attributeSetName);
        List<string> GetAttributeSetNames();
        IClientDataObject GetAttributeSetObject(string attSetName, long key, bool deep, bool obtainLock = false);
        List<long> GetAttributeSetObjectIds(AttributeSetContainer[] owners, AttributeSetMetaData meta, LWCriterion criteria);
        List<IClientDataObject> GetAttributeSetObjects(IAttributeSetContainer owner, AttributeSetMetaData meta, string alias, string whereClause, string orderBy, LWQueryBatchInfo batchInfo, bool deep, bool obtainLock = false);
        List<IClientDataObject> GetAttributeSetObjects(IAttributeSetContainer owner, string attSetName, LWCriterion criteria, int limitNumber, bool obtainLock = false);
        List<IClientDataObject> GetAttributeSetObjects(IAttributeSetContainer owner, AttributeSetMetaData meta, LWCriterion criteria, LWQueryBatchInfo batchInfo, bool deep, bool obtainLock = false);
        List<IClientDataObject> GetAttributeSetObjects(string attSetName, long[] rowKeys, bool obtainLock = false);
        List<IClientDataObject> GetAttributeSetObjects(IAttributeSetContainer owner, string attSetName, LWCriterion criteria, LWQueryBatchInfo batchInfo, bool deep, bool obtainLock = false);
        List<IClientDataObject> GetAttributeSetObjects(AttributeSetContainer[] owners, AttributeSetMetaData meta, LWCriterion criteria, LWQueryBatchInfo batchInfo, bool deep, bool obtainLock = false);
        List<AttributeSetMetaData> GetAttributeSetsByType(AttributeSetType type);
        List<long> GetChangedAttributeSetObjectIds(AttributeSetMetaData meta, DateTime since);
        List<MemberCouponRedemption> GetCouponRedemptions(long memberCouponId);
        RewardChoice GetCurrentRewardChoice(long memberId);
        RewardDef GetCurrentRewardChoiceOrDefault(Member member);
        decimal GetEarnedPointBalance(IList<VirtualCard> vcList, IList<PointType> pointTypes, IList<PointEvent> pointEvents, DateTime? from, DateTime? to, bool includeExpiredPoints);
        decimal GetEarnedPointBalance(IList<VirtualCard> vcList, long[] pointTypes, long[] pointEvents, DateTime? from, DateTime? to, bool includeExpiredPoints);
        decimal GetExpiredPointBalance(IList<VirtualCard> vcList, IList<PointType> pointTypes, IList<PointEvent> pointEvents, PointBankTransactionType[] txnTypes, DateTime? from, DateTime? to, DateTime? awardDateFrom, DateTime? awardDateTo, string changedBy, string locationId, PointTransactionOwnerType? ownerType, long? ownerId, long[] rowkeys);
        decimal GetExpiredPointBalance(long[] vcKeys, long[] pointTypeIds, long[] pointEventIds, PointBankTransactionType[] txnTypes, DateTime? from, DateTime? to, DateTime? awardDateFrom, DateTime? awardDateTo, string changedBy, string locationId, PointTransactionOwnerType? ownerType, long? ownerId, long[] rowkeys);
        List<PointTransaction> GetExpiredPointTransactionsWithNoExpiredRecords(Member member, LWQueryBatchInfo batchInfo);
        FulfillmentProvider GetFulfillmentProvider(long id);
        FulfillmentProvider GetFulfillmentProvider(string name);
        MemberCouponRedemption GetLastCouponRedemption(long memberCouponId);
        MobileDevice GetLatestMobileDevice(Member member);
        LWEvent GetLWEvent(long lweventId);
        LWEvent GetLWEventByName(string lweventName);
        List<MemberBonus> GetMemberBonuses(long[] ids);
        List<MemberBonus> GetMemberBonusesByMember(long ipCode, LWQueryBatchInfo batchInfo);
        List<MemberBonus> GetMemberBonusesByMember(long ipCode, bool activeOnly, LWQueryBatchInfo batchInfo);
        List<MemberBonus> GetMemberBonusesByMember(long ipCode, IEnumerable<MemberBonusStatus> statuses, bool activeOnly, long? definitionId, LWQueryBatchInfo batchInfo);
        List<MemberBonus> GetMemberBonusesByMember(long ipCode, IEnumerable<MemberBonusStatus> statuses, bool activeOnly, LWQueryBatchInfo batchInfo);
        MemberCoupon GetMemberCoupon(long id);
        MemberCoupon GetMemberCouponByCertNmbr(string certNmbr);
        List<long> GetMemberCouponIds(Member member, DateTime? from, DateTime? to, bool unExpiredOnly);
        Page<MemberCoupon> GetMemberCoupons(long ipCode, ActiveCouponOptions options, long page, long resultsPerPage);
        List<MemberCoupon> GetMemberCoupons(long[] ids);
        IEnumerable<MemberCoupon> GetMemberCoupons(long memberId, long defId);
        [Obsolete]
        List<MemberCoupon> GetMemberCouponsByMember(long ipCode, LWQueryBatchInfo batchInfo = null, bool unRedeemedOnly = false, bool activeOnly = true, DateTime? from = null, DateTime? to = null);
        List<MemberCoupon> GetMemberCouponsByMemberByTypeCode(long ipCode, string typeCode, LWQueryBatchInfo batchInfo);
        MemberMessage GetMemberMessage(long id);
        [Obsolete("This method uses LWQueryBatchInfo in order to maintain backward compatibility with CDIS. It may be removed in a future LoyaltyWare version. Use the method that returns Page<MemberMessage> instead.")]
        List<MemberMessage> GetMemberMessages(long memberId, List<MemberMessageStatus> status, bool activeOnly, LWQueryBatchInfo batchInfo, DateTime? startDate, DateTime? endDate, MemberMessageOrder order = MemberMessageOrder.Newest);
        Page<MemberMessage> GetMemberMessages(long memberId, List<MemberMessageStatus> status, bool activeOnly, long pageNumber, long resultsPerPage, DateTime? startDate, DateTime? endDate, MemberMessageOrder order = MemberMessageOrder.Newest);
        List<MemberMessage> GetMemberMessages(long[] ids);
        List<MemberMessage> GetMemberMessages(long memberId, long defId, bool unexpiredOnly = false);
        List<MemberMessage> GetMemberMessagesByMember(long ipCode, LWQueryBatchInfo batchInfo);
        List<MemberMessage> GetMemberMessagesByMemberAndType(long ipCode, long defId);
        IEnumerable<MemberNextBestAction> GetMemberNextBestAction(long memberId, NextBestActionType actionType, long actionId);
        MemberNextBestAction GetMemberNextBestAction(long id);
        IEnumerable<MemberNextBestAction> GetMemberNextBestAction(long memberId, NextBestActionType actionType);
        MemberBonus GetMemberOffer(long id);
        MemberOrder GetMemberOrder(string orderNumber);
        List<MemberOrder> GetMemberOrders(string[] orderNumbers);
        List<MemberOrder> GetMemberOrdersByMember(long ipcode, LWQueryBatchInfo batchInfo);
        decimal GetMemberPointBalance(Member member, DateTime StartDate, DateTime EndDate);
        MemberPromotion GetMemberPromotion(long id);
        List<MemberPromotion> GetMemberPromotion(long memberId, string code);
        List<MemberPromotion> GetMemberPromotions(long[] ids);
        List<MemberPromotion> GetMemberPromotionsByMember(long ipCode, LWQueryBatchInfo batchInfo, bool unExpiredOnly = true);
        MemberReward GetMemberReward(long id);
        MemberReward GetMemberRewardByCert(string certNmbr);
        List<MemberReward> GetMemberRewardByIds(long[] ids);
        List<long> GetMemberRewardIds(Member member, long[] rewardDefIds, long[] excludeRewardDefIds, DateTime? from, DateTime? to, DateTime? redeemedFrom, DateTime? redeemedTo, bool? redeemed, bool? expired);
        List<long> GetMemberRewardIds(Member member, long? categoryId, DateTime? from, DateTime? to, DateTime? changedSince, bool unRedeemedOnly, bool unExpiredOnly);
        List<MemberReward> GetMemberRewards(Member member, LWQueryBatchInfo batchInfo);
        List<MemberReward> GetMemberRewardsByDefId(Member member, long rewardDefId);
        List<MemberReward> GetMemberRewardsByFPOrderNumber(string orderNumber);
        List<MemberReward> GetMemberRewardsByOrderNumber(string orderNumber);
        List<long> GetMembersBasedOnPointBalance(PointBalanceType type, long balance, LWCriterion.Predicate predicate, long[] pointTypes, long[] pointEvents, DateTime? startDate, DateTime? endDate, LWQueryBatchInfo batchInfo);
        List<Member> GetMembersByName(string firstName, string lastName, string middleName, LWQueryBatchInfo batchInfo);
        List<Member> GetMembersByPhoneNumber(string phoneNumber, LWQueryBatchInfo batchInfo);
        List<Member> GetMembersByPostalCode(string postalCode, LWQueryBatchInfo batchInfo);
        List<MemberSocNet> GetMemberSocNets(SocialNetworkProviderType providerType, string[] providerUIDs);
        List<MemberSocNet> GetMemberSocNets(long ipCode);
        MemberStore GetMemberStore(long id);
        List<MemberStore> GetMemberStoresByMember(long ipCode);
        List<long> GetMembersWithExpiredPoints(LWQueryBatchInfo batchInfo);
        MemberTier GetMemberTier(long id);
        MemberTier GetMemberTier(Member member, DateTime date);
        List<MemberTier> GetMemberTiers(Member member);
        MobileDevice GetMobileDevice(long id);
        MobileDevice GetMobileDeviceByDeviceId(string id);
        List<MobileDevice> GetMobileDevices(Member member, LWQueryBatchInfo batchInfo);
        MTouch GetMTouch(long mtouchId);
        MTouch GetMTouch(string mtouch);
        List<MTouch> GetMTouchByObjectType(MTouchType type, bool onlyAvailable);
        int GetMTouchCount(MTouchType type, string secondaryId);
        List<long> GetMTouchIDs(MTouchType type, bool onlyAvailable, string secondaryID);
        int GetMTouchUsageCount(MTouch mTouch);
        NextBestAction GetNextBestAction(long memberId, int priority);
        IEnumerable<NextBestAction> GetNextBestActions(long memberId, int? startIndex = null, int? batchSize = null);
        long? GetNextMTouchId(MTouchType mtouchType, string entityId);
        List<PointTransaction> GetOnHoldPointTransactions(IList<VirtualCard> vcList, IList<PointType> pointTypes, IList<PointEvent> pointEvents, DateTime? from, DateTime? to, long[] parentIds, PointTransactionOwnerType? ownerType, long? ownerId, long? rowkey);
        Dictionary<string, string> GetPasswordResetOptions(Member member, string emailName, string smsName);
        decimal GetPointBalance(long[] vcKeys, long[] pointTypeIds, long[] pointEventIds, PointBankTransactionType[] txnTypes, DateTime? from, DateTime? to, DateTime? awardDateFrom, DateTime? awardDateTo, string changedBy, string locationId, PointTransactionOwnerType? ownerType, long? ownerId, long[] rowkeys, bool includeExpiredPoints = false);
        decimal GetPointBalanceExcludingPointTypes(VirtualCard vc, DateTime? FromDate, DateTime? ToDate, long[] excludePointTypes);
        PointEvent GetPointEvent(string pointEventName);
        PointEvent GetPointEvent(long pointEventId);
        List<PointEvent> GetPointEvents(string[] names);
        decimal GetPointsConsumed(long[] vcKeys, long[] pointTypeIds, long[] pointEventIds, DateTime? from, DateTime? to, string changedBy, string locationId, PointTransactionOwnerType? ownerType, long? ownerId, long[] rowkeys);
        decimal GetPointsOnHold(IList<VirtualCard> vcList, IList<PointType> pointTypes, IList<PointEvent> pointEvents, DateTime? from, DateTime? to);
        PointTransaction GetPointTransaction(long txnId);
        List<PointTransaction> GetPointTransactions(VirtualCard vc, DateTime? from, DateTime? to, string promoCode, string exclusionList, bool includeExpired);
        List<PointTransaction> GetPointTransactions(VirtualCard vc, DateTime? from, DateTime? to, string promoCode, string exclusionList, bool orderDateDescending, bool includeExpired);
        List<PointTransaction> GetPointTransactions(Member member, DateTime? from, DateTime? to, string promoCode, string exclusionList, int? startIndex, int? batchSize, bool includeExpired);
        List<PointTransaction> GetPointTransactionsByOwner(long[] vckeys, PointBankTransactionType[] txnTypes, PointTransactionOwnerType? ownerType, long? ownerId, long[] rowkeys, bool includeExpired);
        List<PointTransaction> GetPointTransactionsByParents(long[] vcKeys, long[] txnIds, PointBankTransactionType? txnType);
        List<PointTransaction> GetPointTransactionsByPointTypePointEvent(Member member, DateTime? from, DateTime? to, PointBankTransactionType[] txnTypes, long[] pointTypeIds, long[] pointEventIds, PointTransactionOwnerType? ownerType, long? ownerId, long[] rowkeys, bool includeExpired, LWQueryBatchInfo batchInfo);
        List<PointTransaction> GetPointTransactionsByPointTypePointEvent(long[] vcKeys, DateTime? from, DateTime? to, PointBankTransactionType[] txnTypes, long[] pointTypeIds, long[] pointEventIds, PointTransactionOwnerType? ownerType, long? ownerId, long[] rowkeys, bool includeExpired, LWQueryBatchInfo batchInfo);
        PointType GetPointType(string pointTypeName);
        PointType GetPointType(long pointTypeId);
        List<PointType> GetPointTypes(string[] names);
        Promotion GetPromotionByCode(string code);
        PushSession GetPushSession(long id);
        List<PushSession> GetPushSessionsByDevice(long deviceId, LWQueryBatchInfo batchInfo);
        Page<RewardChoice> GetRewardChoiceHistory(long memberId, long page, long resultsPerPage);
        List<RuleTrigger> GetRuleByAttributeSetCode(long attSetCode);
        RuleTrigger GetRuleById(long id);
        RuleTrigger GetRuleByName(string rulename);
        List<RuleTrigger> GetRuleByObjectName(string objectName);
        IList<RuleTrigger> GetRuleByPromotion(string promoCode);
        List<RuleExecutionLog> GetRuleExecutionLogs(long memberId, RuleExecutionStatus? status, PointTransactionOwnerType? ownerType, long? ownerId, long[] rowkeys, DateTime? fromDate, DateTime? toDate);
        MemberSocNet GetSocNetForMember(SocialNetworkProviderType providerType, long ipCode, string providerUID = null);
        List<MemberSocNet> GetSocNetsForMember(long ipCode);
        string GetSocNetUIDForMember(SocialNetworkProviderType providerType, Member member);
        TierDef GetTierDef(string tierName);
        TierDef GetTierDef(long tierId);
        decimal GetTotalPointsAwarded(long[] pointTypes, long[] pointEvents, DateTime? from, DateTime? to, bool includeExpiredPoints);
        List<PointTransaction> GetTransactionsNotConsumed(VirtualCard vc, PointBankTransactionType txnType);
        List<PointTransaction> GetTransactionsNotConsumed(VirtualCard vc, PointType pt, PointEvent pe, PointBankTransactionType txnType);
        List<PointTransaction> GetTransactionsNotConsumed(VirtualCard vc, PointType pt, PointBankTransactionType txnType);
        List<PointTransaction> GetTransactionsNotConsumed(VirtualCard vc, PointEvent pe, PointBankTransactionType txnType);
        List<PointTransaction> GetTransactionsNotConsumed(long[] vcs, long[] pts, long[] pes, PointBankTransactionType txnType);
        TriggerUserEventLog GetTriggerUserEventLog(long id);
        List<long> GetTriggerUserEventLogIds(long memberId, string sortExpression, bool ascending);
        Validator GetValidator(string name);
        Validator GetValidator(long validatorId);
        List<Validator> GetValidators(long[] ids);
        ValidatorTrigger GetValidatorTrigger(long id);
        ValidatorTrigger GetValidatorTrigger(long validatorId, long attributeCode);
        List<ValidatorTrigger> GetValidatorTriggers(long attributeCode);
        List<ValidatorTrigger> GetValidatorTriggersByAttributes(long[] ids);
        void HoldAllPoints(Member member, DateTime transactionDate, string notes);
        void HoldAllPoints(VirtualCard vc, DateTime transactionDate, string notes);
        void HoldPoints(Member member, PointType pt, PointEvent pe, decimal points, DateTime transactionDate, PointTransactionOwnerType ownerType, long ownerId, long rowKey, string notes, string locationId, string changedBy);
        void HoldPoints(VirtualCard vc, PointType pt, PointEvent pe, decimal points, DateTime transactionDate, PointTransactionOwnerType ownerType, long ownerId, long rowKey, string notes, string locationId, string changedBy);
        long HowManyActiveMemberBonuses(long memberId);
        long HowManyActiveMemberCoupons(long memberId);
        long HowManyActiveMemberMessages(long memberId);
        long HowManyActivePushSessions(long deviceId);
        long HowManyActiveUnreadMessages(long memberId);
        long HowManyCompletedBonusesByType(long defId);
        long HowManyCompletedBonusesByType(long memberId, long defId);
        long HowManyCompletedBonusReferrals(long defId);
        long HowManyExpiredAndUncompletedBonuses(long defId);
        long HowManyMemberBonusesByType(long memberId, long defId);
        long HowManyMemberCouponsByType(long memberId, long defId);
        long HowManyMemberPromotions(long ipCode);
        long HowManyMemberRewards(long ipcode, DateTime startDate, DateTime endDate);
        long HowManyMembersInPromotion(string code);
        long HowManyMobileDevices(long ipcode, DateTime startDate, DateTime endDate);
        long HowManyPointTransactions(Member member, long[] pointTypeIds, long[] pointEventIds, DateTime? startDate, DateTime? endDate, bool includeExpired);
        long HowManyPointTransactions(long[] vcKeys, long[] pointTypeIds, long[] pointEventIds, DateTime? startDate, DateTime? endDate, bool includeExpired);
        long HowManyPushSessions(long deviceId);
        long HowManyUnexpiredAndUncompletedBonuses(long defId);
        bool IsAttributeSetTableCreated(long attSetCode);
        bool IsAttributeSetTableEmpty(long attSetCode);
        bool IsMemberEnrolledInPromotion(string code, long memberId);
        bool IsMemberInPromotionList(string code, long memberId);
        bool IsMemberInPromotionList(long memberId);
        bool IsMemberInTier(Member member, string tierName);
        bool IsMemberInTier(Member member, string tierName, DateTime date);
        bool IsValidatorInUse(long validatorId);
        void LoadAttributeSetList(IAttributeSetContainer owner, bool deep);
        void LoadAttributeSetList(IAttributeSetContainer owner, string attSetName, bool deep);
        void LoadAttributeSetList(IAttributeSetContainer owner, AttributeSetMetaData meta, bool deep);
        Member LoadFromCertificateNumber(string certificateNumber);
        Member LoadMemberFromAlternateID(string alternateID);
        Member LoadMemberFromEmailAddress(string emailAddress);
        Member LoadMemberFromIdentity(AuthenticationFields identityType, string identity);
        Member LoadMemberFromIPCode(long ipcode);
        Member LoadMemberFromLoyaltyID(string loyaltyId);
        Member LoadMemberFromResetCode(string resetCode);
        Member LoadMemberFromSocNet(SocialNetworkProviderType providerType, string providerUID);
        Member LoadMemberFromUserName(string userName);
        Member LoginMember(AuthenticationFields identityType, string identity, string password, string resetCode, ref LoginStatusEnum loginStatus, bool unlockAccount = false);
        Member LoginMember(MemberSocNet socNet, ref LoginStatusEnum loginStatus);
        string MaskEmail(string email);
        string MaskPhoneNumber(string phone);
        Member MergeMember(Member from, Member to, PointEvent pe, PointType pt, DateTime expDate, MemberMergeOptions options);
        void ReleaseAllPoints(long[] vcKeys);
        void ReleasePointsOnHold(long[] vcKeys, PointTransactionOwnerType? ownerType, long? ownerId, long? rowKey);
        long ReplaceVirtualCard(Member m, long vcKey, string newLoyaltyId, DateTime effectiveDate, bool transferPoints, string replacementReason);
        List<PointsSummary> RetrievePointsSummariesByMember(long memberId, string[] pointEvents, string[] pointTypes);
        List<PointsSummary> RetrievePointsSummariesByMember(long memberId);
        PointsSummary RetrievePointsSummariesByMember(long memberId, string pointEvent, string pointType);
        PointsSummary RetrievePointsSummary(long id);
        IClientDataObject SaveAttributeSetObject(IClientDataObject cobj, List<ContextObject.RuleResult> results = null, RuleExecutionMode mode = RuleExecutionMode.Real, bool skipRules = false);
        IClientDataObject SaveClientDataObject(IClientDataObject cobj, List<ContextObject.RuleResult> results, RuleExecutionMode mode, bool skipRules = false);
        void SaveMember(Member member, List<ContextObject.RuleResult> results = null, RuleExecutionMode mode = RuleExecutionMode.Real, bool skipRules = false);
        void SaveMembers(IEnumerable<Member> members);
        void SaveMemberStore(MemberStore store);
        void SaveMemberStores(IEnumerable<MemberStore> stores);
        void SetMemberRewardChoice(long memberId, long rewardId, string changedBy = null, DateTime? changeDate = null);
        void SetMemberRewardChoice(Member member, long rewardId, string changedBy = null, DateTime? changeDate = null);
        long TransferVirtualCard(VirtualCard fromCard, Member toMember, bool makeCardPrimary, bool cancelMembership);
        void UpdateAttribute(AttributeMetaData att);
        void UpdateAttributeSet(AttributeSetMetaData attSet);
        void UpdateLWEvent(LWEvent lwevent);
        void UpdateMemberCoupon(MemberCoupon coupon);
        void UpdateMemberCouponRedemption(MemberCouponRedemption redemption);
        void UpdateMemberMessage(MemberMessage message);
        void UpdateMemberNextBestAction(MemberNextBestAction nba);
        void UpdateMemberOffer(MemberBonus offer);
        void UpdateMemberOrder(MemberOrder order);
        void UpdateMemberReward(MemberReward reward);
        void UpdateMemberSocNet(MemberSocNet socNet);
        void UpdateMemberTier(MemberTier tier);
        void UpdateMobileDevice(MobileDevice device);
        void UpdateNextBestAction(NextBestAction nba);
        void UpdateNextBestActions(IEnumerable<NextBestAction> nbas);
        void UpdatePointEvent(PointEvent pe);
        void UpdatePointsSummary(PointsSummary summary);
        void UpdatePointTransaction(PointTransaction txn);
        void UpdatePointTransactions(List<PointTransaction> txnList);
        void UpdatePointType(PointType pt);
        void UpdatePushSession(PushSession session);
        void UpdateRuleTrigger(RuleTrigger rt);
        void UpdateTierDef(TierDef tier);
        void UpdateValidator(Validator validator);
        void UpdateValidatorTrigger(ValidatorTrigger vt);
    }
}
