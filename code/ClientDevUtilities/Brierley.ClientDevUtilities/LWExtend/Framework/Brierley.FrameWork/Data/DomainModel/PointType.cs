using Brierley.FrameWork.Data.ModelAttributes;
using System;

namespace Brierley.FrameWork.Data.DomainModel
{
	/// <summary>
	/// POCO for PointType. This class is autogenerated
	/// </summary>
	[Serializable]
	[PetaPoco.ExplicitColumns]
	[PetaPoco.PrimaryKey("PointTypeID", sequenceName = "hibernate_sequence")]
	[PetaPoco.TableName("LW_PointType")]
    [AuditLog(true)]
	public class PointType : LWCoreObjectBase
	{
		/// <summary>
		/// Gets or sets the ID for the current PointType
		/// </summary>
		[PetaPoco.Column("PointTypeID", IsNullable = false)]
		public Int64 ID { get; set; }

		/// <summary>
		/// Gets or sets the Name for the current PointType
		/// </summary>
        [PetaPoco.Column(Length = 150, IsNullable = false)]
        [UniqueIndex(RequiresLowerFunction = false)]
        public String Name { get; set; }

		/// <summary>
		/// Gets or sets the Description for the current PointType
		/// </summary>
        [PetaPoco.Column(Length = 150)]
		public String Description { get; set; }

		/// <summary>
		/// Gets or sets the MoneyBacked for the current PointType
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public Boolean MoneyBacked { get; set; }

		/// <summary>
		/// Gets or sets the ConsumptionPriority for the current PointType
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public Int64 ConsumptionPriority { get; set; }


		/// <summary>
		/// Initializes a new instance of the PointType class
		/// </summary>
		public PointType()
		{
		}

		public PointType Clone()
		{
			return Clone(new PointType());
		}

		public PointType Clone(PointType other)
		{
			other.Name = Name;
			other.Description = Description;
			other.MoneyBacked = MoneyBacked;
			other.ConsumptionPriority = ConsumptionPriority;
			return (PointType)base.Clone(other);
		}

		public override LWObjectAuditLogBase GetArchiveObject()
		{
			PointType_AL ar = new PointType_AL()
			{
				ObjectId = this.ID,
				Name = this.Name,
				Description = this.Description,
				ConsumptionPriority = this.ConsumptionPriority,
				MoneyBacked = this.MoneyBacked,
				CreateDate = this.CreateDate,
				UpdateDate = this.UpdateDate
			};
			return ar;
		}
	}
}