using System;
using System.ComponentModel;
using System.Collections.Generic;

using Brierley.FrameWork.Common;
using Brierley.FrameWork.Common.Exceptions;
using Brierley.FrameWork.Common.Logging;
using Brierley.FrameWork.Data.ModelAttributes;

namespace Brierley.FrameWork.Data.DomainModel
{
	/// <summary>
	/// POCO for VirtualCard. This class is autogenerated
	/// </summary>
	[Serializable]
	[PetaPoco.ExplicitColumns]
	[PetaPoco.PrimaryKey("VcKey", sequenceName = "SEQ_VIRTUALCARD")]
	[PetaPoco.TableName("LW_VirtualCard")]
    [AuditLog(false)]
	public class VirtualCard : AttributeSetContainer
	{
		private string _loyaltyIdNumber;
		private long _ipCode;
		private long? _linkKey;
		private DateTime _dateIssued = DateTime.Now;
		private DateTime _dateRegistered = DateTime.Now;
		private string _statusChangeReason;
		private bool _isPrimary;
		private long _cardType = -1; // card type is not used by the framework.  It is for client specific tagging of a card.
		private string _changedBy = string.Empty;

		//todo: make these properties internal once NHibernate is gone
		[PetaPoco.Column("ExpirationDate")]
		public DateTime? _expirationDate { get; set; }
		[PetaPoco.Column("Status", IsNullable = false)]
		public VirtualCardStatusType _status { get; set; }
		[PetaPoco.Column("NewStatus")]
		public VirtualCardStatusType? _newStatus { get; set; }
		[PetaPoco.Column("NewStatusEffectiveDate")]
		public DateTime? _newStatusEffectiveDate { get; set; }


		/// <summary>
		/// Initializes a new instance of the VirtualCard class
		/// </summary>
		public VirtualCard()
		{
			_status = VirtualCardStatusType.Active;
		}

		public VirtualCard(DateTime expDate)
		{
			this._expirationDate = expDate;
		}

		/// <summary>
		/// Gets or sets the VcKey for the current VirtualCard
		/// </summary>        
		[PetaPoco.Column(IsNullable = false)]
		public long VcKey
		{
			get { return MyKey; }
			set { MyKey = value; IsDirty = true; }
		}

		/// <summary>
		/// Gets or sets the LoyaltyIdNumber for the current VirtualCard
		/// </summary>
		[Browsable(true)]
        [PetaPoco.Column(Length = 255, IsNullable = false)]
        [UniqueIndex]
		public string LoyaltyIdNumber
		{
			get { return this._loyaltyIdNumber; }
			set { this._loyaltyIdNumber = value; IsDirty = true; }
		}

		/// <summary>
		/// Gets or sets the IpCode for the current VirtualCard
		/// </summary>        
        [PetaPoco.Column(IsNullable = false)]
        [ColumnIndex]
        public long IpCode
        {
            get { return this._ipCode; }
            set { this._ipCode = value; IsDirty = true; }
        }

		/// <summary>
		/// Gets or sets the LinkKey for the current VirtualCard
		/// </summary>        
		[PetaPoco.Column]
		public long? LinkKey
		{
			get { return this._linkKey; }
			set { this._linkKey = value; IsDirty = true; }
		}

		/// <summary>
		/// Gets or sets the DateIssued for the current VirtualCard
		/// </summary>
		[Browsable(true)]
		[PetaPoco.Column(IsNullable = false)]
		public DateTime DateIssued
		{
			get { return this._dateIssued; }
			set { this._dateIssued = value; IsDirty = true; }
		}

		/// <summary>
		/// Gets or sets the DateRegistered for the current VirtualCard
		/// </summary>
		[Browsable(true)]
		[PetaPoco.Column(IsNullable = false)]
		public DateTime DateRegistered
		{
			get { return this._dateRegistered; }
			set { this._dateRegistered = value; IsDirty = true; }
		}

		public DateTime? ExpirationDate
		{
			get { return this._expirationDate; }
			set
			{
				if (value <= DateTime.Now)
				{
					throw new LWException("Invalid expiration date for renewing card.  New expiration date should be in future.") { ErrorCode = 3223 };
				}

				VirtualCardStatusType currentStatus = Status;
				if (currentStatus != VirtualCardStatusType.Expired && currentStatus != VirtualCardStatusType.Active)
				    throw new LWException("Invalid card status for changing expiration date.") { ErrorCode = 3224 };
                
				this._expirationDate = value;
				this._status = DateTimeUtil.LessEqual((DateTime)this._expirationDate, DateTime.Now) ? VirtualCardStatusType.Expired : VirtualCardStatusType.Active;
				IsDirty = true;
			}
		}

		/// <summary>
		/// Gets or sets the Status for the current VirtualCard
		/// </summary>
		[Browsable(true)]
		public VirtualCardStatusType Status
		{
			get
			{
				if (this._status == VirtualCardStatusType.Expired || (_expirationDate != null && DateTimeUtil.LessEqual(_expirationDate.Value, DateTime.Now)))
				{
					// the card has expired.
					//expirationDate = null;
					_status = VirtualCardStatusType.Expired;
					IsDirty = true;
				}
				else if (_newStatus != null && DateTimeUtil.LessEqual((DateTime)_newStatusEffectiveDate, DateTime.Now))
				{
					_status = (VirtualCardStatusType)_newStatus;
					_newStatus = null;
					_newStatusEffectiveDate = null;
					IsDirty = true;
				}
				return this._status;
			}
		}

		/// <summary>
		/// Gets or sets the NewStatus for the current VirtualCard
		/// </summary>
		[Browsable(true)]
		public VirtualCardStatusType? NewStatus
		{
			set
			{
				if (Status != VirtualCardStatusType.Expired)
				{
					this._newStatus = value; IsDirty = true;
				}
				else
				{
					// cannot change the status of an expired card
					throw new LWException("Loyalty card is expired.  Its status cannot be changed.") { ErrorCode = 3217 };
				}
			}
		}

		/// <summary>
		/// Gets or sets the StatusEffectiveDate for the current VirtualCard
		/// </summary>
		[Browsable(true)]
		public DateTime? NewStatusEffectiveDate
		{
			set { this._newStatusEffectiveDate = value; IsDirty = true; }
		}

		/// <summary>
		/// Gets or sets the StatusChangeReason for the current VirtualCard
		/// </summary>
		[Browsable(true)]
        [PetaPoco.Column(Length = 255)]
		public string StatusChangeReason
		{
			get { return this._statusChangeReason; }
			set { this._statusChangeReason = value; IsDirty = true; }
		}

		/// <summary>
		/// Gets or sets the IsPrimary for the current VirtualCard
		/// </summary>
		[Browsable(true)]
		[PetaPoco.Column(IsNullable = false)]
		public bool IsPrimary
		{
			get { return this._isPrimary; }
			set { this._isPrimary = value; IsDirty = true; }
		}

		// <summary>
		// Gets or sets the CardType for the current VirtualCard
		// </summary>
		[Browsable(true)]
		[PetaPoco.Column(IsNullable = false)]
		public long CardType
		{
			get { return this._cardType; }
			set { this._cardType = value; IsDirty = true; }
		}

		/// <summary>
		/// Gets or sets the ChangedBy for the current VirtualCard
		/// </summary>
		[Browsable(true)]
        [PetaPoco.Column(Length = 25)]
		public string ChangedBy
		{
			get { return this._changedBy; }
			set { this._changedBy = value; IsDirty = true; }
		}

		public Member Member { get; set; }


		//todo: this seems wrong - a cancelled or replaced card is considered valid?
		public bool IsValid()
		{
			VirtualCardStatusType currentStatus = Status;
			return currentStatus != VirtualCardStatusType.Expired && currentStatus != VirtualCardStatusType.InActive;
		}

		public override LWObjectAuditLogBase GetArchiveObject()
		{
			VirtualCard_AL ar = new VirtualCard_AL()
			{
				ObjectId = this.VcKey,
				LoyaltyIdNumber = this.LoyaltyIdNumber,
				IpCode = this.IpCode,
				LinkKey = this.LinkKey,
				DateIssued = this.DateIssued,
				DateRegistered = this.DateRegistered,
				ExpirationDate = this.ExpirationDate,
				Status = this.Status,
				NewStatus = this._newStatus,
				NewStatusEffectiveDate = this._newStatusEffectiveDate,
				StatusChangeReason = this.StatusChangeReason,
				IsPrimary = this.IsPrimary,
				CardType = this.CardType,
				ChangedBy = this.ChangedBy,
				CreateDate = this.CreateDate,
				UpdateDate = this.UpdateDate
			};
			return ar;
		}
	}
}
