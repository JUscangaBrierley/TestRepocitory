using Brierley.FrameWork.Data.ModelAttributes;
using System;

namespace Brierley.FrameWork.Data.DomainModel
{
	/// <summary>
	/// POCO for ProductImage. This class is autogenerated
	/// </summary>
	[Serializable]
	[PetaPoco.ExplicitColumns]
	[PetaPoco.PrimaryKey("ID", sequenceName = "hibernate_sequence")]
	[PetaPoco.TableName("LW_ProductImage")]
    [AuditLog(true)]
	public class ProductImage : LWCoreObjectBase
	{
		/// <summary>
		/// Gets or sets the ID for the current ProductImage
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public long ID { get; set; }

		/// <summary>
		/// Gets or sets the ProductId for the current ProductImage
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
        [ForeignKey(typeof(Product), "Id")]
        public long ProductId { get; set; }

		/// <summary>
		/// Gets or sets the Image for the current ProductImage
		/// </summary>
		[PetaPoco.Column("ProductImage", Length = 255, IsNullable = false)]
		public string Image { get; set; }

		/// <summary>
		/// Gets or sets the Order for the current ProductImage
		/// </summary>
        [PetaPoco.Column(IsNullable = false)]
		public long ImageOrder { get; set; }

		/// <summary>
		/// Initializes a new instance of the ProductImage class
		/// </summary>
		public ProductImage()
		{
		}

		/// <summary>
		/// Initializes a new instance of the ProductImage class
		/// </summary>
		/// <param name="productId">Initial <see cref="ProductImage.ProductId" /> value</param>
		/// <param name="image">Initial <see cref="ProductImage.Image" /> value</param>
		/// <param name="imageOrder">Initial <see cref="ProductImage.Order" /> value</param>
		public ProductImage(long productId, string image, long imageOrder)
		{
			this.ProductId = productId;
			this.Image = image;
			this.ImageOrder = imageOrder;
		}

		/// <summary>
		/// Minimal constructor for class ProductImage
		/// </summary>
		/// <param name="productId">Initial <see cref="ProductImage.ProductId" /> value</param>
		public ProductImage(long productId)
		{
			this.ProductId = productId;
		}

		public ProductImage Clone()
		{
			return Clone(new ProductImage());
		}

		public ProductImage Clone(ProductImage dest)
		{
			dest.ProductId = ProductId;
			dest.Image = Image;
			dest.ImageOrder = ImageOrder;

			return dest;
		}

		public override LWObjectAuditLogBase GetArchiveObject()
		{
			ProductImage_AL ar = new ProductImage_AL()
			{
				ObjectId = this.ID,
				ProductId = this.ProductId,
				Image = this.Image,
				ImageOrder = this.ImageOrder,
				CreateDate = this.CreateDate,
				UpdateDate = this.UpdateDate
			};
			return ar;
		}
	}
}