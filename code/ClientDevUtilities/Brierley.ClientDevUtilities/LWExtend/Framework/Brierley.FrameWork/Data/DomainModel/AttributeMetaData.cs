using System;

using Brierley.FrameWork.Common;
using Brierley.FrameWork.Data.ModelAttributes;

namespace Brierley.FrameWork.Data.DomainModel
{
	/// <summary>
	/// POCO for Attribute. This class is autogenerated
	/// </summary>
	[Serializable]
	[PetaPoco.ExplicitColumns]
	[PetaPoco.PrimaryKey("AttributeCode", sequenceName = "hibernate_sequence")]
	[PetaPoco.TableName("LW_Attribute")]
    [AuditLog(true)]
	public class AttributeMetaData : LWCoreObjectBase
	{
		/// <summary>
		/// Gets or sets the ID for the current Attribute
		/// </summary>
		[PetaPoco.Column("AttributeCode", IsNullable = false)]
		public long ID { get; set; }

		/// <summary>
		/// Gets or sets the Status for the current Attribute
		/// </summary>
		[PetaPoco.Column("StatusCode", IsNullable = false)]
		public long Status { get; set; }

		/// <summary>
		/// Gets or sets the Name for the current Attribute
		/// </summary>
		[PetaPoco.Column("AttributeName", Length = 50, IsNullable = false)]
		public string Name { get; set; }

		/// <summary>
		/// Gets or sets the DataType for the current Attribute
		/// </summary>
		[PetaPoco.Column("DataTypeCode", Length = 20, IsNullable = false)]
		public string DataType { get; set; }

		/// <summary>
		/// Gets or sets the AttributeSetCode for the current Attribute
		/// </summary>
		[PetaPoco.Column(IsNullable = false)]
        [ForeignKey(typeof(AttributeSetMetaData), "ID")]
		public long AttributeSetCode { get; set; }

		/// <summary>
		/// Gets or sets the IsRequired for the current Attribute
		/// </summary>
		[PetaPoco.Column(IsNullable = false)]
		public bool IsRequired { get; set; }

		/// <summary>
		/// Gets or sets the MinLength for the current Attribute
		/// </summary>
		[PetaPoco.Column(IsNullable = false)]
		public long MinLength { get; set; }

		/// <summary>
		/// Gets or sets the MaxLength for the current Attribute
		/// </summary>
		[PetaPoco.Column(IsNullable = false)]
        public long MaxLength { get; set; }

		/// <summary>
		/// Gets or sets the IsUnique for the current Attribute
		/// </summary>
		[PetaPoco.Column(IsNullable = false)]
		public bool IsUnique { get; set; }

		/// <summary>
		/// Gets or sets the EncryptionType for the current Attribute
		/// </summary>
		[PetaPoco.Column(Length = 255, PersistEnumAsString = true, IsNullable = false)]
		public AttributeEncryptionType EncryptionType { get; set; }

		/// <summary>
		/// Gets or sets the VisibleInGrid for the current Attribute
		/// </summary>
		[PetaPoco.Column(IsNullable = false)]
		public bool VisibleInGrid { get; set; }

		/// <summary>
		/// Gets or sets the CanBeUpdated for the current Attribute
		/// </summary>
		[PetaPoco.Column(IsNullable = false)]
		public bool CanBeUpdated { get; set; }

		/// <summary>
		/// Gets or sets the IsSortable for the current Attribute
		/// </summary>
		[PetaPoco.Column(IsNullable = false)]
		public bool IsSortable { get; set; }

		[PetaPoco.Column(IsNullable = false)]
		public bool IsMigrationText { get; set; }

		/// <summary>
		/// Gets or sets the DefaultValues for the current Attribute
		/// </summary>
		[PetaPoco.Column(Length = 1024)]
		public string DefaultValues { get; set; }

		/// <summary>
		/// Gets or sets the DisplayText for the current Attribute
		/// </summary>
		[PetaPoco.Column(Length = 50)]
		public string DisplayText { get; set; }

		[PetaPoco.Column(Length = 255)]
		public string Description { get; set; }

        [PetaPoco.Column(Length = 50)]
        public string Alias { get; set; }

		/// <summary>
		/// Initializes a new instance of the Attribute class
		/// </summary>
		public AttributeMetaData()
		{
			EncryptionType = AttributeEncryptionType.None;
		}

		public override LWObjectAuditLogBase GetArchiveObject()
		{
			AttributeMetaData_AL ar = new AttributeMetaData_AL()
			{
				ObjectId = this.ID,
				Status = this.Status,
				Name = this.Name,
				DataType = this.DataType,
				AttributeSetCode = this.AttributeSetCode,
				IsRequired = this.IsRequired,
				MinLength = this.MinLength,
				MaxLength = this.MaxLength,
				IsUnique = this.IsUnique,
				EncryptionType = this.EncryptionType,
				VisibleInGrid = this.VisibleInGrid,
				CanBeUpdated = this.CanBeUpdated,
				IsSortable = this.IsSortable,
				DisplayText = this.DisplayText,
                Alias = this.Alias,
				IsMigrationText = this.IsMigrationText,
				Description = this.Description,
				DefaultValues = this.DefaultValues,
				CreateDate = this.CreateDate,
				UpdateDate = this.UpdateDate
			};
			return ar;
		}

		public AttributeMetaData Clone()
		{
			return Clone(new AttributeMetaData());
		}

		public AttributeMetaData Clone(AttributeMetaData dest)
		{
			dest.Name = Name;
			dest.Status = Status;
			dest.DataType = DataType;
			dest.AttributeSetCode = AttributeSetCode;
			dest.IsRequired = IsRequired;
			dest.MinLength = MinLength;
			dest.MaxLength = MaxLength;
			dest.IsUnique = IsUnique;
			dest.EncryptionType = EncryptionType;
			dest.VisibleInGrid = VisibleInGrid;
			dest.CanBeUpdated = CanBeUpdated;
			dest.IsSortable = IsSortable;
			dest.IsMigrationText = IsMigrationText;
			dest.DefaultValues = DefaultValues;
			dest.DisplayText = DisplayText;
			dest.Description = Description;
            dest.Alias = Alias;
			return (AttributeMetaData)base.Clone(dest);
		}
	}
}