using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using Brierley.FrameWork;
using Brierley.FrameWork.Common;
using Brierley.FrameWork.Common.Exceptions;
using Brierley.FrameWork.Common.Logging;
using Brierley.FrameWork.Data.DomainModel;

using Brierley.FrameWork.LWIntegration.Util;
using Brierley.FrameWork.Interfaces;

using Brierley.LoyaltyWare.LWMobileGateway.DomainModel;
using Brierley.LoyaltyWare.LWMobileGateway.Authentication;

namespace Brierley.LoyaltyWare.LWMobileGateway.OperationProviders.Members
{
	public class AddLoyaltyCard : OperationProviderBase
	{
		private const string _className = "AddLoyaltyCard";
		private LWLogger _logger = LWLoggerManager.GetLogger(LWConstants.LW_MOBILEGATEWAY_SERVICE);

		public AddLoyaltyCard() : base("AddLoyaltyCard") { }

		public override object Invoke(string source, WcfAuthenticationToken token, object[] parms)
		{
			string methodName = "Invoke";

			if (parms == null || parms.Length == 0)
			{
				string errMsg = "No loyalty card provided .";
				_logger.Error(_className, methodName, errMsg);
				throw new LWOperationInvocationException(errMsg) { ErrorCode = 1 };
			}

            Member member = token.CachedMember;

			MGLoyaltyCard card = (MGLoyaltyCard)parms[0];

            string modeStr = (string)parms[1];
            RuleExecutionMode mode = RuleExecutionMode.Real;
            if (!string.IsNullOrEmpty(modeStr))
            {
                modeStr = modeStr.ToLower();
                if (modeStr != "real" && modeStr != "simulation")
                {
                    string err = string.Format("Invalid execution mode {0} specified.  Valid values are real or simulation", modeStr);
                    throw new LWIntegrationException(err) { ErrorCode = 3231 };
                }
                if (modeStr == "simulation")
                {
                    mode = RuleExecutionMode.Simulation;
                }
            }
            _logger.Debug(_className, methodName, "Execution mdoe = " + mode.ToString());

            MobileGatewayDirectives.APIOperationDirective opDirective = Config.GetOperationDirectiveByName(Name) as MobileGatewayDirectives.APIOperationDirective;
            IInboundMobileInterceptor interceptor = null;
            if (opDirective.Interceptor != null)
            {
                interceptor = InterceptorUtil.GetInterceptor(opDirective.Interceptor) as IInboundMobileInterceptor;
                if (interceptor == null)
                {
                    _logger.Error(_className, methodName, "Unable to instantiate interceptor.");
                    throw new LWException("Unable to instantiate interceptor.") { ErrorCode = 1 };
                }
            }

            string loadDirectiveStr = GetFunctionParameter("LoadDirective");
            if (string.IsNullOrEmpty(loadDirectiveStr))
            {
                string errMsg = string.Format("No load directives specified to check for existing member.");
                _logger.Error(_className, methodName, errMsg);
                throw new LWException(errMsg) { ErrorCode = 1 };
            }


            VirtualCard existing = member.GetLoyaltyCard(card.LoyaltyIdNumber);
            if (existing != null)
            {
                string errMsg = string.Format("This member already has this loyalty card.");
                _logger.Error(_className, methodName, errMsg);
                throw new LWException(errMsg) { ErrorCode = 1 };
            }

            Member anotherMember = LoyaltyService.LoadMemberFromLoyaltyID(card.LoyaltyIdNumber);
            if (anotherMember != null)
            {
                string errMsg = string.Format("This loyalty id number already belongs to another member.");
                _logger.Error(_className, methodName, errMsg);
                throw new LWException(errMsg) { ErrorCode = 1 };
            }
                        
            VirtualCard newCard = card.PopulateVirtualCard(Config, opDirective);
            member.LoyaltyCards.Add(newCard);            
            member.ChangedBy = "Mobile Gateway Service";

            if (interceptor != null)
            {
                try
                {
                    _logger.Debug(_className, methodName, "Invoking ProcessMemberBeforeSave on interceptor.");
                    interceptor.ProcessMemberBeforeSave(Config, member);
                }
                catch (Exception iex)
                {
                    string msg = string.Format("Error generated by {0}.ProcessMemberBeforeSave", interceptor.GetType().ToString());
                    _logger.Error(_className, methodName, msg, iex);
                    throw;
                }
            }

            var results = new List<ContextObject.RuleResult>();
            LoyaltyService.SaveMember(member, results, mode);

            if (interceptor != null)
            {
                try
                {
                    _logger.Debug(_className, methodName, "Invoking ProcessMemberAfterSave on interceptor.");
                    interceptor.ProcessMemberAfterSave(Config, member, results);
                }
                catch (Exception iex)
                {
                    string msg = string.Format("Error generated by {0}.ProcessMemberAfterSave", interceptor.GetType().ToString());
                    _logger.Error(_className, methodName, msg, iex);
                    throw;
                }
            }
            _logger.Debug(_className, methodName, "Saved member with Ipcode " + member.MyKey.ToString());
                        
			return null;
		}
	}
}