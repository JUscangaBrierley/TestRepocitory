//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XigniteTest.RemoteGlobalCurrencies {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.xignite.com/services/", ConfigurationName="RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap")]
    public interface XigniteGlobalCurrenciesSoap {
        
        // CODEGEN: Generating message contract since message ListActiveCurrenciesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/ListActiveCurrencies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesResponse ListActiveCurrencies(XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/ListActiveCurrencies", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesResponse> ListActiveCurrenciesAsync(XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesRequest request);
        
        // CODEGEN: Generating message contract since message ConvertRealTimeValueRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/ConvertRealTimeValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueResponse ConvertRealTimeValue(XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/ConvertRealTimeValue", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueResponse> ConvertRealTimeValueAsync(XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueRequest request);
        
        // CODEGEN: Generating message contract since message GetHistoricalRatesRangeRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetHistoricalRatesRange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeResponse GetHistoricalRatesRange(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetHistoricalRatesRange", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeResponse> GetHistoricalRatesRangeAsync(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeRequest request);
        
        // CODEGEN: Generating message contract since message GetRealTimeRateRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetRealTimeRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateResponse GetRealTimeRate(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetRealTimeRate", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateResponse> GetRealTimeRateAsync(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateRequest request);
        
        // CODEGEN: Generating message contract since message GetRealTimeRatesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetRealTimeRates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesResponse GetRealTimeRates(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetRealTimeRates", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesResponse> GetRealTimeRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesRequest request);
        
        // CODEGEN: Generating message contract since message GetRealTimeRateTableRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetRealTimeRateTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableResponse GetRealTimeRateTable(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetRealTimeRateTable", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableResponse> GetRealTimeRateTableAsync(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableRequest request);
        
        // CODEGEN: Generating message contract since message GetBarsRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetBars", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetBarsResponse GetBars(XigniteTest.RemoteGlobalCurrencies.GetBarsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetBars", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBarsResponse> GetBarsAsync(XigniteTest.RemoteGlobalCurrencies.GetBarsRequest request);
        
        // CODEGEN: Generating message contract since message GetForwardRateRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetForwardRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetForwardRateResponse GetForwardRate(XigniteTest.RemoteGlobalCurrencies.GetForwardRateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetForwardRate", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetForwardRateResponse> GetForwardRateAsync(XigniteTest.RemoteGlobalCurrencies.GetForwardRateRequest request);
        
        // CODEGEN: Generating message contract since message GetHistoricalRateRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetHistoricalRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateResponse GetHistoricalRate(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetHistoricalRate", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateResponse> GetHistoricalRateAsync(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateRequest request);
        
        // CODEGEN: Generating message contract since message ListCurrenciesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/ListCurrencies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.ListCurrenciesResponse ListCurrencies(XigniteTest.RemoteGlobalCurrencies.ListCurrenciesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/ListCurrencies", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ListCurrenciesResponse> ListCurrenciesAsync(XigniteTest.RemoteGlobalCurrencies.ListCurrenciesRequest request);
        
        // CODEGEN: Generating message contract since message GetAllRealTimeRatesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetAllRealTimeRates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesResponse GetAllRealTimeRates(XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetAllRealTimeRates", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesResponse> GetAllRealTimeRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesRequest request);
        
        // CODEGEN: Generating message contract since message GetLatestCrossRateRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetLatestCrossRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateResponse GetLatestCrossRate(XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetLatestCrossRate", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateResponse> GetLatestCrossRateAsync(XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateRequest request);
        
        // CODEGEN: Generating message contract since message GetLatestCrossRatesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetLatestCrossRates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesResponse GetLatestCrossRates(XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetLatestCrossRates", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesResponse> GetLatestCrossRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesRequest request);
        
        // CODEGEN: Generating message contract since message GetBestCrossRateRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetBestCrossRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateResponse GetBestCrossRate(XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetBestCrossRate", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateResponse> GetBestCrossRateAsync(XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateRequest request);
        
        // CODEGEN: Generating message contract since message GetBestCrossRatesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetBestCrossRates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesResponse GetBestCrossRates(XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetBestCrossRates", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesResponse> GetBestCrossRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesRequest request);
        
        // CODEGEN: Generating message contract since message ConvertHistoricalValueRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/ConvertHistoricalValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueResponse ConvertHistoricalValue(XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/ConvertHistoricalValue", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueResponse> ConvertHistoricalValueAsync(XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueRequest request);
        
        // CODEGEN: Generating message contract since message GetLatestHistoricalRateRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetLatestHistoricalRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateResponse GetLatestHistoricalRate(XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetLatestHistoricalRate", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateResponse> GetLatestHistoricalRateAsync(XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateRequest request);
        
        // CODEGEN: Generating message contract since message GetLatestHistoricalRatesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetLatestHistoricalRates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesResponse GetLatestHistoricalRates(XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetLatestHistoricalRates", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesResponse> GetLatestHistoricalRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesRequest request);
        
        // CODEGEN: Generating message contract since message GetHistoricalRatesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetHistoricalRates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesResponse GetHistoricalRates(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetHistoricalRates", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesResponse> GetHistoricalRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRequest request);
        
        // CODEGEN: Generating message contract since message GetHistoricalRatesRangesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetHistoricalRatesRanges", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesResponse GetHistoricalRatesRanges(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetHistoricalRatesRanges", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesResponse> GetHistoricalRatesRangesAsync(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesRequest request);
        
        // CODEGEN: Generating message contract since message GetOfficialHistoricalRateRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetOfficialHistoricalRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateResponse GetOfficialHistoricalRate(XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetOfficialHistoricalRate", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateResponse> GetOfficialHistoricalRateAsync(XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateRequest request);
        
        // CODEGEN: Generating message contract since message GetOfficialRateRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetOfficialRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetOfficialRateResponse GetOfficialRate(XigniteTest.RemoteGlobalCurrencies.GetOfficialRateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetOfficialRate", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialRateResponse> GetOfficialRateAsync(XigniteTest.RemoteGlobalCurrencies.GetOfficialRateRequest request);
        
        // CODEGEN: Generating message contract since message GetOfficialRatesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetOfficialRates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesResponse GetOfficialRates(XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetOfficialRates", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesResponse> GetOfficialRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesRequest request);
        
        // CODEGEN: Generating message contract since message GetOfficialHistoricalRatesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetOfficialHistoricalRates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesResponse GetOfficialHistoricalRates(XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetOfficialHistoricalRates", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesResponse> GetOfficialHistoricalRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesRequest request);
        
        // CODEGEN: Generating message contract since message GetTickRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetTick", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetTickResponse GetTick(XigniteTest.RemoteGlobalCurrencies.GetTickRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetTick", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetTickResponse> GetTickAsync(XigniteTest.RemoteGlobalCurrencies.GetTickRequest request);
        
        // CODEGEN: Generating message contract since message GetTicksRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetTicks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetTicksResponse GetTicks(XigniteTest.RemoteGlobalCurrencies.GetTicksRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetTicks", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetTicksResponse> GetTicksAsync(XigniteTest.RemoteGlobalCurrencies.GetTicksRequest request);
        
        // CODEGEN: Generating message contract since message GetBarRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetBar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetBarResponse GetBar(XigniteTest.RemoteGlobalCurrencies.GetBarRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetBar", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBarResponse> GetBarAsync(XigniteTest.RemoteGlobalCurrencies.GetBarRequest request);
        
        // CODEGEN: Generating message contract since message GetChartBarsRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetChartBars", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetChartBarsResponse GetChartBars(XigniteTest.RemoteGlobalCurrencies.GetChartBarsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetChartBars", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetChartBarsResponse> GetChartBarsAsync(XigniteTest.RemoteGlobalCurrencies.GetChartBarsRequest request);
        
        // CODEGEN: Generating message contract since message GetLondonHistoricalRatesRangeRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetLondonHistoricalRatesRange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Common))]
        XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeResponse GetLondonHistoricalRatesRange(XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.xignite.com/services/GetLondonHistoricalRatesRange", ReplyAction="*")]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeResponse> GetLondonHistoricalRatesRangeAsync(XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Header : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string usernameField;
        
        private string passwordField;
        
        private string tracerField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
                this.RaisePropertyChanged("Username");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Tracer {
            get {
                return this.tracerField;
            }
            set {
                this.tracerField = value;
                this.RaisePropertyChanged("Tracer");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
                this.RaisePropertyChanged("AnyAttr");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class ChartBar : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string startDateField;
        
        private string startTimeField;
        
        private string endDateField;
        
        private string endTimeField;
        
        private double uTCOffsetField;
        
        private double openField;
        
        private double highField;
        
        private double lowField;
        
        private double closeField;
        
        private double volumeField;
        
        private int tradesField;
        
        private double tWAPField;
        
        private double vWAPField;
        
        private string currencyField;
        
        private string sessionField;
        
        private double adjustmentRatioField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
                this.RaisePropertyChanged("StartDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
                this.RaisePropertyChanged("StartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
                this.RaisePropertyChanged("EndDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
                this.RaisePropertyChanged("EndTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public double UTCOffset {
            get {
                return this.uTCOffsetField;
            }
            set {
                this.uTCOffsetField = value;
                this.RaisePropertyChanged("UTCOffset");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public double Open {
            get {
                return this.openField;
            }
            set {
                this.openField = value;
                this.RaisePropertyChanged("Open");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public double High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
                this.RaisePropertyChanged("High");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public double Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
                this.RaisePropertyChanged("Low");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public double Close {
            get {
                return this.closeField;
            }
            set {
                this.closeField = value;
                this.RaisePropertyChanged("Close");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public double Volume {
            get {
                return this.volumeField;
            }
            set {
                this.volumeField = value;
                this.RaisePropertyChanged("Volume");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public int Trades {
            get {
                return this.tradesField;
            }
            set {
                this.tradesField = value;
                this.RaisePropertyChanged("Trades");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public double TWAP {
            get {
                return this.tWAPField;
            }
            set {
                this.tWAPField = value;
                this.RaisePropertyChanged("TWAP");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public double VWAP {
            get {
                return this.vWAPField;
            }
            set {
                this.vWAPField = value;
                this.RaisePropertyChanged("VWAP");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string Currency {
            get {
                return this.currencyField;
            }
            set {
                this.currencyField = value;
                this.RaisePropertyChanged("Currency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string Session {
            get {
                return this.sessionField;
            }
            set {
                this.sessionField = value;
                this.RaisePropertyChanged("Session");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public double AdjustmentRatio {
            get {
                return this.adjustmentRatioField;
            }
            set {
                this.adjustmentRatioField = value;
                this.RaisePropertyChanged("AdjustmentRatio");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class CurrencyDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string symbolField;
        
        private string baseCurrencyField;
        
        private string quoteCurrencyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
                this.RaisePropertyChanged("Symbol");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string BaseCurrency {
            get {
                return this.baseCurrencyField;
            }
            set {
                this.baseCurrencyField = value;
                this.RaisePropertyChanged("BaseCurrency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string QuoteCurrency {
            get {
                return this.quoteCurrencyField;
            }
            set {
                this.quoteCurrencyField = value;
                this.RaisePropertyChanged("QuoteCurrency");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class ForwardContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string expirationField;
        
        private double bidField;
        
        private double midField;
        
        private double askField;
        
        private double spotRateField;
        
        private double pointsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Expiration {
            get {
                return this.expirationField;
            }
            set {
                this.expirationField = value;
                this.RaisePropertyChanged("Expiration");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
                this.RaisePropertyChanged("Bid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public double Mid {
            get {
                return this.midField;
            }
            set {
                this.midField = value;
                this.RaisePropertyChanged("Mid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
                this.RaisePropertyChanged("Ask");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public double SpotRate {
            get {
                return this.spotRateField;
            }
            set {
                this.spotRateField = value;
                this.RaisePropertyChanged("SpotRate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public double Points {
            get {
                return this.pointsField;
            }
            set {
                this.pointsField = value;
                this.RaisePropertyChanged("Points");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class QuoteCurrencyItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string quoteCurrencyField;
        
        private double rateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string QuoteCurrency {
            get {
                return this.quoteCurrencyField;
            }
            set {
                this.quoteCurrencyField = value;
                this.RaisePropertyChanged("QuoteCurrency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public double Rate {
            get {
                return this.rateField;
            }
            set {
                this.rateField = value;
                this.RaisePropertyChanged("Rate");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class RateTableLine : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string baseCurrencyField;
        
        private QuoteCurrencyItem[] columnsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string BaseCurrency {
            get {
                return this.baseCurrencyField;
            }
            set {
                this.baseCurrencyField = value;
                this.RaisePropertyChanged("BaseCurrency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public QuoteCurrencyItem[] Columns {
            get {
                return this.columnsField;
            }
            set {
                this.columnsField = value;
                this.RaisePropertyChanged("Columns");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Country : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string codeField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
                this.RaisePropertyChanged("Code");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Currency : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string symbolField;
        
        private string nameField;
        
        private string pluralField;
        
        private bool activeField;
        
        private bool digitalField;
        
        private string messageField;
        
        private Country[] countriesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
                this.RaisePropertyChanged("Symbol");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Plural {
            get {
                return this.pluralField;
            }
            set {
                this.pluralField = value;
                this.RaisePropertyChanged("Plural");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool Active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
                this.RaisePropertyChanged("Active");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool Digital {
            get {
                return this.digitalField;
            }
            set {
                this.digitalField = value;
                this.RaisePropertyChanged("Digital");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
                this.RaisePropertyChanged("Message");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public Country[] Countries {
            get {
                return this.countriesField;
            }
            set {
                this.countriesField = value;
                this.RaisePropertyChanged("Countries");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CurrencyChartBars))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Tick))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForwardRate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bar))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RateTable))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Rate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HistoricalRate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HistoricalRateBidAsk))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RateConversion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Currencies))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Common : object, System.ComponentModel.INotifyPropertyChanged {
        
        private OutcomeTypes outcomeField;
        
        private string messageField;
        
        private string identityField;
        
        private double delayField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OutcomeTypes Outcome {
            get {
                return this.outcomeField;
            }
            set {
                this.outcomeField = value;
                this.RaisePropertyChanged("Outcome");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
                this.RaisePropertyChanged("Message");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Identity {
            get {
                return this.identityField;
            }
            set {
                this.identityField = value;
                this.RaisePropertyChanged("Identity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public double Delay {
            get {
                return this.delayField;
            }
            set {
                this.delayField = value;
                this.RaisePropertyChanged("Delay");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum OutcomeTypes {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        SystemError,
        
        /// <remarks/>
        RequestError,
        
        /// <remarks/>
        RegistrationError,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class CurrencyChartBars : Common {
        
        private string timingField;
        
        private string priceTypeField;
        
        private CurrencyDescription currencyDescriptionField;
        
        private ChartBar[] chartBarsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Timing {
            get {
                return this.timingField;
            }
            set {
                this.timingField = value;
                this.RaisePropertyChanged("Timing");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PriceType {
            get {
                return this.priceTypeField;
            }
            set {
                this.priceTypeField = value;
                this.RaisePropertyChanged("PriceType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public CurrencyDescription CurrencyDescription {
            get {
                return this.currencyDescriptionField;
            }
            set {
                this.currencyDescriptionField = value;
                this.RaisePropertyChanged("CurrencyDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public ChartBar[] ChartBars {
            get {
                return this.chartBarsField;
            }
            set {
                this.chartBarsField = value;
                this.RaisePropertyChanged("ChartBars");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Tick : Common {
        
        private string symbolField;
        
        private string dateField;
        
        private string timeField;
        
        private double bidField;
        
        private double midField;
        
        private double askField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
                this.RaisePropertyChanged("Symbol");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("Date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
                this.RaisePropertyChanged("Time");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
                this.RaisePropertyChanged("Bid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public double Mid {
            get {
                return this.midField;
            }
            set {
                this.midField = value;
                this.RaisePropertyChanged("Mid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
                this.RaisePropertyChanged("Ask");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class ForwardRate : Common {
        
        private string baseCurrencyField;
        
        private string quoteCurrencyField;
        
        private string symbolField;
        
        private string quoteTypeField;
        
        private string dateField;
        
        private string timeField;
        
        private ForwardContract[] forwardRatesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string BaseCurrency {
            get {
                return this.baseCurrencyField;
            }
            set {
                this.baseCurrencyField = value;
                this.RaisePropertyChanged("BaseCurrency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string QuoteCurrency {
            get {
                return this.quoteCurrencyField;
            }
            set {
                this.quoteCurrencyField = value;
                this.RaisePropertyChanged("QuoteCurrency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
                this.RaisePropertyChanged("Symbol");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string QuoteType {
            get {
                return this.quoteTypeField;
            }
            set {
                this.quoteTypeField = value;
                this.RaisePropertyChanged("QuoteType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("Date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
                this.RaisePropertyChanged("Time");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public ForwardContract[] ForwardRates {
            get {
                return this.forwardRatesField;
            }
            set {
                this.forwardRatesField = value;
                this.RaisePropertyChanged("ForwardRates");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Bar : Common {
        
        private string symbolField;
        
        private string startDateField;
        
        private string startTimeField;
        
        private string endDateField;
        
        private string endTimeField;
        
        private double openField;
        
        private double highField;
        
        private double lowField;
        
        private double closeField;
        
        private double averageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
                this.RaisePropertyChanged("Symbol");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
                this.RaisePropertyChanged("StartDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
                this.RaisePropertyChanged("StartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
                this.RaisePropertyChanged("EndDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
                this.RaisePropertyChanged("EndTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public double Open {
            get {
                return this.openField;
            }
            set {
                this.openField = value;
                this.RaisePropertyChanged("Open");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public double High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
                this.RaisePropertyChanged("High");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public double Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
                this.RaisePropertyChanged("Low");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public double Close {
            get {
                return this.closeField;
            }
            set {
                this.closeField = value;
                this.RaisePropertyChanged("Close");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public double Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
                this.RaisePropertyChanged("Average");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class RateTable : Common {
        
        private RateTableLine[] linesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public RateTableLine[] Lines {
            get {
                return this.linesField;
            }
            set {
                this.linesField = value;
                this.RaisePropertyChanged("Lines");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Rate : Common {
        
        private string baseCurrencyField;
        
        private string quoteCurrencyField;
        
        private string symbolField;
        
        private string dateField;
        
        private string timeField;
        
        private string quoteTypeField;
        
        private double bidField;
        
        private double midField;
        
        private double askField;
        
        private double spreadField;
        
        private string textField;
        
        private string sourceField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string BaseCurrency {
            get {
                return this.baseCurrencyField;
            }
            set {
                this.baseCurrencyField = value;
                this.RaisePropertyChanged("BaseCurrency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string QuoteCurrency {
            get {
                return this.quoteCurrencyField;
            }
            set {
                this.quoteCurrencyField = value;
                this.RaisePropertyChanged("QuoteCurrency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
                this.RaisePropertyChanged("Symbol");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("Date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
                this.RaisePropertyChanged("Time");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string QuoteType {
            get {
                return this.quoteTypeField;
            }
            set {
                this.quoteTypeField = value;
                this.RaisePropertyChanged("QuoteType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
                this.RaisePropertyChanged("Bid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public double Mid {
            get {
                return this.midField;
            }
            set {
                this.midField = value;
                this.RaisePropertyChanged("Mid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
                this.RaisePropertyChanged("Ask");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public double Spread {
            get {
                return this.spreadField;
            }
            set {
                this.spreadField = value;
                this.RaisePropertyChanged("Spread");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
                this.RaisePropertyChanged("Text");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
                this.RaisePropertyChanged("Source");
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HistoricalRateBidAsk))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class HistoricalRate : Common {
        
        private string baseCurrencyField;
        
        private string quoteCurrencyField;
        
        private string symbolField;
        
        private string startDateField;
        
        private string startTimeField;
        
        private string endDateField;
        
        private string endTimeField;
        
        private double openField;
        
        private double highField;
        
        private double lowField;
        
        private double closeField;
        
        private double averageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string BaseCurrency {
            get {
                return this.baseCurrencyField;
            }
            set {
                this.baseCurrencyField = value;
                this.RaisePropertyChanged("BaseCurrency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string QuoteCurrency {
            get {
                return this.quoteCurrencyField;
            }
            set {
                this.quoteCurrencyField = value;
                this.RaisePropertyChanged("QuoteCurrency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
                this.RaisePropertyChanged("Symbol");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
                this.RaisePropertyChanged("StartDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
                this.RaisePropertyChanged("StartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
                this.RaisePropertyChanged("EndDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
                this.RaisePropertyChanged("EndTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public double Open {
            get {
                return this.openField;
            }
            set {
                this.openField = value;
                this.RaisePropertyChanged("Open");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public double High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
                this.RaisePropertyChanged("High");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public double Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
                this.RaisePropertyChanged("Low");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public double Close {
            get {
                return this.closeField;
            }
            set {
                this.closeField = value;
                this.RaisePropertyChanged("Close");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public double Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
                this.RaisePropertyChanged("Average");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class HistoricalRateBidAsk : HistoricalRate {
        
        private double bidField;
        
        private double askField;
        
        private string sourceField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
                this.RaisePropertyChanged("Bid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
                this.RaisePropertyChanged("Ask");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
                this.RaisePropertyChanged("Source");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class RateConversion : Common {
        
        private string fromCurrencySymbolField;
        
        private string fromCurrencyNameField;
        
        private string toCurrencySymbolField;
        
        private string toCurrencyNameField;
        
        private string dateField;
        
        private string timeField;
        
        private double amountField;
        
        private double resultField;
        
        private double rateField;
        
        private string sourceField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string FromCurrencySymbol {
            get {
                return this.fromCurrencySymbolField;
            }
            set {
                this.fromCurrencySymbolField = value;
                this.RaisePropertyChanged("FromCurrencySymbol");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FromCurrencyName {
            get {
                return this.fromCurrencyNameField;
            }
            set {
                this.fromCurrencyNameField = value;
                this.RaisePropertyChanged("FromCurrencyName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ToCurrencySymbol {
            get {
                return this.toCurrencySymbolField;
            }
            set {
                this.toCurrencySymbolField = value;
                this.RaisePropertyChanged("ToCurrencySymbol");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string ToCurrencyName {
            get {
                return this.toCurrencyNameField;
            }
            set {
                this.toCurrencyNameField = value;
                this.RaisePropertyChanged("ToCurrencyName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("Date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
                this.RaisePropertyChanged("Time");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public double Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
                this.RaisePropertyChanged("Amount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public double Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public double Rate {
            get {
                return this.rateField;
            }
            set {
                this.rateField = value;
                this.RaisePropertyChanged("Rate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
                this.RaisePropertyChanged("Source");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Currencies : Common {
        
        private Currency[] currencyListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public Currency[] CurrencyList {
            get {
                return this.currencyListField;
            }
            set {
                this.currencyListField = value;
                this.RaisePropertyChanged("CurrencyList");
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ListActiveCurrencies", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class ListActiveCurrenciesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        public ListActiveCurrenciesRequest() {
        }
        
        public ListActiveCurrenciesRequest(XigniteTest.RemoteGlobalCurrencies.Header Header) {
            this.Header = Header;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ListActiveCurrenciesResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class ListActiveCurrenciesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Currencies ListActiveCurrenciesResult;
        
        public ListActiveCurrenciesResponse() {
        }
        
        public ListActiveCurrenciesResponse(XigniteTest.RemoteGlobalCurrencies.Currencies ListActiveCurrenciesResult) {
            this.ListActiveCurrenciesResult = ListActiveCurrenciesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConvertRealTimeValue", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class ConvertRealTimeValueRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string From;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string To;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public double Amount;
        
        public ConvertRealTimeValueRequest() {
        }
        
        public ConvertRealTimeValueRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string From, string To, double Amount) {
            this.Header = Header;
            this.From = From;
            this.To = To;
            this.Amount = Amount;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConvertRealTimeValueResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class ConvertRealTimeValueResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.RateConversion ConvertRealTimeValueResult;
        
        public ConvertRealTimeValueResponse() {
        }
        
        public ConvertRealTimeValueResponse(XigniteTest.RemoteGlobalCurrencies.RateConversion ConvertRealTimeValueResult) {
            this.ConvertRealTimeValueResult = ConvertRealTimeValueResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHistoricalRatesRange", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetHistoricalRatesRangeRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string StartDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string EndDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=3)]
        public string FixingTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=4)]
        public string PeriodType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=5)]
        public string PriceType;
        
        public GetHistoricalRatesRangeRequest() {
        }
        
        public GetHistoricalRatesRangeRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string StartDate, string EndDate, string FixingTime, string PeriodType, string PriceType) {
            this.Header = Header;
            this.Symbol = Symbol;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
            this.FixingTime = FixingTime;
            this.PeriodType = PeriodType;
            this.PriceType = PriceType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHistoricalRatesRangeResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetHistoricalRatesRangeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetHistoricalRatesRangeResult;
        
        public GetHistoricalRatesRangeResponse() {
        }
        
        public GetHistoricalRatesRangeResponse(XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetHistoricalRatesRangeResult) {
            this.GetHistoricalRatesRangeResult = GetHistoricalRatesRangeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRealTimeRate", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetRealTimeRateRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        public GetRealTimeRateRequest() {
        }
        
        public GetRealTimeRateRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            this.Header = Header;
            this.Symbol = Symbol;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRealTimeRateResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetRealTimeRateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Rate GetRealTimeRateResult;
        
        public GetRealTimeRateResponse() {
        }
        
        public GetRealTimeRateResponse(XigniteTest.RemoteGlobalCurrencies.Rate GetRealTimeRateResult) {
            this.GetRealTimeRateResult = GetRealTimeRateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRealTimeRates", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetRealTimeRatesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbols;
        
        public GetRealTimeRatesRequest() {
        }
        
        public GetRealTimeRatesRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            this.Header = Header;
            this.Symbols = Symbols;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRealTimeRatesResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetRealTimeRatesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Rate[] GetRealTimeRatesResult;
        
        public GetRealTimeRatesResponse() {
        }
        
        public GetRealTimeRatesResponse(XigniteTest.RemoteGlobalCurrencies.Rate[] GetRealTimeRatesResult) {
            this.GetRealTimeRatesResult = GetRealTimeRatesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRealTimeRateTable", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetRealTimeRateTableRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbols;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string PriceType;
        
        public GetRealTimeRateTableRequest() {
        }
        
        public GetRealTimeRateTableRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string PriceType) {
            this.Header = Header;
            this.Symbols = Symbols;
            this.PriceType = PriceType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRealTimeRateTableResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetRealTimeRateTableResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.RateTable GetRealTimeRateTableResult;
        
        public GetRealTimeRateTableResponse() {
        }
        
        public GetRealTimeRateTableResponse(XigniteTest.RemoteGlobalCurrencies.RateTable GetRealTimeRateTableResult) {
            this.GetRealTimeRateTableResult = GetRealTimeRateTableResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBars", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetBarsRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string AsOfDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string StartTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=3)]
        public string EndTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=4)]
        public string PriceType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=5)]
        public string TickPrecision;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=6)]
        public int TickPeriods;
        
        public GetBarsRequest() {
        }
        
        public GetBarsRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string StartTime, string EndTime, string PriceType, string TickPrecision, int TickPeriods) {
            this.Header = Header;
            this.Symbol = Symbol;
            this.AsOfDate = AsOfDate;
            this.StartTime = StartTime;
            this.EndTime = EndTime;
            this.PriceType = PriceType;
            this.TickPrecision = TickPrecision;
            this.TickPeriods = TickPeriods;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBarsResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetBarsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Bar[] GetBarsResult;
        
        public GetBarsResponse() {
        }
        
        public GetBarsResponse(XigniteTest.RemoteGlobalCurrencies.Bar[] GetBarsResult) {
            this.GetBarsResult = GetBarsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetForwardRate", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetForwardRateRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        public GetForwardRateRequest() {
        }
        
        public GetForwardRateRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            this.Header = Header;
            this.Symbol = Symbol;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetForwardRateResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetForwardRateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.ForwardRate GetForwardRateResult;
        
        public GetForwardRateResponse() {
        }
        
        public GetForwardRateResponse(XigniteTest.RemoteGlobalCurrencies.ForwardRate GetForwardRateResult) {
            this.GetForwardRateResult = GetForwardRateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHistoricalRate", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetHistoricalRateRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string AsOfDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string FixingTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=3)]
        public string PriceType;
        
        public GetHistoricalRateRequest() {
        }
        
        public GetHistoricalRateRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string FixingTime, string PriceType) {
            this.Header = Header;
            this.Symbol = Symbol;
            this.AsOfDate = AsOfDate;
            this.FixingTime = FixingTime;
            this.PriceType = PriceType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHistoricalRateResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetHistoricalRateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate GetHistoricalRateResult;
        
        public GetHistoricalRateResponse() {
        }
        
        public GetHistoricalRateResponse(XigniteTest.RemoteGlobalCurrencies.HistoricalRate GetHistoricalRateResult) {
            this.GetHistoricalRateResult = GetHistoricalRateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ListCurrencies", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class ListCurrenciesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        public ListCurrenciesRequest() {
        }
        
        public ListCurrenciesRequest(XigniteTest.RemoteGlobalCurrencies.Header Header) {
            this.Header = Header;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ListCurrenciesResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class ListCurrenciesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Currencies ListCurrenciesResult;
        
        public ListCurrenciesResponse() {
        }
        
        public ListCurrenciesResponse(XigniteTest.RemoteGlobalCurrencies.Currencies ListCurrenciesResult) {
            this.ListCurrenciesResult = ListCurrenciesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllRealTimeRates", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetAllRealTimeRatesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbols;
        
        public GetAllRealTimeRatesRequest() {
        }
        
        public GetAllRealTimeRatesRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            this.Header = Header;
            this.Symbols = Symbols;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllRealTimeRatesResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetAllRealTimeRatesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Rate[] GetAllRealTimeRatesResult;
        
        public GetAllRealTimeRatesResponse() {
        }
        
        public GetAllRealTimeRatesResponse(XigniteTest.RemoteGlobalCurrencies.Rate[] GetAllRealTimeRatesResult) {
            this.GetAllRealTimeRatesResult = GetAllRealTimeRatesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLatestCrossRate", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetLatestCrossRateRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        public GetLatestCrossRateRequest() {
        }
        
        public GetLatestCrossRateRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            this.Header = Header;
            this.Symbol = Symbol;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLatestCrossRateResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetLatestCrossRateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Rate GetLatestCrossRateResult;
        
        public GetLatestCrossRateResponse() {
        }
        
        public GetLatestCrossRateResponse(XigniteTest.RemoteGlobalCurrencies.Rate GetLatestCrossRateResult) {
            this.GetLatestCrossRateResult = GetLatestCrossRateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLatestCrossRates", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetLatestCrossRatesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbols;
        
        public GetLatestCrossRatesRequest() {
        }
        
        public GetLatestCrossRatesRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            this.Header = Header;
            this.Symbols = Symbols;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLatestCrossRatesResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetLatestCrossRatesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Rate[] GetLatestCrossRatesResult;
        
        public GetLatestCrossRatesResponse() {
        }
        
        public GetLatestCrossRatesResponse(XigniteTest.RemoteGlobalCurrencies.Rate[] GetLatestCrossRatesResult) {
            this.GetLatestCrossRatesResult = GetLatestCrossRatesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBestCrossRate", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetBestCrossRateRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        public GetBestCrossRateRequest() {
        }
        
        public GetBestCrossRateRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            this.Header = Header;
            this.Symbol = Symbol;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBestCrossRateResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetBestCrossRateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Rate GetBestCrossRateResult;
        
        public GetBestCrossRateResponse() {
        }
        
        public GetBestCrossRateResponse(XigniteTest.RemoteGlobalCurrencies.Rate GetBestCrossRateResult) {
            this.GetBestCrossRateResult = GetBestCrossRateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBestCrossRates", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetBestCrossRatesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbols;
        
        public GetBestCrossRatesRequest() {
        }
        
        public GetBestCrossRatesRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            this.Header = Header;
            this.Symbols = Symbols;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBestCrossRatesResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetBestCrossRatesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Rate[] GetBestCrossRatesResult;
        
        public GetBestCrossRatesResponse() {
        }
        
        public GetBestCrossRatesResponse(XigniteTest.RemoteGlobalCurrencies.Rate[] GetBestCrossRatesResult) {
            this.GetBestCrossRatesResult = GetBestCrossRatesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConvertHistoricalValue", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class ConvertHistoricalValueRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string From;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string To;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public double Amount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=3)]
        public string AsOfDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=4)]
        public string FixingTime;
        
        public ConvertHistoricalValueRequest() {
        }
        
        public ConvertHistoricalValueRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string From, string To, double Amount, string AsOfDate, string FixingTime) {
            this.Header = Header;
            this.From = From;
            this.To = To;
            this.Amount = Amount;
            this.AsOfDate = AsOfDate;
            this.FixingTime = FixingTime;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConvertHistoricalValueResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class ConvertHistoricalValueResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.RateConversion ConvertHistoricalValueResult;
        
        public ConvertHistoricalValueResponse() {
        }
        
        public ConvertHistoricalValueResponse(XigniteTest.RemoteGlobalCurrencies.RateConversion ConvertHistoricalValueResult) {
            this.ConvertHistoricalValueResult = ConvertHistoricalValueResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLatestHistoricalRate", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetLatestHistoricalRateRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string AsOfDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string FixingTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=3)]
        public string PriceType;
        
        public GetLatestHistoricalRateRequest() {
        }
        
        public GetLatestHistoricalRateRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string FixingTime, string PriceType) {
            this.Header = Header;
            this.Symbol = Symbol;
            this.AsOfDate = AsOfDate;
            this.FixingTime = FixingTime;
            this.PriceType = PriceType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLatestHistoricalRateResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetLatestHistoricalRateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate GetLatestHistoricalRateResult;
        
        public GetLatestHistoricalRateResponse() {
        }
        
        public GetLatestHistoricalRateResponse(XigniteTest.RemoteGlobalCurrencies.HistoricalRate GetLatestHistoricalRateResult) {
            this.GetLatestHistoricalRateResult = GetLatestHistoricalRateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLatestHistoricalRates", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetLatestHistoricalRatesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbols;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string AsOfDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string FixingTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=3)]
        public string PriceType;
        
        public GetLatestHistoricalRatesRequest() {
        }
        
        public GetLatestHistoricalRatesRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string AsOfDate, string FixingTime, string PriceType) {
            this.Header = Header;
            this.Symbols = Symbols;
            this.AsOfDate = AsOfDate;
            this.FixingTime = FixingTime;
            this.PriceType = PriceType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLatestHistoricalRatesResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetLatestHistoricalRatesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetLatestHistoricalRatesResult;
        
        public GetLatestHistoricalRatesResponse() {
        }
        
        public GetLatestHistoricalRatesResponse(XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetLatestHistoricalRatesResult) {
            this.GetLatestHistoricalRatesResult = GetLatestHistoricalRatesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHistoricalRates", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetHistoricalRatesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbols;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string AsOfDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string FixingTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=3)]
        public string PriceType;
        
        public GetHistoricalRatesRequest() {
        }
        
        public GetHistoricalRatesRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string AsOfDate, string FixingTime, string PriceType) {
            this.Header = Header;
            this.Symbols = Symbols;
            this.AsOfDate = AsOfDate;
            this.FixingTime = FixingTime;
            this.PriceType = PriceType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHistoricalRatesResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetHistoricalRatesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetHistoricalRatesResult;
        
        public GetHistoricalRatesResponse() {
        }
        
        public GetHistoricalRatesResponse(XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetHistoricalRatesResult) {
            this.GetHistoricalRatesResult = GetHistoricalRatesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHistoricalRatesRanges", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetHistoricalRatesRangesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbols;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string StartDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string EndDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=3)]
        public string FixingTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=4)]
        public string PeriodType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=5)]
        public string PriceType;
        
        public GetHistoricalRatesRangesRequest() {
        }
        
        public GetHistoricalRatesRangesRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string StartDate, string EndDate, string FixingTime, string PeriodType, string PriceType) {
            this.Header = Header;
            this.Symbols = Symbols;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
            this.FixingTime = FixingTime;
            this.PeriodType = PeriodType;
            this.PriceType = PriceType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHistoricalRatesRangesResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetHistoricalRatesRangesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetHistoricalRatesRangesResult;
        
        public GetHistoricalRatesRangesResponse() {
        }
        
        public GetHistoricalRatesRangesResponse(XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetHistoricalRatesRangesResult) {
            this.GetHistoricalRatesRangesResult = GetHistoricalRatesRangesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOfficialHistoricalRate", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetOfficialHistoricalRateRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Country;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string Symbol;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string AsOfDate;
        
        public GetOfficialHistoricalRateRequest() {
        }
        
        public GetOfficialHistoricalRateRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbol, string AsOfDate) {
            this.Header = Header;
            this.Country = Country;
            this.Symbol = Symbol;
            this.AsOfDate = AsOfDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOfficialHistoricalRateResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetOfficialHistoricalRateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate GetOfficialHistoricalRateResult;
        
        public GetOfficialHistoricalRateResponse() {
        }
        
        public GetOfficialHistoricalRateResponse(XigniteTest.RemoteGlobalCurrencies.HistoricalRate GetOfficialHistoricalRateResult) {
            this.GetOfficialHistoricalRateResult = GetOfficialHistoricalRateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOfficialRate", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetOfficialRateRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Country;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string Symbol;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string AsOfDate;
        
        public GetOfficialRateRequest() {
        }
        
        public GetOfficialRateRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbol, string AsOfDate) {
            this.Header = Header;
            this.Country = Country;
            this.Symbol = Symbol;
            this.AsOfDate = AsOfDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOfficialRateResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetOfficialRateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRateBidAsk GetOfficialRateResult;
        
        public GetOfficialRateResponse() {
        }
        
        public GetOfficialRateResponse(XigniteTest.RemoteGlobalCurrencies.HistoricalRateBidAsk GetOfficialRateResult) {
            this.GetOfficialRateResult = GetOfficialRateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOfficialRates", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetOfficialRatesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Country;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string Symbols;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string AsOfDate;
        
        public GetOfficialRatesRequest() {
        }
        
        public GetOfficialRatesRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbols, string AsOfDate) {
            this.Header = Header;
            this.Country = Country;
            this.Symbols = Symbols;
            this.AsOfDate = AsOfDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOfficialRatesResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetOfficialRatesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRateBidAsk[] GetOfficialRatesResult;
        
        public GetOfficialRatesResponse() {
        }
        
        public GetOfficialRatesResponse(XigniteTest.RemoteGlobalCurrencies.HistoricalRateBidAsk[] GetOfficialRatesResult) {
            this.GetOfficialRatesResult = GetOfficialRatesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOfficialHistoricalRates", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetOfficialHistoricalRatesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Country;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string Symbols;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string AsOfDate;
        
        public GetOfficialHistoricalRatesRequest() {
        }
        
        public GetOfficialHistoricalRatesRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbols, string AsOfDate) {
            this.Header = Header;
            this.Country = Country;
            this.Symbols = Symbols;
            this.AsOfDate = AsOfDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOfficialHistoricalRatesResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetOfficialHistoricalRatesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetOfficialHistoricalRatesResult;
        
        public GetOfficialHistoricalRatesResponse() {
        }
        
        public GetOfficialHistoricalRatesResponse(XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetOfficialHistoricalRatesResult) {
            this.GetOfficialHistoricalRatesResult = GetOfficialHistoricalRatesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTick", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetTickRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string AsOfDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string AsOfTime;
        
        public GetTickRequest() {
        }
        
        public GetTickRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string AsOfTime) {
            this.Header = Header;
            this.Symbol = Symbol;
            this.AsOfDate = AsOfDate;
            this.AsOfTime = AsOfTime;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTickResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetTickResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Tick GetTickResult;
        
        public GetTickResponse() {
        }
        
        public GetTickResponse(XigniteTest.RemoteGlobalCurrencies.Tick GetTickResult) {
            this.GetTickResult = GetTickResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTicks", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetTicksRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string AsOfDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string StartTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=3)]
        public string EndTime;
        
        public GetTicksRequest() {
        }
        
        public GetTicksRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string StartTime, string EndTime) {
            this.Header = Header;
            this.Symbol = Symbol;
            this.AsOfDate = AsOfDate;
            this.StartTime = StartTime;
            this.EndTime = EndTime;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTicksResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetTicksResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Tick[] GetTicksResult;
        
        public GetTicksResponse() {
        }
        
        public GetTicksResponse(XigniteTest.RemoteGlobalCurrencies.Tick[] GetTicksResult) {
            this.GetTicksResult = GetTicksResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBar", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetBarRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string AsOfDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string AsOfTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=3)]
        public string PriceType;
        
        public GetBarRequest() {
        }
        
        public GetBarRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string AsOfTime, string PriceType) {
            this.Header = Header;
            this.Symbol = Symbol;
            this.AsOfDate = AsOfDate;
            this.AsOfTime = AsOfTime;
            this.PriceType = PriceType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBarResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetBarResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.Bar GetBarResult;
        
        public GetBarResponse() {
        }
        
        public GetBarResponse(XigniteTest.RemoteGlobalCurrencies.Bar GetBarResult) {
            this.GetBarResult = GetBarResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetChartBars", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetChartBarsRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string StartTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string EndTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=3)]
        public string PriceType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=4)]
        public string Precision;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=5)]
        public int Period;
        
        public GetChartBarsRequest() {
        }
        
        public GetChartBarsRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string StartTime, string EndTime, string PriceType, string Precision, int Period) {
            this.Header = Header;
            this.Symbol = Symbol;
            this.StartTime = StartTime;
            this.EndTime = EndTime;
            this.PriceType = PriceType;
            this.Precision = Precision;
            this.Period = Period;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetChartBarsResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetChartBarsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.CurrencyChartBars GetChartBarsResult;
        
        public GetChartBarsResponse() {
        }
        
        public GetChartBarsResponse(XigniteTest.RemoteGlobalCurrencies.CurrencyChartBars GetChartBarsResult) {
            this.GetChartBarsResult = GetChartBarsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLondonHistoricalRatesRange", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetLondonHistoricalRatesRangeRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.xignite.com/services/")]
        public XigniteTest.RemoteGlobalCurrencies.Header Header;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public string Symbol;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=1)]
        public string StartDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=2)]
        public string EndDate;
        
        public GetLondonHistoricalRatesRangeRequest() {
        }
        
        public GetLondonHistoricalRatesRangeRequest(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string StartDate, string EndDate) {
            this.Header = Header;
            this.Symbol = Symbol;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLondonHistoricalRatesRangeResponse", WrapperNamespace="http://www.xignite.com/services/", IsWrapped=true)]
    public partial class GetLondonHistoricalRatesRangeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xignite.com/services/", Order=0)]
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetLondonHistoricalRatesRangeResult;
        
        public GetLondonHistoricalRatesRangeResponse() {
        }
        
        public GetLondonHistoricalRatesRangeResponse(XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetLondonHistoricalRatesRangeResult) {
            this.GetLondonHistoricalRatesRangeResult = GetLondonHistoricalRatesRangeResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface XigniteGlobalCurrenciesSoapChannel : XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class XigniteGlobalCurrenciesSoapClient : System.ServiceModel.ClientBase<XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap>, XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap {
        
        public XigniteGlobalCurrenciesSoapClient() {
        }
        
        public XigniteGlobalCurrenciesSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public XigniteGlobalCurrenciesSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public XigniteGlobalCurrenciesSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public XigniteGlobalCurrenciesSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.ListActiveCurrencies(XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesRequest request) {
            return base.Channel.ListActiveCurrencies(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Currencies ListActiveCurrencies(XigniteTest.RemoteGlobalCurrencies.Header Header) {
            XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesRequest();
            inValue.Header = Header;
            XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).ListActiveCurrencies(inValue);
            return retVal.ListActiveCurrenciesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.ListActiveCurrenciesAsync(XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesRequest request) {
            return base.Channel.ListActiveCurrenciesAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesResponse> ListActiveCurrenciesAsync(XigniteTest.RemoteGlobalCurrencies.Header Header) {
            XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.ListActiveCurrenciesRequest();
            inValue.Header = Header;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).ListActiveCurrenciesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.ConvertRealTimeValue(XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueRequest request) {
            return base.Channel.ConvertRealTimeValue(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.RateConversion ConvertRealTimeValue(XigniteTest.RemoteGlobalCurrencies.Header Header, string From, string To, double Amount) {
            XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueRequest inValue = new XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueRequest();
            inValue.Header = Header;
            inValue.From = From;
            inValue.To = To;
            inValue.Amount = Amount;
            XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).ConvertRealTimeValue(inValue);
            return retVal.ConvertRealTimeValueResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.ConvertRealTimeValueAsync(XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueRequest request) {
            return base.Channel.ConvertRealTimeValueAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueResponse> ConvertRealTimeValueAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string From, string To, double Amount) {
            XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueRequest inValue = new XigniteTest.RemoteGlobalCurrencies.ConvertRealTimeValueRequest();
            inValue.Header = Header;
            inValue.From = From;
            inValue.To = To;
            inValue.Amount = Amount;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).ConvertRealTimeValueAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetHistoricalRatesRange(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeRequest request) {
            return base.Channel.GetHistoricalRatesRange(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetHistoricalRatesRange(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string StartDate, string EndDate, string FixingTime, string PeriodType, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.StartDate = StartDate;
            inValue.EndDate = EndDate;
            inValue.FixingTime = FixingTime;
            inValue.PeriodType = PeriodType;
            inValue.PriceType = PriceType;
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetHistoricalRatesRange(inValue);
            return retVal.GetHistoricalRatesRangeResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetHistoricalRatesRangeAsync(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeRequest request) {
            return base.Channel.GetHistoricalRatesRangeAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeResponse> GetHistoricalRatesRangeAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string StartDate, string EndDate, string FixingTime, string PeriodType, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangeRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.StartDate = StartDate;
            inValue.EndDate = EndDate;
            inValue.FixingTime = FixingTime;
            inValue.PeriodType = PeriodType;
            inValue.PriceType = PriceType;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetHistoricalRatesRangeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetRealTimeRate(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateRequest request) {
            return base.Channel.GetRealTimeRate(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Rate GetRealTimeRate(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetRealTimeRate(inValue);
            return retVal.GetRealTimeRateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetRealTimeRateAsync(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateRequest request) {
            return base.Channel.GetRealTimeRateAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateResponse> GetRealTimeRateAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetRealTimeRateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetRealTimeRates(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesRequest request) {
            return base.Channel.GetRealTimeRates(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Rate[] GetRealTimeRates(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetRealTimeRates(inValue);
            return retVal.GetRealTimeRatesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetRealTimeRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesRequest request) {
            return base.Channel.GetRealTimeRatesAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesResponse> GetRealTimeRatesAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetRealTimeRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetRealTimeRatesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetRealTimeRateTable(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableRequest request) {
            return base.Channel.GetRealTimeRateTable(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.RateTable GetRealTimeRateTable(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            inValue.PriceType = PriceType;
            XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetRealTimeRateTable(inValue);
            return retVal.GetRealTimeRateTableResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetRealTimeRateTableAsync(XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableRequest request) {
            return base.Channel.GetRealTimeRateTableAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableResponse> GetRealTimeRateTableAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetRealTimeRateTableRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            inValue.PriceType = PriceType;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetRealTimeRateTableAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetBarsResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetBars(XigniteTest.RemoteGlobalCurrencies.GetBarsRequest request) {
            return base.Channel.GetBars(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Bar[] GetBars(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string StartTime, string EndTime, string PriceType, string TickPrecision, int TickPeriods) {
            XigniteTest.RemoteGlobalCurrencies.GetBarsRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetBarsRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.StartTime = StartTime;
            inValue.EndTime = EndTime;
            inValue.PriceType = PriceType;
            inValue.TickPrecision = TickPrecision;
            inValue.TickPeriods = TickPeriods;
            XigniteTest.RemoteGlobalCurrencies.GetBarsResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetBars(inValue);
            return retVal.GetBarsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBarsResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetBarsAsync(XigniteTest.RemoteGlobalCurrencies.GetBarsRequest request) {
            return base.Channel.GetBarsAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBarsResponse> GetBarsAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string StartTime, string EndTime, string PriceType, string TickPrecision, int TickPeriods) {
            XigniteTest.RemoteGlobalCurrencies.GetBarsRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetBarsRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.StartTime = StartTime;
            inValue.EndTime = EndTime;
            inValue.PriceType = PriceType;
            inValue.TickPrecision = TickPrecision;
            inValue.TickPeriods = TickPeriods;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetBarsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetForwardRateResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetForwardRate(XigniteTest.RemoteGlobalCurrencies.GetForwardRateRequest request) {
            return base.Channel.GetForwardRate(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.ForwardRate GetForwardRate(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            XigniteTest.RemoteGlobalCurrencies.GetForwardRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetForwardRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            XigniteTest.RemoteGlobalCurrencies.GetForwardRateResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetForwardRate(inValue);
            return retVal.GetForwardRateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetForwardRateResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetForwardRateAsync(XigniteTest.RemoteGlobalCurrencies.GetForwardRateRequest request) {
            return base.Channel.GetForwardRateAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetForwardRateResponse> GetForwardRateAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            XigniteTest.RemoteGlobalCurrencies.GetForwardRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetForwardRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetForwardRateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetHistoricalRate(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateRequest request) {
            return base.Channel.GetHistoricalRate(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate GetHistoricalRate(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string FixingTime, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.FixingTime = FixingTime;
            inValue.PriceType = PriceType;
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetHistoricalRate(inValue);
            return retVal.GetHistoricalRateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetHistoricalRateAsync(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateRequest request) {
            return base.Channel.GetHistoricalRateAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateResponse> GetHistoricalRateAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string FixingTime, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetHistoricalRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.FixingTime = FixingTime;
            inValue.PriceType = PriceType;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetHistoricalRateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.ListCurrenciesResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.ListCurrencies(XigniteTest.RemoteGlobalCurrencies.ListCurrenciesRequest request) {
            return base.Channel.ListCurrencies(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Currencies ListCurrencies(XigniteTest.RemoteGlobalCurrencies.Header Header) {
            XigniteTest.RemoteGlobalCurrencies.ListCurrenciesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.ListCurrenciesRequest();
            inValue.Header = Header;
            XigniteTest.RemoteGlobalCurrencies.ListCurrenciesResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).ListCurrencies(inValue);
            return retVal.ListCurrenciesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ListCurrenciesResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.ListCurrenciesAsync(XigniteTest.RemoteGlobalCurrencies.ListCurrenciesRequest request) {
            return base.Channel.ListCurrenciesAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ListCurrenciesResponse> ListCurrenciesAsync(XigniteTest.RemoteGlobalCurrencies.Header Header) {
            XigniteTest.RemoteGlobalCurrencies.ListCurrenciesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.ListCurrenciesRequest();
            inValue.Header = Header;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).ListCurrenciesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetAllRealTimeRates(XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesRequest request) {
            return base.Channel.GetAllRealTimeRates(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Rate[] GetAllRealTimeRates(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetAllRealTimeRates(inValue);
            return retVal.GetAllRealTimeRatesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetAllRealTimeRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesRequest request) {
            return base.Channel.GetAllRealTimeRatesAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesResponse> GetAllRealTimeRatesAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetAllRealTimeRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetAllRealTimeRatesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetLatestCrossRate(XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateRequest request) {
            return base.Channel.GetLatestCrossRate(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Rate GetLatestCrossRate(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetLatestCrossRate(inValue);
            return retVal.GetLatestCrossRateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetLatestCrossRateAsync(XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateRequest request) {
            return base.Channel.GetLatestCrossRateAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateResponse> GetLatestCrossRateAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetLatestCrossRateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetLatestCrossRates(XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesRequest request) {
            return base.Channel.GetLatestCrossRates(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Rate[] GetLatestCrossRates(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetLatestCrossRates(inValue);
            return retVal.GetLatestCrossRatesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetLatestCrossRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesRequest request) {
            return base.Channel.GetLatestCrossRatesAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesResponse> GetLatestCrossRatesAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetLatestCrossRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetLatestCrossRatesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetBestCrossRate(XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateRequest request) {
            return base.Channel.GetBestCrossRate(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Rate GetBestCrossRate(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetBestCrossRate(inValue);
            return retVal.GetBestCrossRateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetBestCrossRateAsync(XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateRequest request) {
            return base.Channel.GetBestCrossRateAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateResponse> GetBestCrossRateAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol) {
            XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetBestCrossRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetBestCrossRateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetBestCrossRates(XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesRequest request) {
            return base.Channel.GetBestCrossRates(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Rate[] GetBestCrossRates(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetBestCrossRates(inValue);
            return retVal.GetBestCrossRatesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetBestCrossRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesRequest request) {
            return base.Channel.GetBestCrossRatesAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesResponse> GetBestCrossRatesAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols) {
            XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetBestCrossRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetBestCrossRatesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.ConvertHistoricalValue(XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueRequest request) {
            return base.Channel.ConvertHistoricalValue(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.RateConversion ConvertHistoricalValue(XigniteTest.RemoteGlobalCurrencies.Header Header, string From, string To, double Amount, string AsOfDate, string FixingTime) {
            XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueRequest inValue = new XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueRequest();
            inValue.Header = Header;
            inValue.From = From;
            inValue.To = To;
            inValue.Amount = Amount;
            inValue.AsOfDate = AsOfDate;
            inValue.FixingTime = FixingTime;
            XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).ConvertHistoricalValue(inValue);
            return retVal.ConvertHistoricalValueResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.ConvertHistoricalValueAsync(XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueRequest request) {
            return base.Channel.ConvertHistoricalValueAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueResponse> ConvertHistoricalValueAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string From, string To, double Amount, string AsOfDate, string FixingTime) {
            XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueRequest inValue = new XigniteTest.RemoteGlobalCurrencies.ConvertHistoricalValueRequest();
            inValue.Header = Header;
            inValue.From = From;
            inValue.To = To;
            inValue.Amount = Amount;
            inValue.AsOfDate = AsOfDate;
            inValue.FixingTime = FixingTime;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).ConvertHistoricalValueAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetLatestHistoricalRate(XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateRequest request) {
            return base.Channel.GetLatestHistoricalRate(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate GetLatestHistoricalRate(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string FixingTime, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.FixingTime = FixingTime;
            inValue.PriceType = PriceType;
            XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetLatestHistoricalRate(inValue);
            return retVal.GetLatestHistoricalRateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetLatestHistoricalRateAsync(XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateRequest request) {
            return base.Channel.GetLatestHistoricalRateAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateResponse> GetLatestHistoricalRateAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string FixingTime, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRateRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.FixingTime = FixingTime;
            inValue.PriceType = PriceType;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetLatestHistoricalRateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetLatestHistoricalRates(XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesRequest request) {
            return base.Channel.GetLatestHistoricalRates(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetLatestHistoricalRates(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string AsOfDate, string FixingTime, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            inValue.AsOfDate = AsOfDate;
            inValue.FixingTime = FixingTime;
            inValue.PriceType = PriceType;
            XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetLatestHistoricalRates(inValue);
            return retVal.GetLatestHistoricalRatesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetLatestHistoricalRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesRequest request) {
            return base.Channel.GetLatestHistoricalRatesAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesResponse> GetLatestHistoricalRatesAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string AsOfDate, string FixingTime, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetLatestHistoricalRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            inValue.AsOfDate = AsOfDate;
            inValue.FixingTime = FixingTime;
            inValue.PriceType = PriceType;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetLatestHistoricalRatesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetHistoricalRates(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRequest request) {
            return base.Channel.GetHistoricalRates(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetHistoricalRates(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string AsOfDate, string FixingTime, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            inValue.AsOfDate = AsOfDate;
            inValue.FixingTime = FixingTime;
            inValue.PriceType = PriceType;
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetHistoricalRates(inValue);
            return retVal.GetHistoricalRatesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetHistoricalRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRequest request) {
            return base.Channel.GetHistoricalRatesAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesResponse> GetHistoricalRatesAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string AsOfDate, string FixingTime, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            inValue.AsOfDate = AsOfDate;
            inValue.FixingTime = FixingTime;
            inValue.PriceType = PriceType;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetHistoricalRatesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetHistoricalRatesRanges(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesRequest request) {
            return base.Channel.GetHistoricalRatesRanges(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetHistoricalRatesRanges(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string StartDate, string EndDate, string FixingTime, string PeriodType, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            inValue.StartDate = StartDate;
            inValue.EndDate = EndDate;
            inValue.FixingTime = FixingTime;
            inValue.PeriodType = PeriodType;
            inValue.PriceType = PriceType;
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetHistoricalRatesRanges(inValue);
            return retVal.GetHistoricalRatesRangesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetHistoricalRatesRangesAsync(XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesRequest request) {
            return base.Channel.GetHistoricalRatesRangesAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesResponse> GetHistoricalRatesRangesAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbols, string StartDate, string EndDate, string FixingTime, string PeriodType, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetHistoricalRatesRangesRequest();
            inValue.Header = Header;
            inValue.Symbols = Symbols;
            inValue.StartDate = StartDate;
            inValue.EndDate = EndDate;
            inValue.FixingTime = FixingTime;
            inValue.PeriodType = PeriodType;
            inValue.PriceType = PriceType;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetHistoricalRatesRangesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetOfficialHistoricalRate(XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateRequest request) {
            return base.Channel.GetOfficialHistoricalRate(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate GetOfficialHistoricalRate(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbol, string AsOfDate) {
            XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateRequest();
            inValue.Header = Header;
            inValue.Country = Country;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetOfficialHistoricalRate(inValue);
            return retVal.GetOfficialHistoricalRateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetOfficialHistoricalRateAsync(XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateRequest request) {
            return base.Channel.GetOfficialHistoricalRateAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateResponse> GetOfficialHistoricalRateAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbol, string AsOfDate) {
            XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRateRequest();
            inValue.Header = Header;
            inValue.Country = Country;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetOfficialHistoricalRateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetOfficialRateResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetOfficialRate(XigniteTest.RemoteGlobalCurrencies.GetOfficialRateRequest request) {
            return base.Channel.GetOfficialRate(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRateBidAsk GetOfficialRate(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbol, string AsOfDate) {
            XigniteTest.RemoteGlobalCurrencies.GetOfficialRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetOfficialRateRequest();
            inValue.Header = Header;
            inValue.Country = Country;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            XigniteTest.RemoteGlobalCurrencies.GetOfficialRateResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetOfficialRate(inValue);
            return retVal.GetOfficialRateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialRateResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetOfficialRateAsync(XigniteTest.RemoteGlobalCurrencies.GetOfficialRateRequest request) {
            return base.Channel.GetOfficialRateAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialRateResponse> GetOfficialRateAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbol, string AsOfDate) {
            XigniteTest.RemoteGlobalCurrencies.GetOfficialRateRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetOfficialRateRequest();
            inValue.Header = Header;
            inValue.Country = Country;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetOfficialRateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetOfficialRates(XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesRequest request) {
            return base.Channel.GetOfficialRates(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRateBidAsk[] GetOfficialRates(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbols, string AsOfDate) {
            XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesRequest();
            inValue.Header = Header;
            inValue.Country = Country;
            inValue.Symbols = Symbols;
            inValue.AsOfDate = AsOfDate;
            XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetOfficialRates(inValue);
            return retVal.GetOfficialRatesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetOfficialRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesRequest request) {
            return base.Channel.GetOfficialRatesAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesResponse> GetOfficialRatesAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbols, string AsOfDate) {
            XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetOfficialRatesRequest();
            inValue.Header = Header;
            inValue.Country = Country;
            inValue.Symbols = Symbols;
            inValue.AsOfDate = AsOfDate;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetOfficialRatesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetOfficialHistoricalRates(XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesRequest request) {
            return base.Channel.GetOfficialHistoricalRates(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetOfficialHistoricalRates(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbols, string AsOfDate) {
            XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesRequest();
            inValue.Header = Header;
            inValue.Country = Country;
            inValue.Symbols = Symbols;
            inValue.AsOfDate = AsOfDate;
            XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetOfficialHistoricalRates(inValue);
            return retVal.GetOfficialHistoricalRatesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetOfficialHistoricalRatesAsync(XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesRequest request) {
            return base.Channel.GetOfficialHistoricalRatesAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesResponse> GetOfficialHistoricalRatesAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Country, string Symbols, string AsOfDate) {
            XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetOfficialHistoricalRatesRequest();
            inValue.Header = Header;
            inValue.Country = Country;
            inValue.Symbols = Symbols;
            inValue.AsOfDate = AsOfDate;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetOfficialHistoricalRatesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetTickResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetTick(XigniteTest.RemoteGlobalCurrencies.GetTickRequest request) {
            return base.Channel.GetTick(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Tick GetTick(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string AsOfTime) {
            XigniteTest.RemoteGlobalCurrencies.GetTickRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetTickRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.AsOfTime = AsOfTime;
            XigniteTest.RemoteGlobalCurrencies.GetTickResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetTick(inValue);
            return retVal.GetTickResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetTickResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetTickAsync(XigniteTest.RemoteGlobalCurrencies.GetTickRequest request) {
            return base.Channel.GetTickAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetTickResponse> GetTickAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string AsOfTime) {
            XigniteTest.RemoteGlobalCurrencies.GetTickRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetTickRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.AsOfTime = AsOfTime;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetTickAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetTicksResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetTicks(XigniteTest.RemoteGlobalCurrencies.GetTicksRequest request) {
            return base.Channel.GetTicks(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Tick[] GetTicks(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string StartTime, string EndTime) {
            XigniteTest.RemoteGlobalCurrencies.GetTicksRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetTicksRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.StartTime = StartTime;
            inValue.EndTime = EndTime;
            XigniteTest.RemoteGlobalCurrencies.GetTicksResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetTicks(inValue);
            return retVal.GetTicksResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetTicksResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetTicksAsync(XigniteTest.RemoteGlobalCurrencies.GetTicksRequest request) {
            return base.Channel.GetTicksAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetTicksResponse> GetTicksAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string StartTime, string EndTime) {
            XigniteTest.RemoteGlobalCurrencies.GetTicksRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetTicksRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.StartTime = StartTime;
            inValue.EndTime = EndTime;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetTicksAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetBarResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetBar(XigniteTest.RemoteGlobalCurrencies.GetBarRequest request) {
            return base.Channel.GetBar(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.Bar GetBar(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string AsOfTime, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetBarRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetBarRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.AsOfTime = AsOfTime;
            inValue.PriceType = PriceType;
            XigniteTest.RemoteGlobalCurrencies.GetBarResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetBar(inValue);
            return retVal.GetBarResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBarResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetBarAsync(XigniteTest.RemoteGlobalCurrencies.GetBarRequest request) {
            return base.Channel.GetBarAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetBarResponse> GetBarAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string AsOfDate, string AsOfTime, string PriceType) {
            XigniteTest.RemoteGlobalCurrencies.GetBarRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetBarRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.AsOfDate = AsOfDate;
            inValue.AsOfTime = AsOfTime;
            inValue.PriceType = PriceType;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetBarAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetChartBarsResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetChartBars(XigniteTest.RemoteGlobalCurrencies.GetChartBarsRequest request) {
            return base.Channel.GetChartBars(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.CurrencyChartBars GetChartBars(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string StartTime, string EndTime, string PriceType, string Precision, int Period) {
            XigniteTest.RemoteGlobalCurrencies.GetChartBarsRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetChartBarsRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.StartTime = StartTime;
            inValue.EndTime = EndTime;
            inValue.PriceType = PriceType;
            inValue.Precision = Precision;
            inValue.Period = Period;
            XigniteTest.RemoteGlobalCurrencies.GetChartBarsResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetChartBars(inValue);
            return retVal.GetChartBarsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetChartBarsResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetChartBarsAsync(XigniteTest.RemoteGlobalCurrencies.GetChartBarsRequest request) {
            return base.Channel.GetChartBarsAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetChartBarsResponse> GetChartBarsAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string StartTime, string EndTime, string PriceType, string Precision, int Period) {
            XigniteTest.RemoteGlobalCurrencies.GetChartBarsRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetChartBarsRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.StartTime = StartTime;
            inValue.EndTime = EndTime;
            inValue.PriceType = PriceType;
            inValue.Precision = Precision;
            inValue.Period = Period;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetChartBarsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeResponse XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetLondonHistoricalRatesRange(XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeRequest request) {
            return base.Channel.GetLondonHistoricalRatesRange(request);
        }
        
        public XigniteTest.RemoteGlobalCurrencies.HistoricalRate[] GetLondonHistoricalRatesRange(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string StartDate, string EndDate) {
            XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.StartDate = StartDate;
            inValue.EndDate = EndDate;
            XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeResponse retVal = ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetLondonHistoricalRatesRange(inValue);
            return retVal.GetLondonHistoricalRatesRangeResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeResponse> XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap.GetLondonHistoricalRatesRangeAsync(XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeRequest request) {
            return base.Channel.GetLondonHistoricalRatesRangeAsync(request);
        }
        
        public System.Threading.Tasks.Task<XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeResponse> GetLondonHistoricalRatesRangeAsync(XigniteTest.RemoteGlobalCurrencies.Header Header, string Symbol, string StartDate, string EndDate) {
            XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeRequest inValue = new XigniteTest.RemoteGlobalCurrencies.GetLondonHistoricalRatesRangeRequest();
            inValue.Header = Header;
            inValue.Symbol = Symbol;
            inValue.StartDate = StartDate;
            inValue.EndDate = EndDate;
            return ((XigniteTest.RemoteGlobalCurrencies.XigniteGlobalCurrenciesSoap)(this)).GetLondonHistoricalRatesRangeAsync(inValue);
        }
    }
}
