//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated LoyaltyWare.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

package com.brierley.loyaltyware.clientlib;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;
import java.util.ArrayList;
import javax.xml.namespace.*;
import java.util.concurrent.Semaphore;

import com.brierley.loyaltyware.clientlib.domainmodel.*;
import com.brierley.loyaltyware.clientlib.domainmodel.client.*;
import com.brierley.loyaltyware.clientlib.domainmodel.framework.*;

public class LWIntegrationSvcClientManager {

	// Begin - Enumerations
	public enum Language {
		English, French, Spanish, German, Russian
	};

	public enum MemberSearch {
		MemberID, CardID, EmailAddress, PhoneNumber, AlternateID, LastName, Username, PostalCode
	};
	
	public enum RewardType {
		Earned, Entitlement
	};

	public enum ConsumptionPolicy {
		NoAction, Consume, Hold
	};

	public enum RewardFulfillmentOption {
		Printed, Mobile, Electronic, ThirdParty
	};
	
	// End - Enumerations

	// Begin - Private fields
	private String _url;
	private String _source;
	private String _srcEnv;
	private LWXmlSerializer _serializer = null;
	private LWLogger _logger = null;
	private int _timeout = 30000; // milliseconds
	private String _clientVersion = "4.5.4.6";

	private ArrayList<ILWIntegrationService> _proxyPool = new ArrayList<ILWIntegrationService>();
	private Semaphore _sempahore = null;
	// End - Private fields

	// Begin Proxy Helpers
	private synchronized void createProxyPool(int poolSize) throws MalformedURLException
	{
		_proxyPool.clear();
		URL url = new URL(_url);
		QName qname = new QName("urn:Brierley.LoyaltyWare.LWIntegrationSvc", "LWIntegrationService");
		for(int i = 0; i< poolSize; i++)
		{
			LWIntegrationService svc = new LWIntegrationService(url,qname);
			ILWIntegrationService proxy = svc.getPort(ILWIntegrationService.class);			

			//use the url that has been provided, not the url from the WSDL
			((javax.xml.ws.BindingProvider)proxy).getRequestContext().put(javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY, _url);

			_proxyPool.add(proxy);
		}
		_sempahore = new Semaphore(poolSize);
	}
	
	private synchronized ILWIntegrationService getProxy()
	{		
		return _proxyPool.get(0);		
	}
	
	private synchronized void putProxy(ILWIntegrationService proxy)
	{
		_proxyPool.add(proxy);		
	}
	
	private ILWIntegrationService reserveProxy() throws InterruptedException
	{
		_sempahore.acquire();
		_logger.writeMessage("Proxies left after reserve = " + _sempahore.availablePermits());
		return getProxy();		
	}
	
	private void reclaimProxy(ILWIntegrationService proxy)
	{
		putProxy(proxy);
		_sempahore.release();
		_logger.writeMessage("Proxies available after release = " + _sempahore.availablePermits());
	}

	private void initialize(String url,		 
			String source, 
			int proxyPoolSize,
			Boolean writeToConsole, 
			String outputFile)throws LWClientException{
		_url = url;
		_source = source;
		if (source == null || source.trim().length() == 0) {
			throw new LWClientException("Please provide a client source.", 1);
		}

		if ( source.length() > 50 ){
			throw new LWClientException("source cannot be more than 50 characters.", 2002);
		}

		try {
			_srcEnv = "Java Version: " + System.getProperty("java.version");
			new java.net.URL(_url);
			createProxyPool(proxyPoolSize);
		} catch (MalformedURLException e) {
			throw new LWClientException("Malformed URL", e, 1);
		}

		_serializer = new LWXmlSerializer();
		_logger = new LWLogger(writeToConsole, outputFile);
		
	}

	// End Proxy Helpers

	// Begin - Construction & Initialization
	
	public LWIntegrationSvcClientManager(
		String url,		 
		String source, 
		Boolean writeToConsole, 
		String outputFile) throws LWClientException {
		initialize(url, source, 10, writeToConsole, outputFile);
	}

	public LWIntegrationSvcClientManager(
		String url,		 
		String source, 
		int proxyPoolSize,
		Boolean writeToConsole, 
		String outputFile) throws LWClientException {
		initialize(url, source, proxyPoolSize, writeToConsole, outputFile);
	}

	// End - Construction & Initialization

	// Begin - properties

	public String getClientVersion() {
	   return _clientVersion;
	}

	public int getTimeout() {
	   return _timeout;
	}

	public void setTimeout(int timeout) {
	   _timeout = timeout;
	}
	// End - properties
	
	// Begin - Generic

	public LWAPIResponse execute(String operationName, String payload, LWCDISExtraArgs extraArgs)
			throws LWClientException {
		String method = "execute";		
		
		_logger.writeMessage("Invoking method " + method);
		_logger.writeMessage(payload);

		ILWIntegrationService proxy = null;
		LWAPIResponse response = null;		
		try {
		    if ( !LWUtils.isEmptyString(operationName) && operationName.length() > 50 ){
				throw new LWClientException("operationName cannot be more than 50 characters.", 2002);
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			proxy = reserveProxy();			
			response = proxy.execute(operationName, _source, _srcEnv, extraArgs.getExternalId(), payload);
		} catch (InterruptedException e) {
		} finally {
			if ( proxy != null){				
				reclaimProxy(proxy);
			}
		}				
		return response;
	}

	// End - Generic
	
	// Begin - Client Specific API							
		/// <summary>
		/// 
		/// </summary>
		
										
		public AEGetTentativePointsOut aEGetTentativePoints(String loyaltynumber, Date transactiondate, Long storenumber, TransactionDetailStruct[] transactiondetail, TransactionTenderStruct[] transactiontender, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AEGetTentativePoints";

			AEGetTentativePointsIn input = new AEGetTentativePointsIn();
			input.setLoyaltyNumber(loyaltynumber);
			input.setTransactionDate(transactiondate);
			input.setStoreNumber(storenumber);
			input.setTransactionDetail(transactiondetail);
			input.setTransactionTender(transactiontender);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AEGetTentativePointsOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Member addMember(Member member, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AddMember";

			String payload = _serializer.serializeMethodParm(method, "member", member);
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method); 
			           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Member)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Member updateMember(Member member, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "UpdateMember";

			String payload = _serializer.serializeMethodParm(method, "member", member);
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method); 
			           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Member)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Boolean authenticateMember(String identitytype, String identity, String password, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AuthenticateMember";

			AuthenticateMemberIn input = new AuthenticateMemberIn();
			input.setIdentityType(identitytype);
			input.setIdentity(identity);
			input.setPassword(password);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Boolean)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Member[] getMembers(String[] membersearchtype, String[] searchvalue, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMembers";

			GetMembersIn input = new GetMembersIn();
			input.setMemberSearchType(membersearchtype);
			input.setSearchValue(searchvalue);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Member[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public GetMembersExtOut getMembersExt(MemberSearchParmsStruct[] membersearchparms, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMembersExt";

			GetMembersExtIn input = new GetMembersExtIn();
			input.setMemberSearchParms(membersearchparms);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (GetMembersExtOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void associateMemberSocialHandles(String memberidentity, MemberSocialHandleStruct[] membersocialhandle, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AssociateMemberSocialHandles";

			AssociateMemberSocialHandlesIn input = new AssociateMemberSocialHandlesIn();
			input.setMemberIdentity(memberidentity);
			input.setMemberSocialHandle(membersocialhandle);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MemberSocialHandleStruct[] getMemberSocialHandles(String memberidentity, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberSocialHandles";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "MemberIdentity", memberidentity); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MemberSocialHandleStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void activateMember(String memberidentity, Date effectivedate, String updatememberstatusreason, Boolean activateinactivecards, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "ActivateMember";

			ActivateMemberIn input = new ActivateMemberIn();
			input.setMemberIdentity(memberidentity);
			input.setEffectiveDate(effectivedate);
			input.setUpdateMemberStatusReason(updatememberstatusreason);
			input.setActivateInactiveCards(activateinactivecards);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void deactivateMember(String memberidentity, Date effectivedate, String updatememberstatusreason, Boolean deactivateactivecards, Boolean expirepoints, Boolean canceltiers, Boolean cancelrewards, Boolean cancelpromotions, Boolean cancelbonuses, Boolean cancelcoupons, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "DeactivateMember";

			DeactivateMemberIn input = new DeactivateMemberIn();
			input.setMemberIdentity(memberidentity);
			input.setEffectiveDate(effectivedate);
			input.setUpdateMemberStatusReason(updatememberstatusreason);
			input.setDeactivateActiveCards(deactivateactivecards);
			input.setExpirePoints(expirepoints);
			input.setCancelTiers(canceltiers);
			input.setCancelRewards(cancelrewards);
			input.setCancelPromotions(cancelpromotions);
			input.setCancelBonuses(cancelbonuses);
			input.setCancelCoupons(cancelcoupons);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void terminateMember(String memberidentity, Date effectivedate, String updatememberstatusreason, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "TerminateMember";

			TerminateMemberIn input = new TerminateMemberIn();
			input.setMemberIdentity(memberidentity);
			input.setEffectiveDate(effectivedate);
			input.setUpdateMemberStatusReason(updatememberstatusreason);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void lockdownMember(String memberidentity, Date effectivedate, String updatememberstatusreason, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "LockdownMember";

			LockdownMemberIn input = new LockdownMemberIn();
			input.setMemberIdentity(memberidentity);
			input.setEffectiveDate(effectivedate);
			input.setUpdateMemberStatusReason(updatememberstatusreason);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void convertToMember(String memberidentity, Date effectivedate, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "ConvertToMember";

			ConvertToMemberIn input = new ConvertToMemberIn();
			input.setMemberIdentity(memberidentity);
			input.setEffectiveDate(effectivedate);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Member mergeMembers(String memberidentity1, String memberidentity2, String loyaltyevent, String loyaltycurrency, Date expirationdate, MemberMergeOptionsStruct membermergeoptions, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "MergeMembers";

			MergeMembersIn input = new MergeMembersIn();
			input.setMemberIdentity1(memberidentity1);
			input.setMemberIdentity2(memberidentity2);
			input.setLoyaltyEvent(loyaltyevent);
			input.setLoyaltyCurrency(loyaltycurrency);
			input.setExpirationDate(expirationdate);
			input.setMemberMergeOptions(membermergeoptions);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Member)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void activateCard(String cardid, Date effectivedate, String updatecardstatusreason, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "ActivateCard";

			ActivateCardIn input = new ActivateCardIn();
			input.setCardID(cardid);
			input.setEffectiveDate(effectivedate);
			input.setUpdateCardStatusReason(updatecardstatusreason);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void deactivateCard(String cardid, Date effectivedate, String updatecardstatusreason, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "DeactivateCard";

			DeactivateCardIn input = new DeactivateCardIn();
			input.setCardID(cardid);
			input.setEffectiveDate(effectivedate);
			input.setUpdateCardStatusReason(updatecardstatusreason);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void cancelCard(String cardid, Date effectivedate, String updatecardstatusreason, Boolean deactivatemember, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "CancelCard";

			CancelCardIn input = new CancelCardIn();
			input.setCardID(cardid);
			input.setEffectiveDate(effectivedate);
			input.setUpdateCardStatusReason(updatecardstatusreason);
			input.setDeactivateMember(deactivatemember);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Member replaceCard(String cardid, String replacementcardid, Boolean transferpoints, Date effectivedate, String updatecardstatusreason, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "ReplaceCard";

			ReplaceCardIn input = new ReplaceCardIn();
			input.setCardID(cardid);
			input.setReplacementCardID(replacementcardid);
			input.setTransferPoints(transferpoints);
			input.setEffectiveDate(effectivedate);
			input.setUpdateCardStatusReason(updatecardstatusreason);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Member)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Member transferCard(String cardid, String memberidentity, Boolean makecardprimary, Boolean deactivatemember, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "TransferCard";

			TransferCardIn input = new TransferCardIn();
			input.setCardID(cardid);
			input.setMemberIdentity(memberidentity);
			input.setMakeCardPrimary(makecardprimary);
			input.setDeactivateMember(deactivatemember);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Member)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void changeCardExpirationDate(String cardid, Date newexpirationdate, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "ChangeCardExpirationDate";

			ChangeCardExpirationDateIn input = new ChangeCardExpirationDateIn();
			input.setCardID(cardid);
			input.setNewExpirationDate(newexpirationdate);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public String[] getLoyaltyCurrencyNames(LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetLoyaltyCurrencyNames";

			String payload = ""; 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (String[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public LoyaltyCurrencyStruct[] getLoyaltyCurrencies(LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetLoyaltyCurrencies";

			String payload = ""; 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (LoyaltyCurrencyStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public String[] getLoyaltyEventNames(LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetLoyaltyEventNames";

			String payload = ""; 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (String[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public LoyaltyEventStruct[] getLoyaltyEvents(LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetLoyaltyEvents";

			String payload = ""; 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (LoyaltyEventStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public String[] getTierNames(LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetTierNames";

			String payload = ""; 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (String[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public TierDefStruct[] getTiers(LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetTiers";

			String payload = ""; 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (TierDefStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public GetAccountSummaryOut getAccountSummary(String memberidentity, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetAccountSummary";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "MemberIdentity", memberidentity); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (GetAccountSummaryOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AwardLoyaltyCurrencyOut awardLoyaltyCurrency(String cardid, String loyaltyevent, String loyaltycurrency, java.math.BigDecimal currencyamount, Date transactiondate, Date expirationdate, String note, String changedby, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AwardLoyaltyCurrency";

			AwardLoyaltyCurrencyIn input = new AwardLoyaltyCurrencyIn();
			input.setCardID(cardid);
			input.setLoyaltyEvent(loyaltyevent);
			input.setLoyaltyCurrency(loyaltycurrency);
			input.setCurrencyAmount(currencyamount);
			input.setTransactionDate(transactiondate);
			input.setExpirationDate(expirationdate);
			input.setNote(note);
			input.setChangedBy(changedby);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AwardLoyaltyCurrencyOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Integer getAccountActivityCount(String memberidentity, Date startdate, Date enddate, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetAccountActivityCount";

			GetAccountActivityCountIn input = new GetAccountActivityCountIn();
			input.setMemberIdentity(memberidentity);
			input.setStartDate(startdate);
			input.setEndDate(enddate);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Integer)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public GetAccountActivitySummaryOut getAccountActivitySummary(String memberidentity, Date startdate, Date enddate, Boolean getpointshistory, Boolean getotherpointshistory, Integer summarystartindex, Integer summarybatchsize, Integer otherstartindex, Integer otherbatchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetAccountActivitySummary";

			GetAccountActivitySummaryIn input = new GetAccountActivitySummaryIn();
			input.setMemberIdentity(memberidentity);
			input.setStartDate(startdate);
			input.setEndDate(enddate);
			input.setGetPointsHistory(getpointshistory);
			input.setGetOtherPointsHistory(getotherpointshistory);
			input.setSummaryStartIndex(summarystartindex);
			input.setSummaryBatchSize(summarybatchsize);
			input.setOtherStartIndex(otherstartindex);
			input.setOtherBatchSize(otherbatchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (GetAccountActivitySummaryOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AccountActivityDetailsStruct[] getAccountActivityDetails(String txnheaderid, Boolean getpointshistory, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetAccountActivityDetails";

			GetAccountActivityDetailsIn input = new GetAccountActivityDetailsIn();
			input.setTxnHeaderId(txnheaderid);
			input.setGetPointsHistory(getpointshistory);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AccountActivityDetailsStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public java.math.BigDecimal getLoyaltyCurrencyBalance(String memberidentity, String[] cardids, String[] loyaltycurrencynames, String[] loyaltyeventnames, Date activitystartdate, Date activityenddate, Date pointawardstartdate, Date pointawardenddate, String awardedby, String location, String ownertype, Long ownerid, Long[] rowkeys, Boolean earnedpointsonly, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetLoyaltyCurrencyBalance";

			GetLoyaltyCurrencyBalanceIn input = new GetLoyaltyCurrencyBalanceIn();
			input.setMemberIdentity(memberidentity);
			input.setCardIDs(cardids);
			input.setLoyaltyCurrencyNames(loyaltycurrencynames);
			input.setLoyaltyEventNames(loyaltyeventnames);
			input.setActivityStartDate(activitystartdate);
			input.setActivityEndDate(activityenddate);
			input.setPointAwardStartDate(pointawardstartdate);
			input.setPointAwardEndDate(pointawardenddate);
			input.setAwardedBy(awardedby);
			input.setLocation(location);
			input.setOwnerType(ownertype);
			input.setOwnerId(ownerid);
			input.setRowKeys(rowkeys);
			input.setEarnedPointsOnly(earnedpointsonly);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (java.math.BigDecimal)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Integer getLoyaltyCurrencyTransactionCount(String memberidentity, String cardid, Date startdate, Date enddate, String[] loyaltycurrencynames, String[] loyaltyeventnames, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetLoyaltyCurrencyTransactionCount";

			GetLoyaltyCurrencyTransactionCountIn input = new GetLoyaltyCurrencyTransactionCountIn();
			input.setMemberIdentity(memberidentity);
			input.setCardID(cardid);
			input.setStartDate(startdate);
			input.setEndDate(enddate);
			input.setLoyaltyCurrencyNames(loyaltycurrencynames);
			input.setLoyaltyEventNames(loyaltyeventnames);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Integer)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public PointsHistoryStruct[] getLoyaltyCurrencyTransactions(String memberidentity, String cardid, Date startdate, Date enddate, String[] loyaltycurrencynames, String[] loyaltyeventnames, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetLoyaltyCurrencyTransactions";

			GetLoyaltyCurrencyTransactionsIn input = new GetLoyaltyCurrencyTransactionsIn();
			input.setMemberIdentity(memberidentity);
			input.setCardID(cardid);
			input.setStartDate(startdate);
			input.setEndDate(enddate);
			input.setLoyaltyCurrencyNames(loyaltycurrencynames);
			input.setLoyaltyEventNames(loyaltyeventnames);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (PointsHistoryStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AddMemberRewardsOut addMemberRewards(String memberidentity, String cardid, String firstname, String lastname, String emailaddress, String addresslineone, String addresslinetwo, String addresslinethree, String addresslinefour, String city, String stateorprovince, String ziporpostalcode, String county, String country, String channel, String changedby, RewardOrderInfoStruct[] rewardorderinfo, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AddMemberRewards";

			AddMemberRewardsIn input = new AddMemberRewardsIn();
			input.setMemberIdentity(memberidentity);
			input.setCardID(cardid);
			input.setFirstName(firstname);
			input.setLastName(lastname);
			input.setEmailAddress(emailaddress);
			input.setAddressLineOne(addresslineone);
			input.setAddressLineTwo(addresslinetwo);
			input.setAddressLineThree(addresslinethree);
			input.setAddressLineFour(addresslinefour);
			input.setCity(city);
			input.setStateOrProvince(stateorprovince);
			input.setZipOrPostalCode(ziporpostalcode);
			input.setCounty(county);
			input.setCountry(country);
			input.setChannel(channel);
			input.setChangedBy(changedby);
			input.setRewardOrderInfo(rewardorderinfo);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AddMemberRewardsOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MemberRewardSummaryStruct[] getMemberRewardsSummary(String memberidentity, Long categoryid, Date startdate, Date enddate, Integer startindex, Integer batchsize, Boolean unredeemedonly, Boolean unexpiredonly, String language, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberRewardsSummary";

			GetMemberRewardsSummaryIn input = new GetMemberRewardsSummaryIn();
			input.setMemberIdentity(memberidentity);
			input.setCategoryId(categoryid);
			input.setStartDate(startdate);
			input.setEndDate(enddate);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			input.setUnRedeemedOnly(unredeemedonly);
			input.setUnexpiredOnly(unexpiredonly);
			input.setLanguage(language);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MemberRewardSummaryStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public GetMemberRewardSummaryByIdOut getMemberRewardSummaryById(Long memberrewardid, String language, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberRewardSummaryById";

			GetMemberRewardSummaryByIdIn input = new GetMemberRewardSummaryByIdIn();
			input.setMemberRewardId(memberrewardid);
			input.setLanguage(language);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (GetMemberRewardSummaryByIdOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public GetMemberRewardSummaryByCertOut getMemberRewardSummaryByCert(String certnumber, String language, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberRewardSummaryByCert";

			GetMemberRewardSummaryByCertIn input = new GetMemberRewardSummaryByCertIn();
			input.setCertNumber(certnumber);
			input.setLanguage(language);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (GetMemberRewardSummaryByCertOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MemberRewardOrderStruct[] getMemberRewards(String memberidentity, Long categoryid, Date startdate, Date enddate, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberRewards";

			GetMemberRewardsIn input = new GetMemberRewardsIn();
			input.setMemberIdentity(memberidentity);
			input.setCategoryId(categoryid);
			input.setStartDate(startdate);
			input.setEndDate(enddate);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MemberRewardOrderStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MemberRewardOrderStruct getMemberRewardsByOrderNumber(String ordernumber, Boolean isfporder, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberRewardsByOrderNumber";

			GetMemberRewardsByOrderNumberIn input = new GetMemberRewardsByOrderNumberIn();
			input.setOrderNumber(ordernumber);
			input.setIsFPOrder(isfporder);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MemberRewardOrderStruct)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void redeemMemberReward(Long memberrewardid, java.math.BigDecimal availablebalance, Date expirationdate, Date redemptiondate, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "RedeemMemberReward";

			RedeemMemberRewardIn input = new RedeemMemberRewardIn();
			input.setMemberRewardID(memberrewardid);
			input.setAvailableBalance(availablebalance);
			input.setExpirationDate(expirationdate);
			input.setRedemptionDate(redemptiondate);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Boolean isMemberRewardRedeemed(Long memberrewardid, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "IsMemberRewardRedeemed";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "MemberRewardID", memberrewardid); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Boolean)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public java.math.BigDecimal cancelMemberReward(Long memberrewardid, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "CancelMemberReward";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "MemberRewardID", memberrewardid); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (java.math.BigDecimal)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public java.math.BigDecimal cancelMemberRewardOrder(String ordernumber, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "CancelMemberRewardOrder";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "OrderNumber", ordernumber); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (java.math.BigDecimal)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void returnMemberRewardOrder(String ordernumber, Boolean isfporder, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "ReturnMemberRewardOrder";

			ReturnMemberRewardOrderIn input = new ReturnMemberRewardOrderIn();
			input.setOrderNumber(ordernumber);
			input.setIsFPOrder(isfporder);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public ShippingAddressStruct[] getAllRewardOrderShippingAddresses(String memberidentity, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetAllRewardOrderShippingAddresses";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "MemberIdentity", memberidentity); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (ShippingAddressStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public RewardCategoryStruct[] getRewardCategories(Long categoryid, Boolean visibleinln, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetRewardCategories";

			GetRewardCategoriesIn input = new GetRewardCategoriesIn();
			input.setCategoryId(categoryid);
			input.setVisibleInLN(visibleinln);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (RewardCategoryStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Integer getRewardCatalogCount(Boolean activeonly, String tier, Long categoryid, ContentSearchAttributesStruct[] contentsearchattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetRewardCatalogCount";

			GetRewardCatalogCountIn input = new GetRewardCatalogCountIn();
			input.setActiveOnly(activeonly);
			input.setTier(tier);
			input.setCategoryId(categoryid);
			input.setContentSearchAttributes(contentsearchattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Integer)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public RewardCatalogSummaryStruct[] getRewardCatalog(Boolean activeonly, String tier, String language, Long categoryid, Boolean returnrewardcategory, ContentSearchAttributesStruct[] contentsearchattributes, Integer startindex, Integer batchsize, java.math.BigDecimal currencytoearnlow, java.math.BigDecimal currencytoearnhigh, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetRewardCatalog";

			GetRewardCatalogIn input = new GetRewardCatalogIn();
			input.setActiveOnly(activeonly);
			input.setTier(tier);
			input.setLanguage(language);
			input.setCategoryId(categoryid);
			input.setReturnRewardCategory(returnrewardcategory);
			input.setContentSearchAttributes(contentsearchattributes);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			input.setCurrencyToEarnLow(currencytoearnlow);
			input.setCurrencyToEarnHigh(currencytoearnhigh);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (RewardCatalogSummaryStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public RewardCatalogItemStruct getRewardCatalogItem(Long rewardid, String language, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetRewardCatalogItem";

			GetRewardCatalogItemIn input = new GetRewardCatalogItemIn();
			input.setRewardID(rewardid);
			input.setLanguage(language);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (RewardCatalogItemStruct)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Integer getMessageDefinitionCount(Boolean activeonly, ContentSearchAttributesStruct[] contentsearchattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMessageDefinitionCount";

			GetMessageDefinitionCountIn input = new GetMessageDefinitionCountIn();
			input.setActiveOnly(activeonly);
			input.setContentSearchAttributes(contentsearchattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Integer)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MessageDefinitionStruct[] getMessageDefinitions(String language, String channel, Boolean active, ContentSearchAttributesStruct[] contentsearchattributes, Boolean returnattributes, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMessageDefinitions";

			GetMessageDefinitionsIn input = new GetMessageDefinitionsIn();
			input.setLanguage(language);
			input.setChannel(channel);
			input.setActive(active);
			input.setContentSearchAttributes(contentsearchattributes);
			input.setReturnAttributes(returnattributes);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MessageDefinitionStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MessageDefinitionStruct getMessageDefinition(Long messagedefid, String language, String channel, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMessageDefinition";

			GetMessageDefinitionIn input = new GetMessageDefinitionIn();
			input.setMessageDefId(messagedefid);
			input.setLanguage(language);
			input.setChannel(channel);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MessageDefinitionStruct)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MemberMessageStruct[] getMemberMessages(String memberidentity, String language, String channel, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberMessages";

			GetMemberMessagesIn input = new GetMemberMessagesIn();
			input.setMemberIdentity(memberidentity);
			input.setLanguage(language);
			input.setChannel(channel);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MemberMessageStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Integer getCouponDefinitionCount(Boolean activeonly, ContentSearchAttributesStruct[] contentsearchattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetCouponDefinitionCount";

			GetCouponDefinitionCountIn input = new GetCouponDefinitionCountIn();
			input.setActiveOnly(activeonly);
			input.setContentSearchAttributes(contentsearchattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Integer)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public CouponDefinitionStruct[] getCouponDefinitions(String language, String channel, Boolean active, ContentSearchAttributesStruct[] contentsearchattributes, Boolean returnattributes, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetCouponDefinitions";

			GetCouponDefinitionsIn input = new GetCouponDefinitionsIn();
			input.setLanguage(language);
			input.setChannel(channel);
			input.setActive(active);
			input.setContentSearchAttributes(contentsearchattributes);
			input.setReturnAttributes(returnattributes);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (CouponDefinitionStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public CouponDefinitionStruct getCouponDefinition(Long coupondefid, String channel, String language, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetCouponDefinition";

			GetCouponDefinitionIn input = new GetCouponDefinitionIn();
			input.setCouponDefId(coupondefid);
			input.setChannel(channel);
			input.setLanguage(language);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (CouponDefinitionStruct)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MemberCouponStruct[] getMemberCoupons(String memberidentity, String language, String channel, String typecode, Integer startindex, Integer batchsize, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberCoupons";

			GetMemberCouponsIn input = new GetMemberCouponsIn();
			input.setMemberIdentity(memberidentity);
			input.setLanguage(language);
			input.setChannel(channel);
			input.setTypeCode(typecode);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MemberCouponStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MemberCouponStruct getMemberCouponById(Long id, String language, String channel, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberCouponById";

			GetMemberCouponByIdIn input = new GetMemberCouponByIdIn();
			input.setId(id);
			input.setLanguage(language);
			input.setChannel(channel);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MemberCouponStruct)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MemberCouponStruct getMemberCouponByCertNmbr(String certnmbr, String language, String channel, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberCouponByCertNmbr";

			GetMemberCouponByCertNmbrIn input = new GetMemberCouponByCertNmbrIn();
			input.setCertNmbr(certnmbr);
			input.setLanguage(language);
			input.setChannel(channel);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MemberCouponStruct)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public RedeemMemberCouponByIdOut redeemMemberCouponById(Long membercouponid, String channel, String language, Date redemptiondate, Integer timesused, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "RedeemMemberCouponById";

			RedeemMemberCouponByIdIn input = new RedeemMemberCouponByIdIn();
			input.setMemberCouponId(membercouponid);
			input.setChannel(channel);
			input.setLanguage(language);
			input.setRedemptionDate(redemptiondate);
			input.setTimesUsed(timesused);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (RedeemMemberCouponByIdOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public RedeemMemberCouponByCertNmbrOut redeemMemberCouponByCertNmbr(String certnmbr, String channel, String language, Date redemptiondate, Integer timesused, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "RedeemMemberCouponByCertNmbr";

			RedeemMemberCouponByCertNmbrIn input = new RedeemMemberCouponByCertNmbrIn();
			input.setCertNmbr(certnmbr);
			input.setChannel(channel);
			input.setLanguage(language);
			input.setRedemptionDate(redemptiondate);
			input.setTimesUsed(timesused);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (RedeemMemberCouponByCertNmbrOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void unredeemMemberCouponById(Long membercouponid, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "UnredeemMemberCouponById";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "MemberCouponId", membercouponid); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void unredeemMemberCouponByCertNmbr(String certnmbr, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "UnredeemMemberCouponByCertNmbr";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "CertNmbr", certnmbr); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Integer getBonusDefinitionCount(Boolean activeonly, ContentSearchAttributesStruct[] contentsearchattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetBonusDefinitionCount";

			GetBonusDefinitionCountIn input = new GetBonusDefinitionCountIn();
			input.setActiveOnly(activeonly);
			input.setContentSearchAttributes(contentsearchattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Integer)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public BonusDefinitionStruct[] getBonusDefinitions(String language, String channel, Boolean active, ContentSearchAttributesStruct[] contentsearchattributes, Boolean returnattributes, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetBonusDefinitions";

			GetBonusDefinitionsIn input = new GetBonusDefinitionsIn();
			input.setLanguage(language);
			input.setChannel(channel);
			input.setActive(active);
			input.setContentSearchAttributes(contentsearchattributes);
			input.setReturnAttributes(returnattributes);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (BonusDefinitionStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public BonusDefinitionStruct getBonusDefinition(Long bonusdefid, String channel, String language, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetBonusDefinition";

			GetBonusDefinitionIn input = new GetBonusDefinitionIn();
			input.setBonusDefId(bonusdefid);
			input.setChannel(channel);
			input.setLanguage(language);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (BonusDefinitionStruct)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MemberBonusStruct[] getMemberBonuses(String memberidentity, String language, String channel, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberBonuses";

			GetMemberBonusesIn input = new GetMemberBonusesIn();
			input.setMemberIdentity(memberidentity);
			input.setLanguage(language);
			input.setChannel(channel);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MemberBonusStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public GetMemberWalletOut getMemberWallet(String memberidentity, Boolean returnrewards, Boolean returncoupons, Boolean returnpromotions, Long categoryid, Date startdate, Date enddate, Boolean unredeemedonly, Boolean unexpiredonly, Boolean returncontentattributes, Boolean returnpromotiondefinition, String language, String channel, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberWallet";

			GetMemberWalletIn input = new GetMemberWalletIn();
			input.setMemberIdentity(memberidentity);
			input.setReturnRewards(returnrewards);
			input.setReturnCoupons(returncoupons);
			input.setReturnPromotions(returnpromotions);
			input.setCategoryId(categoryid);
			input.setStartDate(startdate);
			input.setEndDate(enddate);
			input.setUnRedeemedOnly(unredeemedonly);
			input.setUnexpiredOnly(unexpiredonly);
			input.setReturnContentAttributes(returncontentattributes);
			input.setReturnPromotionDefinition(returnpromotiondefinition);
			input.setLanguage(language);
			input.setChannel(channel);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (GetMemberWalletOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public RequestCreditTxnSearchOut requestCreditTxnSearch(String txntype, RequestCreditTxnSearchParametersStruct[] requestcredittxnsearchparameters, String memberidentity, String cardid, String note, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "RequestCreditTxnSearch";

			RequestCreditTxnSearchIn input = new RequestCreditTxnSearchIn();
			input.setTxnType(txntype);
			input.setRequestCreditTxnSearchParameters(requestcredittxnsearchparameters);
			input.setMemberIdentity(memberidentity);
			input.setCardID(cardid);
			input.setNote(note);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (RequestCreditTxnSearchOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public java.math.BigDecimal applyTxnCredit(String memberidentity, String cardid, String txnheaderid, String note, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "ApplyTxnCredit";

			ApplyTxnCreditIn input = new ApplyTxnCreditIn();
			input.setMemberIdentity(memberidentity);
			input.setCardID(cardid);
			input.setTxnHeaderId(txnheaderid);
			input.setNote(note);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (java.math.BigDecimal)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Integer getPromotionDefinitionsCount(Boolean active, ContentSearchAttributesStruct[] contentsearchattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetPromotionDefinitionsCount";

			GetPromotionDefinitionsCountIn input = new GetPromotionDefinitionsCountIn();
			input.setActive(active);
			input.setContentSearchAttributes(contentsearchattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Integer)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public PromotionDefinitionStruct[] getPromotionDefinitions(String language, String channel, Boolean active, ContentSearchAttributesStruct[] contentsearchattributes, Boolean returnattributes, Integer startindex, Integer batchsize, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetPromotionDefinitions";

			GetPromotionDefinitionsIn input = new GetPromotionDefinitionsIn();
			input.setLanguage(language);
			input.setChannel(channel);
			input.setActive(active);
			input.setContentSearchAttributes(contentsearchattributes);
			input.setReturnAttributes(returnattributes);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (PromotionDefinitionStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public PromotionDefinitionStruct getPromotionDefinition(Long promotiondefid, String promotioncode, String language, String channel, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetPromotionDefinition";

			GetPromotionDefinitionIn input = new GetPromotionDefinitionIn();
			input.setPromotionDefId(promotiondefid);
			input.setPromotionCode(promotioncode);
			input.setLanguage(language);
			input.setChannel(channel);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (PromotionDefinitionStruct)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MemberPromotionStruct addMemberPromotion(String memberidentity, String promotioncode, String certificatenmbr, Boolean returndefinition, String language, String channel, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AddMemberPromotion";

			AddMemberPromotionIn input = new AddMemberPromotionIn();
			input.setMemberIdentity(memberidentity);
			input.setPromotionCode(promotioncode);
			input.setCertificateNmbr(certificatenmbr);
			input.setReturnDefinition(returndefinition);
			input.setLanguage(language);
			input.setChannel(channel);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MemberPromotionStruct)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Integer getMemberPromotionsCount(String memberidentity, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberPromotionsCount";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "MemberIdentity", memberidentity); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Integer)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public MemberPromotionStruct[] getMemberPromotions(String memberidentity, Integer startindex, Integer batchsize, Boolean returndefinition, String language, String channel, Boolean returnattributes, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetMemberPromotions";

			GetMemberPromotionsIn input = new GetMemberPromotionsIn();
			input.setMemberIdentity(memberidentity);
			input.setStartIndex(startindex);
			input.setBatchSize(batchsize);
			input.setReturnDefinition(returndefinition);
			input.setLanguage(language);
			input.setChannel(channel);
			input.setReturnAttributes(returnattributes);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (MemberPromotionStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public TriggerUserEventOut triggerUserEvent(String memberidentity, String eventname, String channel, String language, ClientContextStruct[] clientcontext, Boolean returncoupons, Boolean returnallcoupons, Boolean returnbonuses, Boolean returnallbonuses, Boolean returnpromotions, Boolean returnallpromotions, Boolean returnmessages, Boolean returnallmessages, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "TriggerUserEvent";

			TriggerUserEventIn input = new TriggerUserEventIn();
			input.setMemberIdentity(memberidentity);
			input.setEventName(eventname);
			input.setChannel(channel);
			input.setLanguage(language);
			input.setClientContext(clientcontext);
			input.setReturnCoupons(returncoupons);
			input.setReturnAllCoupons(returnallcoupons);
			input.setReturnBonuses(returnbonuses);
			input.setReturnAllBonuses(returnallbonuses);
			input.setReturnPromotions(returnpromotions);
			input.setReturnAllPromotions(returnallpromotions);
			input.setReturnMessages(returnmessages);
			input.setReturnAllMessages(returnallmessages);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (TriggerUserEventOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public void sendTriggeredEmail(String memberidentity, String emailname, String recipientemail, Boolean asynchronous, AdditionalFieldsStruct[] additionalfields, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "SendTriggeredEmail";

			SendTriggeredEmailIn input = new SendTriggeredEmailIn();
			input.setMemberIdentity(memberidentity);
			input.setEmailName(emailname);
			input.setRecipientEmail(recipientemail);
			input.setAsynchronous(asynchronous);
			input.setAdditionalFields(additionalfields);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return;
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Long createCSNote(String memberidentity, String note, Long createdby, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "CreateCSNote";

			CreateCSNoteIn input = new CreateCSNoteIn();
			input.setMemberIdentity(memberidentity);
			input.setNote(note);
			input.setCreatedBy(createdby);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Long)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public CSNoteStruct[] getCSNotes(String memberidentity, Date startdate, Date enddate, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetCSNotes";

			GetCSNotesIn input = new GetCSNotesIn();
			input.setMemberIdentity(memberidentity);
			input.setStartDate(startdate);
			input.setEndDate(enddate);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (CSNoteStruct[])_serializer.deserializeResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public GetServiceInfoOut getServiceInfo(LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "GetServiceInfo";

			String payload = ""; 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (GetServiceInfoOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public Member aEGetMember(String loyaltynumber, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AEGetMember";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "LoyaltyNumber", loyaltynumber); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (Member)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AERegisterMemberOut aERegisterMember(String loyaltynumber, String firstname, String lastname, String address1, String address2, String city, String state, String postalcode, String countrycode, String birthdate, String emailaddress, String mobilephone, Boolean smsoptin, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AERegisterMember";

			AERegisterMemberIn input = new AERegisterMemberIn();
			input.setLoyaltyNumber(loyaltynumber);
			input.setFirstName(firstname);
			input.setLastName(lastname);
			input.setAddress1(address1);
			input.setAddress2(address2);
			input.setCity(city);
			input.setState(state);
			input.setPostalCode(postalcode);
			input.setCountryCode(countrycode);
			input.setBirthDate(birthdate);
			input.setEmailAddress(emailaddress);
			input.setMobilePhone(mobilephone);
			input.setSMSOptIn(smsoptin);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AERegisterMemberOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AEAutoRegisterOut aEAutoRegister(String firstname, String lastname, String loyaltynumber, String emailaddress, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AEAutoRegister";

			AEAutoRegisterIn input = new AEAutoRegisterIn();
			input.setFirstName(firstname);
			input.setLastName(lastname);
			input.setLoyaltyNumber(loyaltynumber);
			input.setEmailAddress(emailaddress);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AEAutoRegisterOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AEValidateMemberOut aEValidateMember(String loyaltynumber, String firstname, String lastname, String address1, String postalcode, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AEValidateMember";

			AEValidateMemberIn input = new AEValidateMemberIn();
			input.setLoyaltynumber(loyaltynumber);
			input.setFirstName(firstname);
			input.setLastName(lastname);
			input.setAddress1(address1);
			input.setPostalCode(postalcode);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AEValidateMemberOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public GetLoyaltyProfileStruct aEGetLoyaltyProfile(String loyaltynumber, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AEGetLoyaltyProfile";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "LoyaltyNumber", loyaltynumber); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (GetLoyaltyProfileStruct)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AEGetAccountSummaryOut aEGetAccountSummary(String loyaltynumber, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AEGetAccountSummary";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "LoyaltyNumber", loyaltynumber); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AEGetAccountSummaryOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AEPOSGetAccountSummaryOut aEPOSGetAccountSummary(String loyaltynumber, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AEPOSGetAccountSummary";

			String payload = _serializer.serializeMethodPrimitiveParm(method, "LoyaltyNumber", loyaltynumber); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AEPOSGetAccountSummaryOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AERequestPointStoreOut aERequestPointStore(String loyaltynumber, String registernumber, String storenumber, String totalpayment, String transactiondate, String transactionnumber, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AERequestPointStore";

			AERequestPointStoreIn input = new AERequestPointStoreIn();
			input.setLoyaltyNumber(loyaltynumber);
			input.setRegisterNumber(registernumber);
			input.setStoreNumber(storenumber);
			input.setTotalPayment(totalpayment);
			input.setTransactionDate(transactiondate);
			input.setTransactionNumber(transactionnumber);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AERequestPointStoreOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AERequestPointOnlineOut aERequestPointOnline(String loyaltynumber, String ordernumber, String orderamount, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AERequestPointOnline";

			AERequestPointOnlineIn input = new AERequestPointOnlineIn();
			input.setLoyaltyNumber(loyaltynumber);
			input.setOrderNumber(ordernumber);
			input.setOrderAmount(orderamount);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AERequestPointOnlineOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AEGetAccountActivityOut aEGetAccountActivity(String loyaltynumber, Date startdate, Date enddate, Integer pagenumber, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AEGetAccountActivity";

			AEGetAccountActivityIn input = new AEGetAccountActivityIn();
			input.setLoyaltyNumber(loyaltynumber);
			input.setStartDate(startdate);
			input.setEndDate(enddate);
			input.setPageNumber(pagenumber);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AEGetAccountActivityOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AEConnectedGetAccountActivityOut aEConnectedGetAccountActivity(String loyaltynumber, Date startdate, Date enddate, Integer pagenumber, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AEConnectedGetAccountActivity";

			AEConnectedGetAccountActivityIn input = new AEConnectedGetAccountActivityIn();
			input.setLoyaltyNumber(loyaltynumber);
			input.setStartDate(startdate);
			input.setEndDate(enddate);
			input.setPageNumber(pagenumber);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AEConnectedGetAccountActivityOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public AEPOSGetAccountActivityOut aEPOSGetAccountActivity(String loyaltynumber, Date startdate, Date enddate, Integer pagenumber, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AEPOSGetAccountActivity";

			AEPOSGetAccountActivityIn input = new AEPOSGetAccountActivityIn();
			input.setLoyaltyNumber(loyaltynumber);
			input.setStartDate(startdate);
			input.setEndDate(enddate);
			input.setPageNumber(pagenumber);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (AEPOSGetAccountActivityOut)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public String aEAddEngagementActivity(String loyaltynumber, String engagementtype, String[] additionalfields, LWCDISExtraArgs extraArgs)
			throws LWClientException, InterruptedException{		
			String method = "AEAddEngagementActivity";

			AEAddEngagementActivityIn input = new AEAddEngagementActivityIn();
			input.setLoyaltyNumber(loyaltynumber);
			input.setEngagementType(engagementtype);
			input.setAdditionalFields(additionalfields);
			String payload = _serializer.serializeMethodParm(method, "input", input); 
			payload = String.format("<%sInParms>%s</%sInParms>", method, payload, method);           
            _logger.writeMessage("\n**** Invoking method " + method);
            _logger.writeMessage(payload);

			ILWIntegrationService proxy = null;
    		LWAPIResponse response = null;
			if ( extraArgs != null ){
				extraArgs.setElapsedTime(0);			
			}
		    if ( extraArgs != null && !LWUtils.isEmptyString(extraArgs.getExternalId()) && extraArgs.getExternalId().length() > 50 ){
				throw new LWClientException("externalId cannot be more than 50 characters.", 2002);
			}
			try {
    			proxy = reserveProxy();				
    			response = proxy.execute(method, _source, _srcEnv, extraArgs.getExternalId(), payload);
    			if (response.getResponseCode() == 0) {
					if ( extraArgs != null ){
    					extraArgs.setElapsedTime(response.getElapsedTime());
    				}					
    				_logger.writeMessage("Response received: "	+ response.getResponseDetail().getValue());					
    				return (String)_serializer.deserializeSingleResponseObject(method, response.getResponseDetail().getValue());
    			} else {
    				_logger.writeMessage("Error invoking method + " + method);
    				_logger.writeMessage("Error code = " + response.getResponseCode());
    				_logger.writeMessage("Error detail: " + response.getResponseDetail());
    				throw new LWClientException(response.getResponseDetail().getValue(), response.getResponseCode(), response.getElapsedTime());
    			}
    		} finally {
    			if ( proxy != null){				
    				reclaimProxy(proxy);
    			}
    		}			            
		}			
// End - Client Specific API		
}
