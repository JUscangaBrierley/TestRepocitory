//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by LoyaltyWare.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using System.Text;
using System.Reflection;

using Brierley.LoyaltyWare.ClientLib.DomainModel;
using Brierley.LoyaltyWare.ClientLib.DomainModel.Framework;
using Brierley.LoyaltyWare.ClientLib.DomainModel.Client;

namespace Brierley.LoyaltyWare.ClientLib
{
	public class LWXmlSerializer
	{
		#region Fields
        private LWLogger _logger = null;
		private XNamespace ans = "http://AmericanEagle.MemberProcessing.Schemas.AmericanEagle";
		#endregion

		#region Constructor
        public LWXmlSerializer(LWLogger logger)
		{
            _logger = logger;
		}
		#endregion

		#region Helpers

		private DateTime ConvertStringToDate(string dateStr)
		{
			// ISO 8601 format
			DateTime date = DateTime.Parse(dateStr);
			return date;
		}

		private string ConvertDateToString(DateTime dt)
		{
			// ISO 8601 format
			string dateStr = dt.ToString("yyyy-MM-dd'T'HH:mm:ss.fffK");
			return dateStr;
		}

		private bool IsBrowsable(MemberInfo mInfo)
		{
			object[] attributes = mInfo.GetCustomAttributes(false);
			bool browsable = true;
			foreach (object attribute in attributes)
			{
				if (attribute is System.ComponentModel.BrowsableAttribute)
				{
					browsable = ((System.ComponentModel.BrowsableAttribute)attribute).Browsable;
					break;
				}
			}
			return browsable;
		}

		private bool IsRequired(MemberInfo mInfo)
		{
			object[] attributes = mInfo.GetCustomAttributes(false);
			bool isRequired = false;
			foreach (object attribute in attributes)
			{
				if (attribute is LWMetaAttribute)
				{
					isRequired = ((LWMetaAttribute)attribute).IsRequired;
					break;
				}
			}
			return isRequired;
		}

		private int GetStringLength(MemberInfo mInfo)
		{
			object[] attributes = mInfo.GetCustomAttributes(false);
			int stringLength = 0;
			foreach (object attribute in attributes)
			{
				if (attribute is LWMetaAttribute)
				{
					stringLength = ((LWMetaAttribute)attribute).StringLength;
					break;
				}
			}
			return stringLength;
		}

		private bool IsNullableEnum(Type t)
		{
			return t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Nullable<>) && t.GetGenericArguments()[0].IsEnum;
		}

		private Type GetEnumType(Type t)
		{
			if (t.IsEnum)
			{
				return t;
			}
			if (IsNullableEnum(t))
			{
				return t.GetGenericArguments()[0];
			}
			return null;
		}

		public XElement SerializeObjectToXml(XElement thisNode, LWAttributeSetContainer thisObject)
		{
			PropertyInfo[] pi = thisObject.GetType().GetProperties();
			foreach (PropertyInfo info in pi)
			{
				if (!IsBrowsable(info))
				{
					continue;
				}
				string attValue = string.Empty;
				object val = info.GetValue(thisObject, null);
				if (val != null)
				{
					if (val is DateTime)
					{
						System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo("en-US");
						attValue = ConvertDateToString((DateTime)val);
					}
					else if (val is long || val is Int64)
					{
						attValue = ((Int64)val).ToString();
					}
					else if (info.PropertyType.IsEnum)
					{
						Type t = info.PropertyType; //Type.GetType(info.PropertyType.AssemblyQualifiedName);
						string name = Enum.GetName(t, val);
						if (!string.IsNullOrEmpty(name))
						{
							Type ut = Enum.GetUnderlyingType(t);
							val = Convert.ChangeType(Enum.Parse(t, name), ut);
							attValue = val.ToString();
						}
						else
						{
							// no value was set for the enum.
						}
					}
					else if (IsNullableEnum(info.PropertyType) && val != null)
					{
						Type t = GetEnumType(info.PropertyType);
						string name = Enum.GetName(t, val);
						if (!string.IsNullOrEmpty(name))
						{
							Type ut = Enum.GetUnderlyingType(t);
							val = Convert.ChangeType(Enum.Parse(t, name), ut);
							attValue = val.ToString();
						}
					}
					else if (val is String)
					{
						attValue = (string)val;

						int stringLength = GetStringLength(info);
						if (!string.IsNullOrEmpty(attValue) && stringLength > 0 && attValue.Length > stringLength)
						{
							throw new LWClientException(
								string.Format("Attribute {0} of {1} cannot be more than {2} characters.",
								info.Name, thisObject.GetType().Name, stringLength)) { ErrorCode = 2002 };
						}
					}
					else
					{
						attValue = val.ToString();
					}
				}
				if (string.IsNullOrEmpty(attValue) && IsRequired(info))
				{
					string errorMessage =
					string.Format("{0} of {1} is a required property.  Please provide a valid value.",
					info.Name, thisObject.GetType().Name);
					throw new LWClientException(errorMessage) { ErrorCode = 2003 };
				}
				else
				{
					XAttribute attribute = new XAttribute(info.Name, attValue);
					thisNode.Add(attribute);
				}
				//if (!string.IsNullOrEmpty(attValue))
				//{
				//    XAttribute attribute = new XAttribute(info.Name, attValue);
				//    thisNode.Add(attribute);
				//}
				//else if (IsRequired(info))
				//{
				//    string errorMessage =
				//        string.Format("{0} of {1} is a required property.  Please provide a valid value.",
				//        info.Name, thisObject.GetType().Name);
				//    throw new LWClientException(errorMessage) { ErrorCode = 2003 };
				//}
			}
			ICollection transientNames = thisObject.GetTransientPropertyNames();
		    	if (transientNames != null && transientNames.Count > 0)
			    {
				foreach (string name in transientNames)
				{
				    object value = thisObject.GetTransientProperty(name);
				    XAttribute attribute = new XAttribute(name, value.ToString());
				    thisNode.Add(attribute);
				}
			    }			
			foreach (LWAttributeSetContainer child in thisObject.Children)
			{
				XElement childNode = new XElement(child.GetType().Name);
				childNode = SerializeObjectToXml(childNode, child);
				thisNode.Add(childNode);
			}
			return thisNode;
		}

		public LWAttributeSetContainer DeserializeObjectFromXml(XElement thisNode, LWAttributeSetContainer thisObject)
		{
			Dictionary<string, string> processedAttributes = new Dictionary<string, string>();
			PropertyInfo[] pi = thisObject.GetType().GetProperties();
			foreach (PropertyInfo info in pi)
			{
				processedAttributes.Add(info.Name, info.Name);
				object value = null;
				if (!IsBrowsable(info))
				{
					continue;
				}
				if (!info.CanRead)
				{
					// client cannot set it so no need to transmit it.
					continue;
				}
				XAttribute att = thisNode.Attribute(info.Name);
				if (att != null && !string.IsNullOrEmpty(att.Value))
				{					
					if (info.PropertyType == typeof(DateTime) || info.PropertyType == typeof(DateTime?))
					{
						System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo("en-US");
						value = ConvertStringToDate(att.Value);
					}
					else if (info.PropertyType == typeof(decimal) || info.PropertyType == typeof(decimal?))
					{
						value = decimal.Parse(att.Value);
					}
					else if (info.PropertyType == typeof(long) || info.PropertyType == typeof(long?) ||
						(info.PropertyType == typeof(Int64)))
					{
						value = long.Parse(att.Value);
					}
					else if (info.PropertyType == typeof(int) || info.PropertyType == typeof(int?) ||
									(info.PropertyType == typeof(Int32)))
					{
						value = int.Parse(att.Value);
					}
					else if (info.PropertyType == typeof(bool) || info.PropertyType == typeof(bool?) ||
								(info.PropertyType == typeof(Boolean)))
					{
						value = bool.Parse(att.Value);
					}
					else if (info.PropertyType.IsEnum)
					{
						Type t = info.PropertyType; //Type.GetType(info.PropertyType.AssemblyQualifiedName);
						value = Enum.Parse(t, att.Value);
					}
					else if (IsNullableEnum(info.PropertyType) && !string.IsNullOrEmpty(att.Value))
					{
						Type t = GetEnumType(info.PropertyType);
						value = Enum.Parse(t, att.Value);
					}
					else
					{
						value = att.Value;
					}
					if (info.CanWrite)
					{
						info.SetValue(thisObject, value, null);
					}
					else
					{
						// this property does not have a setter.
						FieldInfo finfo = thisObject.GetType().GetField(info.Name.ToLower(), BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.IgnoreCase);
						if (finfo != null)
						{
							finfo.SetValue(thisObject, value);
						}
					}
				}
			}
			// Now process the remaining unprocessed attributes of this node as transient properties
			foreach (XAttribute att in thisNode.Attributes())
			{
				if (!processedAttributes.ContainsKey(att.Name.LocalName))
				{
					thisObject.UpdateTransientProperty(att.Name.LocalName, att.Value);
				}
			}
			// Process child attribute sets
			foreach (XElement child in thisNode.Nodes().OfType<XElement>())
			{
				LWAttributeSetContainer childObject = null;
				if (child.Name.LocalName == "VirtualCard")
				{
					childObject = new VirtualCard();
				}
				else
				{
					string typeName = string.Format("Brierley.LoyaltyWare.ClientLib.DomainModel.Client.{0}", child.Name.LocalName);
					childObject = (LWAttributeSetContainer)Assembly.GetExecutingAssembly().CreateInstance(typeName);
				}
				childObject = DeserializeObjectFromXml(child, childObject);
				thisObject.Add(childObject);
			}
			return thisObject;
		}

		#endregion

		#region Methods

		#region Serialization methods
		private XElement EncodeParm(XElement node, string name, string type, bool isArray, bool isRequired)
		{
			XAttribute att = new XAttribute("Name", name);
			node.Add(att);
			att = new XAttribute("Type", type);
			node.Add(att);
			att = new XAttribute("IsArray", isArray);
			node.Add(att);
			att = new XAttribute("IsRequired", isRequired);
			node.Add(att);
			return node;
		}

		private XElement AddValue(XElement envelope, object value)
		{
			XElement e = new XElement("Value");
			e.Value = value.ToString();
			envelope.Add(e);
			return envelope;
		}

		public string SerializeMethodPrimitiveParm<T>(string opName, string parmName, T parm)
		{
			XDocument doc = new XDocument();
			XElement envelope = new XElement("Parm");
			doc.Add(envelope);

			string typeName = string.Empty;
			if (parm is bool)
			{
				envelope = EncodeParm(envelope, parmName, "Boolean", false, false);
				AddValue(envelope, parm.ToString());
			}
			else if (parm is long)
			{
				envelope = EncodeParm(envelope, parmName, "Long", false, false);
				AddValue(envelope, parm.ToString());
			}
			else if (parm is DateTime)
			{
				envelope = EncodeParm(envelope, parmName, "Date", false, false);
				DateTime date = ConvertStringToDate(parm.ToString());
				AddValue(envelope, ConvertDateToString(date));
			}
			else if (parm is int)
			{
				envelope = EncodeParm(envelope, parmName, "Integer", false, false);
				AddValue(envelope, parm.ToString());
			}
			else if (parm is decimal)
			{
				envelope = EncodeParm(envelope, parmName, "Decimal", false, false);
				AddValue(envelope, parm.ToString());
			}
			else if (parm is string)
			{
				envelope = EncodeParm(envelope, parmName, "String", false, false);
				AddValue(envelope, parm.ToString());
			}
			return doc.ToString();
		}

		public string SerializeMethodParm(string opName, string parmName, object thisObject)
		{
			XDocument doc = new XDocument();
			XElement envelope = new XElement("Parm");
			doc.Add(envelope);

			if (thisObject is Member)
			{
				envelope = EncodeParm(envelope, parmName, "Member", false, false);
				XElement memberRoot = new XElement(ans + "AttributeSets");
				XElement memberNode = new XElement("Member");
				memberRoot.Add(memberNode);
				envelope.Add(memberRoot);
				memberNode = SerializeObjectToXml(memberNode, (Member)thisObject);
			}
			else if (thisObject is Member[])
			{
				envelope = EncodeParm(envelope, parmName, "Member", true, false);
				XElement memberRoot = new XElement(ans + "AttributeSets");
				Member[] mList = (Member[])thisObject;
				foreach (Member m in mList)
				{
					XElement memberNode = new XElement("Member");
					memberRoot.Add(memberNode);
					memberNode = SerializeObjectToXml(memberNode, m);
				}
				envelope.Add(memberRoot);
			}
            else if (thisObject is LWClientDataObject)
            {
                envelope = EncodeParm(envelope, parmName, "Global", false, false);
                XElement globalRoot = new XElement(ans + "AttributeSets");
                XElement globalNode = new XElement("Global");
                globalRoot.Add(globalNode);
                envelope.Add(globalRoot);
                XElement attSetNode = new XElement(thisObject.GetType().Name);
                globalNode.Add(attSetNode);
                attSetNode = SerializeObjectToXml(attSetNode, (LWClientDataObject)thisObject);
            }
            else if (thisObject is Member[])
            {
                envelope = EncodeParm(envelope, parmName, "Member", true, false);
                XElement globalRoot = new XElement(ans + "AttributeSets");
                LWClientDataObject[] mList = (LWClientDataObject[])thisObject;
                foreach (LWClientDataObject m in mList)
                {
                    XElement globalNode = new XElement("Global");
                    globalRoot.Add(globalNode);
                    XElement attSetNode = new XElement(thisObject.GetType().Name);
                    globalNode.Add(attSetNode);
                    attSetNode = SerializeObjectToXml(attSetNode, m);
                }
                envelope.Add(globalRoot);
            }
			else
			{
				envelope = EncodeParm(envelope, parmName, thisObject.GetType().Name, false, false);

				PropertyInfo[] pi = thisObject.GetType().GetProperties();
				foreach (PropertyInfo info in pi)
				{
					XElement parmRoot = SerializeParm(info, thisObject, 0);
					if (parmRoot != null)
					{
						envelope.Add(parmRoot);
					}
				}
			}
			return doc.ToString();
		}

		private XElement SerializeParm(PropertyInfo info, object thisObject, int level)
		{
			string msg = string.Empty;
			for (int i = 0; i < level; i++)
				msg += "   ";
			msg += string.Format("SerializeParm: {0} {1}", info.PropertyType.Name, info.Name);
            _logger.WriteMessage(msg);
			if (level > 100)
			{
                _logger.WriteMessage("SerializeParm: recursion is too deep: " + level);
				return null;
			}
			XElement parmRoot = null;
			object val = info.GetValue(thisObject, null);
			if (val != null)
			{
				parmRoot = new XElement("Parm");

				#region Member
				if (val is Member)
				{
					parmRoot = EncodeParm(parmRoot, info.Name, "Member", false, IsRequired(info));
					XElement memberRoot = new XElement(ans + "AttributeSets");
					XElement memberNode = new XElement("Member");
					memberRoot.Add(memberNode);
					parmRoot.Add(memberRoot);
					memberNode = SerializeObjectToXml(memberNode, (Member)val);
				}
				else if (val is Member[])
				{
					parmRoot = EncodeParm(parmRoot, info.Name, "Member", true, IsRequired(info));
					XElement memberRoot = new XElement(ans + "AttributeSets");
					XElement memberNode = new XElement("Member");
					memberRoot.Add(memberNode);
					parmRoot.Add(memberRoot);
					memberNode = SerializeObjectToXml(memberNode, (Member)val);
				}
				#endregion

				#region DateTime
				else if (val is DateTime)
				{
					System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo("en-US");
					parmRoot = EncodeParm(parmRoot, info.Name, "Date", false, IsRequired(info));
					XElement e = new XElement("Value");
					e.Value = ConvertDateToString((DateTime)val);
					parmRoot.Add(e);
				}
				else if (val is DateTime[])
				{
					System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo("en-US");
					parmRoot = EncodeParm(parmRoot, info.Name, "Date", true, IsRequired(info));
					foreach (long v in val as long[])
					{
						XElement e = new XElement("Value");
						e.Value = ConvertDateToString((DateTime)val);
						parmRoot.Add(e);
					}
				}
				#endregion

				#region Long
				else if (val is long || val is Int64)
				{
					parmRoot = EncodeParm(parmRoot, info.Name, "Long", false, IsRequired(info));
					XElement e = new XElement("Value");
					e.Value = ((Int64)val).ToString();
					parmRoot.Add(e);
				}
				else if (val is long[] || val is Int64[])
				{
					parmRoot = EncodeParm(parmRoot, info.Name, "Long", true, IsRequired(info));
					foreach (long v in val as long[])
					{
						XElement e = new XElement("Value");
						e.Value = ((Int64)v).ToString();
						parmRoot.Add(e);
					}
				}
				#endregion

				#region String
				else if (val is String)
				{
					parmRoot = EncodeParm(parmRoot, info.Name, "String", false, IsRequired(info));
					XElement e = new XElement("Value");
					e.Value = (String)val;

                    if (string.IsNullOrEmpty(e.Value) && IsRequired(info))
                    {
                        string errorMessage =
                            string.Format("{0} of {1} is a required property.  Please provide a valid value.",
                            info.Name, thisObject.GetType().Name);
                        throw new LWClientException(errorMessage) { ErrorCode = 2003 };
                    }

					parmRoot.Add(e);

					int stringLength = GetStringLength(info);
					if (!string.IsNullOrEmpty(e.Value) && stringLength > 0 && e.Value.Length > stringLength)
					{
						throw new LWClientException(
							string.Format("Parm {0} of {1} cannot be more than {2} characters.",
							info.Name, thisObject.GetType().Name, stringLength)) { ErrorCode = 2002 };
					}
				}
				else if (val is String[])
				{
					parmRoot = EncodeParm(parmRoot, info.Name, "String", true, IsRequired(info));
					foreach (String v in val as String[])
					{
						XElement e = new XElement("Value");
						e.Value = (String)v;
						parmRoot.Add(e);

						int stringLength = GetStringLength(info);
						if (!string.IsNullOrEmpty(e.Value) && stringLength > 0 && e.Value.Length > stringLength)
						{
							throw new LWClientException(
								string.Format("Parm {0} of {1} cannot be more than {2} characters.",
								info.Name, thisObject.GetType().Name, stringLength)) { ErrorCode = 2002 };
						}
					}
				}
				#endregion

				#region Integer
				else if (val is int || val is Int32)
				{
					parmRoot = EncodeParm(parmRoot, info.Name, "Integer", false, IsRequired(info));
					XElement e = new XElement("Value");
					e.Value = ((Int32)val).ToString();
					parmRoot.Add(e);
				}
				else if (val is int[] || val is Int32[])
				{
					parmRoot = EncodeParm(parmRoot, info.Name, "Integer", true, IsRequired(info));
					foreach (int v in val as int[])
					{
						XElement e = new XElement("Value");
						e.Value = ((Int32)v).ToString();
						parmRoot.Add(e);
					}
				}
				#endregion

				#region Decimal
				else if (val is Decimal)
				{
					parmRoot = EncodeParm(parmRoot, info.Name, "Decimal", false, IsRequired(info));
					XElement e = new XElement("Value");
                    e.Value = ((Decimal)val).ToString();
					parmRoot.Add(e);
				}
                else if (val is Decimal[])
				{
                    parmRoot = EncodeParm(parmRoot, info.Name, "Decimal", true, IsRequired(info));
                    foreach (Decimal v in val as Decimal[])
					{
						XElement e = new XElement("Value");
                        e.Value = ((Decimal)v).ToString();
						parmRoot.Add(e);
					}
				}
				#endregion

				#region Boolean
				else if (val is Boolean)
				{
					parmRoot = EncodeParm(parmRoot, info.Name, "Boolean", false, IsRequired(info));
					XElement e = new XElement("Value");
					e.Value = ((Boolean)val).ToString();
					parmRoot.Add(e);
				}
				else if (val is Boolean[])
				{
					parmRoot = EncodeParm(parmRoot, info.Name, "Boolean", true, IsRequired(info));
					foreach (Boolean v in val as Boolean[])
					{
						XElement e = new XElement("Value");
						e.Value = ((Boolean)v).ToString();
						parmRoot.Add(e);
					}
				}
				#endregion

				#region Struct
				else
				{
					// This must be a struct type
					string structName = info.Name;
					string structTypeName = info.PropertyType.Name;
                    _logger.WriteMessage(string.Format("SerializeParm: struct type: {0} {1}", structTypeName, structName));
					if (!structTypeName.EndsWith("[]"))
					{
						object structValue = info.GetValue(thisObject, null);
						parmRoot = EncodeParm(parmRoot, structName, "Struct", false, IsRequired(info));
						PropertyInfo[] pi = info.PropertyType.GetProperties();
						foreach (PropertyInfo subinfo in pi)
						{
							XElement subparmRoot = SerializeParm(subinfo, structValue, level + 1);
							if (subparmRoot != null)
							{
								parmRoot.Add(subparmRoot);
							}
						}
					}
					else
					{
						parmRoot = EncodeParm(parmRoot, structName, "Struct", true, IsRequired(info));
						object structArrayValue = info.GetValue(thisObject, null);
						int numItems = ((Array)structArrayValue).Length;
						for (int itemIndex = 0; itemIndex < numItems; itemIndex++)
						{
							XElement itemElement = new XElement("Parm");
							itemElement = EncodeParm(itemElement, structName, "Struct", false, IsRequired(info));
							object itemValue = ((Array)structArrayValue).GetValue(itemIndex);
							PropertyInfo[] pi = itemValue.GetType().GetProperties();
							foreach (PropertyInfo subinfo in pi)
							{
								XElement subparmRoot = SerializeParm(subinfo, itemValue, level + 1);
								if (subparmRoot != null)
								{
									itemElement.Add(subparmRoot);
								}
							}
							parmRoot.Add(itemElement);
						}
					}
				}
				#endregion

			}
			else if (IsRequired(info))
			{
				string errorMessage =
					string.Format("{0} of {1} is a required property.  Please provide a valid value.",
					info.Name, thisObject.GetType().Name);
				throw new LWClientException(errorMessage) { ErrorCode = 2003 };
			}

			return parmRoot;
		}
		#endregion

		#region Deserialization Methods

		public object DeserializeSingleResponseObject(string opName, string payload)
		{
			object[] list = DeserializeResponseObject(opName, payload);
			if (list != null && list.Length > 0)
			{
				return list[0];
			}
			else
			{
				return null;
			}
		}

		public T[] DeserializeResponseObjectArray<T>(string opName, string payload)
		{
			object[] result = DeserializeResponseObject(opName, payload);
			T[] array = new T[result.Length];
			for (int i = 0; i < result.Length; i++)
			{
				array[i] = (T)result[i];
			}
			return array;
		}

		public object[] DeserializeResponseObject(string opName, string payload)
		{
			string errMsg;
			XDocument doc = XDocument.Parse(payload);
			XElement envelop = doc.Root;
			if (envelop.Name.LocalName != (opName + "OutParms"))
			{
				errMsg = string.Format("Expected {0}OutParms as the envelope.  Found {1}", opName, envelop.Name.LocalName);
				throw new Exception(errMsg);
			}
			XElement inParm = (XElement)envelop.FirstNode;
			if (inParm.Name.LocalName != "Parm")
			{
				errMsg = string.Format("Expected 'Parm' as the enclosing type.  Found {0}", inParm.Name.LocalName);
				throw new Exception(errMsg);
			}

			XAttribute arrayAttr = inParm.Attribute("IsArray");
			bool isArray = arrayAttr == null ? false : bool.Parse(arrayAttr.Value);
			object[] result = null;
			XAttribute typeAttr = inParm.Attribute("Type");
			if (typeAttr.Value == (opName + "Out"))
			{
				if (!isArray)
				{
					result = new object[1];
					result[0] = HydrateObject(envelop.Name.Namespace, inParm);
				}
				else
				{
					// array of out objects
					IEnumerable<XElement> parms = inParm.Elements("Parm");
					if (parms != null)
					{
						result = new object[parms.Count<XElement>()];
						int index = 0;
						foreach (XElement parm in parms)
						{
							result[index++] = HydrateObject(envelop.Name.Namespace, parm);
						}
					}
				}
			}
			else
			{
				// probably return type was a single element
				if (!isArray)
				{
					result = new object[1];
					result[0] = HydrateObject(envelop.Name.Namespace, inParm);
				}
				else
				{
					result = (object[])HydrateObject(envelop.Name.Namespace, inParm);
				}
			}
			return result;
		}

		private object HydrateObject(XNamespace ns, XElement parm)
		{
			object result = null;
			string parmName = parm.Attribute("Name").Value;
			bool isArray = (parm.Attribute("IsArray") != null ? bool.Parse(parm.Attribute("IsArray").Value) : false);
			bool isRequired = (parm.Attribute("IsRequired") != null ? bool.Parse(parm.Attribute("IsRequired").Value) : false);
			XAttribute typeAttr = parm.Attribute("Type");
			string ptypeName = typeAttr.Value;
			if (ptypeName.EndsWith("Out"))
			{
				if (isArray)
				{
					IList<object> results = new List<object>();
					string typeName = string.Format("Brierley.LoyaltyWare.ClientLib.DomainModel.Client.{0}", ptypeName);
					foreach (XElement arrayValue in parm.Elements(ns + "Parm"))
					{
						object thisResult = Assembly.GetExecutingAssembly().CreateInstance(typeName);
						PropertyInfo[] pi = thisResult.GetType().GetProperties();
						IEnumerable<XElement> subparms = arrayValue.Elements(ns + "Parm");
						foreach (PropertyInfo info in pi)
						{
							foreach (XElement subparm in subparms)
							{
								if (subparm.Attribute("Name").Value == info.Name)
								{
									object value = HydrateObject(ns, subparm);
									info.SetValue(thisResult, value, null);
									break;
								}
							}
						}
						results.Add(thisResult);
					}
					result = results.ToArray();
				}
				else
				{
					string typeName = string.Format("Brierley.LoyaltyWare.ClientLib.DomainModel.Client.{0}", ptypeName);
					result = Assembly.GetExecutingAssembly().CreateInstance(typeName);
					PropertyInfo[] pi = result.GetType().GetProperties();
					IEnumerable<XElement> subparms = parm.Elements(ns + "Parm");
					foreach (PropertyInfo info in pi)
					{
						foreach (XElement subparm in subparms)
						{
							if (subparm.Attribute("Name").Value == info.Name)
							{
								object value = HydrateObject(ns, subparm);
								if (value is object[])
								{
									object[] values = value as object[];
									string pTypeName = string.Empty;
									if (info.PropertyType.Name.EndsWith("[]")) // this is an array
									{
										Array a = null;
										if (info.PropertyType.Name.Substring(0, info.PropertyType.Name.Length - 2).EndsWith("Struct"))
										{
											pTypeName = string.Format("Brierley.LoyaltyWare.ClientLib.DomainModel.Client.{0}", info.PropertyType.Name.Substring(0, info.PropertyType.Name.Length - 2));
											object arrayResult = Assembly.GetExecutingAssembly().CreateInstance(pTypeName);
											a = Array.CreateInstance(arrayResult.GetType(), values.Length);
										}
										else
										{
                                            pTypeName = info.PropertyType.Name.Substring(0, info.PropertyType.Name.Length - 2);
                                            if (pTypeName == "Member")
                                            {
                                                pTypeName = "Brierley.LoyaltyWare.ClientLib.DomainModel.Framework.Member";
                                            }
                                            //a = Array.CreateInstance(info.PropertyType, values.Length);
                                            a = Array.CreateInstance(Type.GetType(pTypeName), values.Length);
										}
										for (int i = 0; i < values.Length; i++)
										{
											a.SetValue(values[i], i);
										}
										info.SetValue(result, a, null);
									}
									else // not an array
									{
										object propertyResult = null;
										if (info.PropertyType.Name.EndsWith("Struct"))
										{
											pTypeName = string.Format("Brierley.LoyaltyWare.ClientLib.DomainModel.Client.{0}", info.PropertyType.Name);
											propertyResult = Assembly.GetExecutingAssembly().CreateInstance(pTypeName);
										}
										else
										{
											propertyResult = Activator.CreateInstance(info.PropertyType);
										}
										info.SetValue(propertyResult, values[0], null);
									}
								}
								else
								{
									info.SetValue(result, value, null);
								}
								break;
							}
						}
					}
				}
			}
			else
			{
				switch (typeAttr.Value)
				{
					case "Integer":
						if (isArray)
						{
							int[] vals = new int[parm.Elements(ns + "Value").Count()];
							int index = 0;
							foreach (XElement arrayVal in parm.Elements(ns + "Value"))
							{
								vals[index++] = int.Parse(arrayVal.Value);
							}
							result = vals;
						}
						else
						{
							int val = int.Parse(parm.Element(ns + "Value").Value);
							result = val;
						}
						break;
					case "Long":
						if (isArray)
						{
							long[] vals = new long[parm.Elements(ns + "Value").Count()];
							int index = 0;
							foreach (XElement arrayVal in parm.Elements(ns + "Value"))
							{
								vals[index++] = long.Parse(arrayVal.Value);
							}
							result = vals;
						}
						else
						{
							long val = long.Parse(parm.Element(ns + "Value").Value);
							result = val;
						}
						break;
                    case "Decimal":
						if (isArray)
						{
                            Decimal[] vals = new Decimal[parm.Elements(ns + "Value").Count()];
							int index = 0;
							foreach (XElement arrayVal in parm.Elements(ns + "Value"))
							{
                                vals[index++] = Decimal.Parse(arrayVal.Value);
							}
							result = vals;
						}
						else
						{
                            Decimal val = Decimal.Parse(parm.Element(ns + "Value").Value);
							result = val;
						}
						break;
					case "Boolean":
						if (isArray)
						{
							Boolean[] vals = new Boolean[parm.Elements(ns + "Value").Count()];
							int index = 0;
							foreach (XElement arrayVal in parm.Elements(ns + "Value"))
							{
								vals[index++] = Boolean.Parse(arrayVal.Value);
							}
							result = vals;
						}
						else
						{
							Boolean val = Boolean.Parse(parm.Element(ns + "Value").Value);
							result = val;
						}
						break;
					case "String":
						if (isArray)
						{
							String[] vals = new String[parm.Elements(ns + "Value").Count()];
							int index = 0;
							foreach (XElement arrayVal in parm.Elements(ns + "Value"))
							{
								vals[index++] = arrayVal.Value;
							}
							result = vals;
						}
						else
						{
							String val = parm.Element(ns + "Value").Value;
							result = val;
						}
						break;
					case "Date":
						if (isArray)
						{
							DateTime[] vals = new DateTime[parm.Elements(ns + "Value").Count()];
							int index = 0;
							foreach (XElement arrayVal in parm.Elements(ns + "Value"))
							{
								DateTime date = ConvertStringToDate(arrayVal.Value);
								vals[index++] = date;
							}
							result = vals;
						}
						else
						{
							DateTime date = ConvertStringToDate(parm.Element(ns + "Value").Value);
							result = date;
						}
						break;
					case "Struct":
						if (isArray)
						{
							IList<object> results = new List<object>();
							string typeName = string.Format("Brierley.LoyaltyWare.ClientLib.DomainModel.Client.{0}Struct", parmName);
							foreach (XElement arrayValue in parm.Elements(ns + "Parm"))
							{
								object thisResult = Assembly.GetExecutingAssembly().CreateInstance(typeName);
								PropertyInfo[] pi = thisResult.GetType().GetProperties();
								IEnumerable<XElement> subparms = arrayValue.Elements(ns + "Parm");
								foreach (PropertyInfo info in pi)
								{
									foreach (XElement subparm in subparms)
									{
										if (subparm.Attribute("Name").Value == info.Name)
										{
											object value = HydrateObject(ns, subparm);
											if (value is object[])
											{
												object[] values = value as object[];
												if (values != null && values.Length > 0)
												{
													Array a = null;
													Type pType = values[0].GetType();
													if (pType.Name.EndsWith("Struct"))
													{
														string pTypeName = string.Format("Brierley.LoyaltyWare.ClientLib.DomainModel.Client.{0}", pType.Name);
														object arrayResult = Assembly.GetExecutingAssembly().CreateInstance(pTypeName);
														a = Array.CreateInstance(arrayResult.GetType(), values.Length);
													}
													else
													{
														a = Array.CreateInstance(info.PropertyType, values.Length);
													}
													for (int i = 0; i < values.Length; i++)
													{
														a.SetValue(values[i], i);
													}
													info.SetValue(thisResult, a, null);
												}
											}
											else
											{
												info.SetValue(thisResult, value, null);
											}
											break;
										}
									}
								}
								results.Add(thisResult);
							}
							result = results.ToArray();
						}
						else
						{
							string typeName = string.Format("Brierley.LoyaltyWare.ClientLib.DomainModel.Client.{0}Struct", parmName);
							result = Assembly.GetExecutingAssembly().CreateInstance(typeName);
							PropertyInfo[] pi = result.GetType().GetProperties();
							IEnumerable<XElement> subparms = parm.Elements(ns + "Parm");
							foreach (PropertyInfo info in pi)
							{
								foreach (XElement subparm in subparms)
								{
									if (subparm.Attribute("Name").Value == info.Name)
									{
										object value = HydrateObject(ns, subparm);
										if (value is object[])
										{
											object[] values = value as object[];
											string arrayTypeName = string.Format("Brierley.LoyaltyWare.ClientLib.DomainModel.Client.{0}Struct", info.Name);
											object arrayResult = Assembly.GetExecutingAssembly().CreateInstance(arrayTypeName);
											Array a = Array.CreateInstance(arrayResult.GetType(), values.Length);
											for (int i = 0; i < values.Length; i++)
											{
												a.SetValue(values[i], i);
											}
											info.SetValue(result, a, null);
										}
										else
										{
											info.SetValue(result, value, null);
										}
										break;
									}
								}
							}
						}
						break;
					case "Member":
						XElement attSets = parm.Element(ans + "AttributeSets");
						if (attSets == null)
						{
							throw new LWClientException("Unexpected response received.  No content under AttributeSets received.") { ErrorCode = 2000 };
						}
						if (!isArray)
						{
							XElement mNode = attSets.Element("Member");
							if (mNode == null)
							{
								throw new LWClientException("No member found in the response received.") { ErrorCode = 2001 };
							}
							Member m = new Member();
							m = (Member)DeserializeObjectFromXml(mNode, m);
							result = m;
						}
						else
						{
							IList<object> results = new List<object>();
							foreach (XElement mNode in attSets.Elements("Member"))
							{
								Member m = new Member();
								m = (Member)DeserializeObjectFromXml(mNode, m);
								results.Add(m);
							}
							result = results.ToArray();
						}
						break;
				}
			}
			return result;
		}
		#endregion

		#endregion
	}
}
