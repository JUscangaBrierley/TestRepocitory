//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated LoyaltyWare.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.ServiceModel;
using System.ServiceModel.Channels;

using Brierley.LoyaltyWare.ClientLib.DomainModel;
using Brierley.LoyaltyWare.ClientLib.DomainModel.Framework;
using Brierley.LoyaltyWare.ClientLib.DomainModel.Client;

namespace Brierley.LoyaltyWare.ClientLib
{
	public class LWIntegrationSvcClientManager : IDisposable
	{	
		#region Enumerations
		public enum Language { English = 1, French = 2, Spanish = 3, German = 4, Russian = 5 };
        public enum MemberSearch { MemberID, CardID, EmailAddress, PhoneNumber, AlternateID, LastName, Username, PostalCode };		
		public enum RewardType { Earned, Entitlement };
        public enum ConsumptionPolicy { NoAction, Consume, Hold };
		public enum RewardFulfillmentOption { Printed, Mobile, Electronic, ThirdParty };		
        #endregion

	    #region Fields
        private string _url = string.Empty;
		private string _source = string.Empty;
		private string _srcEnv = string.Format(".NET Framework: {0}", System.Environment.Version.ToString());
        private LWXmlSerializer _serializer = null;
        private LWLogger _logger = null;
		private int _timeout = 60000; // milliseconds
		private int _maxStringContentLength = 16384;
		private long _maxReceivedMessageSize = 65536;
		private string _clientVersion = "4.5.4.6";

		private LWIntegrationServiceClient _proxy = null;
        #endregion

		#region properties

		public string ClientVersion
        {
            get { return _clientVersion; }
        }

		/// <summary>
		/// Get/set the send timeout in milliseconds
		/// </summary>
		public int Timeout
		{
			get { return _timeout; }
			set 
            { 
                _timeout = value;
                _proxy = null;
            }
		}
		
		/// <summary>
		/// Get/set the maximum length for strings in the XML
		/// </summary>
		public int MaxStringContentLength
		{
			get { return _maxStringContentLength; }
			set 
            { 
                _maxStringContentLength = value;
                _proxy = null;
            }
		}

		/// <summary>
		/// Get/set the maximum message size
		/// </summary>
		public long MaxReceivedMessageSize
		{
			get { return _maxReceivedMessageSize; }
			set 
            { 
                _maxReceivedMessageSize = value;
                _proxy = null;
            }
		}
        #endregion
			
	    #region Contruction & Intialization
		/// <summary>
        /// Initializes a new instance of the <see cref="LWIntegrationSvcClientManager"/> class.
        /// </summary>
        /// <param name="url">The URL.</param>
        /// <param name="source">The source.</param>
        /// <param name="writeToConsole">if set to <c>true</c> [write to console].</param>
        /// <param name="outputFile">The output file.</param>
        /// <remarks></remarks>
        public LWIntegrationSvcClientManager(string url, string source, bool writeToConsole, string outputFile)
        {
            _url = url;
            _source = source;
            if (string.IsNullOrEmpty(source))
            {
                throw new LWClientException("Please provide a client source.");
            }
			if (source.Length > 50)
            {
                throw new LWClientException("source cannot be more than 50 characters.") { ErrorCode = 2002 };
            }
            _logger = new LWLogger(writeToConsole, outputFile);
            _serializer = new LWXmlSerializer(_logger);

			_proxy = GetLWIntegrationServiceProxy(_url);
        }
		
		public void Dispose()
        {
            if (_logger != null)
            {
                _logger.Dispose();
            }
			if (_proxy != null)
            {
                _proxy.Close();
                _proxy = null;
            }
        }        
        #endregion
					
		#region LWINtegration Svc Proxy Helpers
		/// <summary>
        /// Gets the LW integration service proxy.
        /// </summary>
        /// <param name="uriString">The URI string.</param>
        /// <returns></returns>
        /// <remarks></remarks>
        private LWIntegrationServiceClient GetLWIntegrationServiceProxy(string uriString)
        {
            Binding binding = null;
            Uri uri = new Uri(uriString);
            EndpointAddress endpointAddress = new EndpointAddress(uri);
            if (uri.Scheme == "http")
            {
                binding = new BasicHttpBinding();
				((BasicHttpBinding)binding).ReaderQuotas.MaxStringContentLength = _maxStringContentLength;
				((BasicHttpBinding)binding).MaxReceivedMessageSize = MaxReceivedMessageSize;
            }
			else if (uri.Scheme == "https")
            {
                binding = new BasicHttpBinding();
				((BasicHttpBinding)binding).ReaderQuotas.MaxStringContentLength = _maxStringContentLength;
				((BasicHttpBinding)binding).MaxReceivedMessageSize = MaxReceivedMessageSize;
                ((BasicHttpBinding)binding).Security.Mode = BasicHttpSecurityMode.Transport;
            }
            else if (uri.Scheme == "net.tcp")
            {
                binding = new NetTcpBinding();
            }
            else if (uri.Scheme == "net.pipe")
            {
                binding = new NetNamedPipeBinding();
            }
            else
            {
                return null;
            }
			binding.SendTimeout = new TimeSpan(0, 0, 0, 0, _timeout);
            return new LWIntegrationServiceClient(binding, endpointAddress);
        }
        #endregion
					
		#region Generic
		/// <summary>
        /// Executes the specified op name.
        /// </summary>
        /// <param name="opName">Name of the op.</param>
        /// <param name="payload">The payload.</param>
        /// <returns></returns>
        /// <remarks></remarks>
		public Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse Execute(string opName, string payload, string externalId)
        {
            string method = "Execute";

            _logger.WriteMessage("Invoking method " + method);
			_logger.WriteMessage(payload);

			if (!string.IsNullOrEmpty(opName) && opName.Length > 50)
            {
                throw new LWClientException("operationName cannot be more than 50 characters.") { ErrorCode = 2002 };
            }            
			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }
			if ( _proxy == null )
			{				
				_proxy = GetLWIntegrationServiceProxy(_url);
			}
			return _proxy.Execute(opName, _source, _srcEnv, externalId, payload);
        }
		#endregion
				
		#region Client Specific API		
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AEGetTentativePointsOut AEGetTentativePoints (string loyaltynumber, DateTime? transactiondate, long? storenumber, TransactionDetailStruct[] transactiondetail, TransactionTenderStruct[] transactiontender, string externalId, out double elapsedTime)
		{
			string method = "AEGetTentativePoints";

			AEGetTentativePointsIn input = new AEGetTentativePointsIn(){LoyaltyNumber = loyaltynumber,TransactionDate = transactiondate,StoreNumber = storenumber,TransactionDetail = transactiondetail,TransactionTender = transactiontender};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AEGetTentativePointsOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual Member AddMember (Member member, string externalId, out double elapsedTime)
		{
			string method = "AddMember";

			string payload = _serializer.SerializeMethodParm(method, "member", member);
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload); 
			           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (Member)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual Member UpdateMember (Member member, string externalId, out double elapsedTime)
		{
			string method = "UpdateMember";

			string payload = _serializer.SerializeMethodParm(method, "member", member);
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload); 
			           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (Member)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual bool AuthenticateMember (string identitytype, string identity, string password, string externalId, out double elapsedTime)
		{
			string method = "AuthenticateMember";

			AuthenticateMemberIn input = new AuthenticateMemberIn(){IdentityType = identitytype,Identity = identity,Password = password};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (bool)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual Member[] GetMembers (string[] membersearchtype, string[] searchvalue, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetMembers";

			GetMembersIn input = new GetMembersIn(){MemberSearchType = membersearchtype,SearchValue = searchvalue,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<Member>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual GetMembersExtOut GetMembersExt (MemberSearchParmsStruct[] membersearchparms, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetMembersExt";

			GetMembersExtIn input = new GetMembersExtIn(){MemberSearchParms = membersearchparms,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (GetMembersExtOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void AssociateMemberSocialHandles (string memberidentity, MemberSocialHandleStruct[] membersocialhandle, string externalId, out double elapsedTime)
		{
			string method = "AssociateMemberSocialHandles";

			AssociateMemberSocialHandlesIn input = new AssociateMemberSocialHandlesIn(){MemberIdentity = memberidentity,MemberSocialHandle = membersocialhandle};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MemberSocialHandleStruct[] GetMemberSocialHandles (string memberidentity, string externalId, out double elapsedTime)
		{
			string method = "GetMemberSocialHandles";

			string payload = _serializer.SerializeMethodPrimitiveParm<string>(method, "MemberIdentity", memberidentity); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<MemberSocialHandleStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void ActivateMember (string memberidentity, DateTime? effectivedate, string updatememberstatusreason, bool? activateinactivecards, string externalId, out double elapsedTime)
		{
			string method = "ActivateMember";

			ActivateMemberIn input = new ActivateMemberIn(){MemberIdentity = memberidentity,EffectiveDate = effectivedate,UpdateMemberStatusReason = updatememberstatusreason,ActivateInactiveCards = activateinactivecards};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void DeactivateMember (string memberidentity, DateTime? effectivedate, string updatememberstatusreason, bool? deactivateactivecards, bool? expirepoints, bool? canceltiers, bool? cancelrewards, bool? cancelpromotions, bool? cancelbonuses, bool? cancelcoupons, string externalId, out double elapsedTime)
		{
			string method = "DeactivateMember";

			DeactivateMemberIn input = new DeactivateMemberIn(){MemberIdentity = memberidentity,EffectiveDate = effectivedate,UpdateMemberStatusReason = updatememberstatusreason,DeactivateActiveCards = deactivateactivecards,ExpirePoints = expirepoints,CancelTiers = canceltiers,CancelRewards = cancelrewards,CancelPromotions = cancelpromotions,CancelBonuses = cancelbonuses,CancelCoupons = cancelcoupons};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void TerminateMember (string memberidentity, DateTime? effectivedate, string updatememberstatusreason, string externalId, out double elapsedTime)
		{
			string method = "TerminateMember";

			TerminateMemberIn input = new TerminateMemberIn(){MemberIdentity = memberidentity,EffectiveDate = effectivedate,UpdateMemberStatusReason = updatememberstatusreason};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void LockdownMember (string memberidentity, DateTime? effectivedate, string updatememberstatusreason, string externalId, out double elapsedTime)
		{
			string method = "LockdownMember";

			LockdownMemberIn input = new LockdownMemberIn(){MemberIdentity = memberidentity,EffectiveDate = effectivedate,UpdateMemberStatusReason = updatememberstatusreason};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void ConvertToMember (string memberidentity, DateTime? effectivedate, string externalId, out double elapsedTime)
		{
			string method = "ConvertToMember";

			ConvertToMemberIn input = new ConvertToMemberIn(){MemberIdentity = memberidentity,EffectiveDate = effectivedate};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual Member MergeMembers (string memberidentity1, string memberidentity2, string loyaltyevent, string loyaltycurrency, DateTime? expirationdate, MemberMergeOptionsStruct membermergeoptions, string externalId, out double elapsedTime)
		{
			string method = "MergeMembers";

			MergeMembersIn input = new MergeMembersIn(){MemberIdentity1 = memberidentity1,MemberIdentity2 = memberidentity2,LoyaltyEvent = loyaltyevent,LoyaltyCurrency = loyaltycurrency,ExpirationDate = expirationdate,MemberMergeOptions = membermergeoptions};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (Member)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void ActivateCard (string cardid, DateTime? effectivedate, string updatecardstatusreason, string externalId, out double elapsedTime)
		{
			string method = "ActivateCard";

			ActivateCardIn input = new ActivateCardIn(){CardID = cardid,EffectiveDate = effectivedate,UpdateCardStatusReason = updatecardstatusreason};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void DeactivateCard (string cardid, DateTime? effectivedate, string updatecardstatusreason, string externalId, out double elapsedTime)
		{
			string method = "DeactivateCard";

			DeactivateCardIn input = new DeactivateCardIn(){CardID = cardid,EffectiveDate = effectivedate,UpdateCardStatusReason = updatecardstatusreason};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void CancelCard (string cardid, DateTime? effectivedate, string updatecardstatusreason, bool? deactivatemember, string externalId, out double elapsedTime)
		{
			string method = "CancelCard";

			CancelCardIn input = new CancelCardIn(){CardID = cardid,EffectiveDate = effectivedate,UpdateCardStatusReason = updatecardstatusreason,DeactivateMember = deactivatemember};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual Member ReplaceCard (string cardid, string replacementcardid, bool? transferpoints, DateTime? effectivedate, string updatecardstatusreason, string externalId, out double elapsedTime)
		{
			string method = "ReplaceCard";

			ReplaceCardIn input = new ReplaceCardIn(){CardID = cardid,ReplacementCardID = replacementcardid,TransferPoints = transferpoints,EffectiveDate = effectivedate,UpdateCardStatusReason = updatecardstatusreason};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (Member)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual Member TransferCard (string cardid, string memberidentity, bool? makecardprimary, bool? deactivatemember, string externalId, out double elapsedTime)
		{
			string method = "TransferCard";

			TransferCardIn input = new TransferCardIn(){CardID = cardid,MemberIdentity = memberidentity,MakeCardPrimary = makecardprimary,DeactivateMember = deactivatemember};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (Member)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void ChangeCardExpirationDate (string cardid, DateTime newexpirationdate, string externalId, out double elapsedTime)
		{
			string method = "ChangeCardExpirationDate";

			ChangeCardExpirationDateIn input = new ChangeCardExpirationDateIn(){CardID = cardid,NewExpirationDate = newexpirationdate};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual string[] GetLoyaltyCurrencyNames (string externalId, out double elapsedTime)
		{
			string method = "GetLoyaltyCurrencyNames";

			string payload = string.Empty; 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<string>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual LoyaltyCurrencyStruct[] GetLoyaltyCurrencies (string externalId, out double elapsedTime)
		{
			string method = "GetLoyaltyCurrencies";

			string payload = string.Empty; 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<LoyaltyCurrencyStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual string[] GetLoyaltyEventNames (string externalId, out double elapsedTime)
		{
			string method = "GetLoyaltyEventNames";

			string payload = string.Empty; 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<string>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual LoyaltyEventStruct[] GetLoyaltyEvents (string externalId, out double elapsedTime)
		{
			string method = "GetLoyaltyEvents";

			string payload = string.Empty; 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<LoyaltyEventStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual string[] GetTierNames (string externalId, out double elapsedTime)
		{
			string method = "GetTierNames";

			string payload = string.Empty; 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<string>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual TierDefStruct[] GetTiers (string externalId, out double elapsedTime)
		{
			string method = "GetTiers";

			string payload = string.Empty; 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<TierDefStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual GetAccountSummaryOut GetAccountSummary (string memberidentity, string externalId, out double elapsedTime)
		{
			string method = "GetAccountSummary";

			string payload = _serializer.SerializeMethodPrimitiveParm<string>(method, "MemberIdentity", memberidentity); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (GetAccountSummaryOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AwardLoyaltyCurrencyOut AwardLoyaltyCurrency (string cardid, string loyaltyevent, string loyaltycurrency, decimal? currencyamount, DateTime? transactiondate, DateTime expirationdate, string note, string changedby, string externalId, out double elapsedTime)
		{
			string method = "AwardLoyaltyCurrency";

			AwardLoyaltyCurrencyIn input = new AwardLoyaltyCurrencyIn(){CardID = cardid,LoyaltyEvent = loyaltyevent,LoyaltyCurrency = loyaltycurrency,CurrencyAmount = currencyamount,TransactionDate = transactiondate,ExpirationDate = expirationdate,Note = note,ChangedBy = changedby};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AwardLoyaltyCurrencyOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual int GetAccountActivityCount (string memberidentity, DateTime? startdate, DateTime? enddate, string externalId, out double elapsedTime)
		{
			string method = "GetAccountActivityCount";

			GetAccountActivityCountIn input = new GetAccountActivityCountIn(){MemberIdentity = memberidentity,StartDate = startdate,EndDate = enddate};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (int)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual GetAccountActivitySummaryOut GetAccountActivitySummary (string memberidentity, DateTime? startdate, DateTime? enddate, bool? getpointshistory, bool? getotherpointshistory, int? summarystartindex, int? summarybatchsize, int? otherstartindex, int? otherbatchsize, string externalId, out double elapsedTime)
		{
			string method = "GetAccountActivitySummary";

			GetAccountActivitySummaryIn input = new GetAccountActivitySummaryIn(){MemberIdentity = memberidentity,StartDate = startdate,EndDate = enddate,GetPointsHistory = getpointshistory,GetOtherPointsHistory = getotherpointshistory,SummaryStartIndex = summarystartindex,SummaryBatchSize = summarybatchsize,OtherStartIndex = otherstartindex,OtherBatchSize = otherbatchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (GetAccountActivitySummaryOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AccountActivityDetailsStruct[] GetAccountActivityDetails (string txnheaderid, bool? getpointshistory, string externalId, out double elapsedTime)
		{
			string method = "GetAccountActivityDetails";

			GetAccountActivityDetailsIn input = new GetAccountActivityDetailsIn(){TxnHeaderId = txnheaderid,GetPointsHistory = getpointshistory};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<AccountActivityDetailsStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual decimal GetLoyaltyCurrencyBalance (string memberidentity, string[] cardids, string[] loyaltycurrencynames, string[] loyaltyeventnames, DateTime? activitystartdate, DateTime? activityenddate, DateTime? pointawardstartdate, DateTime? pointawardenddate, string awardedby, string location, string ownertype, long? ownerid, long[] rowkeys, bool? earnedpointsonly, string externalId, out double elapsedTime)
		{
			string method = "GetLoyaltyCurrencyBalance";

			GetLoyaltyCurrencyBalanceIn input = new GetLoyaltyCurrencyBalanceIn(){MemberIdentity = memberidentity,CardIDs = cardids,LoyaltyCurrencyNames = loyaltycurrencynames,LoyaltyEventNames = loyaltyeventnames,ActivityStartDate = activitystartdate,ActivityEndDate = activityenddate,PointAwardStartDate = pointawardstartdate,PointAwardEndDate = pointawardenddate,AwardedBy = awardedby,Location = location,OwnerType = ownertype,OwnerId = ownerid,RowKeys = rowkeys,EarnedPointsOnly = earnedpointsonly};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (decimal)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual int GetLoyaltyCurrencyTransactionCount (string memberidentity, string cardid, DateTime? startdate, DateTime? enddate, string[] loyaltycurrencynames, string[] loyaltyeventnames, string externalId, out double elapsedTime)
		{
			string method = "GetLoyaltyCurrencyTransactionCount";

			GetLoyaltyCurrencyTransactionCountIn input = new GetLoyaltyCurrencyTransactionCountIn(){MemberIdentity = memberidentity,CardID = cardid,StartDate = startdate,EndDate = enddate,LoyaltyCurrencyNames = loyaltycurrencynames,LoyaltyEventNames = loyaltyeventnames};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (int)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual PointsHistoryStruct[] GetLoyaltyCurrencyTransactions (string memberidentity, string cardid, DateTime? startdate, DateTime? enddate, string[] loyaltycurrencynames, string[] loyaltyeventnames, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetLoyaltyCurrencyTransactions";

			GetLoyaltyCurrencyTransactionsIn input = new GetLoyaltyCurrencyTransactionsIn(){MemberIdentity = memberidentity,CardID = cardid,StartDate = startdate,EndDate = enddate,LoyaltyCurrencyNames = loyaltycurrencynames,LoyaltyEventNames = loyaltyeventnames,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<PointsHistoryStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AddMemberRewardsOut AddMemberRewards (string memberidentity, string cardid, string firstname, string lastname, string emailaddress, string addresslineone, string addresslinetwo, string addresslinethree, string addresslinefour, string city, string stateorprovince, string ziporpostalcode, string county, string country, string channel, string changedby, RewardOrderInfoStruct[] rewardorderinfo, string externalId, out double elapsedTime)
		{
			string method = "AddMemberRewards";

			AddMemberRewardsIn input = new AddMemberRewardsIn(){MemberIdentity = memberidentity,CardID = cardid,FirstName = firstname,LastName = lastname,EmailAddress = emailaddress,AddressLineOne = addresslineone,AddressLineTwo = addresslinetwo,AddressLineThree = addresslinethree,AddressLineFour = addresslinefour,City = city,StateOrProvince = stateorprovince,ZipOrPostalCode = ziporpostalcode,County = county,Country = country,Channel = channel,ChangedBy = changedby,RewardOrderInfo = rewardorderinfo};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AddMemberRewardsOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MemberRewardSummaryStruct[] GetMemberRewardsSummary (string memberidentity, long? categoryid, DateTime? startdate, DateTime? enddate, int? startindex, int? batchsize, bool? unredeemedonly, bool? unexpiredonly, string language, string externalId, out double elapsedTime)
		{
			string method = "GetMemberRewardsSummary";

			GetMemberRewardsSummaryIn input = new GetMemberRewardsSummaryIn(){MemberIdentity = memberidentity,CategoryId = categoryid,StartDate = startdate,EndDate = enddate,StartIndex = startindex,BatchSize = batchsize,UnRedeemedOnly = unredeemedonly,UnexpiredOnly = unexpiredonly,Language = language};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<MemberRewardSummaryStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual GetMemberRewardSummaryByIdOut GetMemberRewardSummaryById (long memberrewardid, string language, string externalId, out double elapsedTime)
		{
			string method = "GetMemberRewardSummaryById";

			GetMemberRewardSummaryByIdIn input = new GetMemberRewardSummaryByIdIn(){MemberRewardId = memberrewardid,Language = language};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (GetMemberRewardSummaryByIdOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual GetMemberRewardSummaryByCertOut GetMemberRewardSummaryByCert (string certnumber, string language, string externalId, out double elapsedTime)
		{
			string method = "GetMemberRewardSummaryByCert";

			GetMemberRewardSummaryByCertIn input = new GetMemberRewardSummaryByCertIn(){CertNumber = certnumber,Language = language};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (GetMemberRewardSummaryByCertOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MemberRewardOrderStruct[] GetMemberRewards (string memberidentity, long? categoryid, DateTime? startdate, DateTime? enddate, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetMemberRewards";

			GetMemberRewardsIn input = new GetMemberRewardsIn(){MemberIdentity = memberidentity,CategoryId = categoryid,StartDate = startdate,EndDate = enddate,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<MemberRewardOrderStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MemberRewardOrderStruct GetMemberRewardsByOrderNumber (string ordernumber, bool? isfporder, string externalId, out double elapsedTime)
		{
			string method = "GetMemberRewardsByOrderNumber";

			GetMemberRewardsByOrderNumberIn input = new GetMemberRewardsByOrderNumberIn(){OrderNumber = ordernumber,IsFPOrder = isfporder};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (MemberRewardOrderStruct)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void RedeemMemberReward (long memberrewardid, decimal? availablebalance, DateTime? expirationdate, DateTime? redemptiondate, string externalId, out double elapsedTime)
		{
			string method = "RedeemMemberReward";

			RedeemMemberRewardIn input = new RedeemMemberRewardIn(){MemberRewardID = memberrewardid,AvailableBalance = availablebalance,ExpirationDate = expirationdate,RedemptionDate = redemptiondate};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual bool IsMemberRewardRedeemed (long memberrewardid, string externalId, out double elapsedTime)
		{
			string method = "IsMemberRewardRedeemed";

			string payload = _serializer.SerializeMethodPrimitiveParm<long>(method, "MemberRewardID", memberrewardid); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (bool)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual decimal CancelMemberReward (long memberrewardid, string externalId, out double elapsedTime)
		{
			string method = "CancelMemberReward";

			string payload = _serializer.SerializeMethodPrimitiveParm<long>(method, "MemberRewardID", memberrewardid); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (decimal)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual decimal CancelMemberRewardOrder (string ordernumber, string externalId, out double elapsedTime)
		{
			string method = "CancelMemberRewardOrder";

			string payload = _serializer.SerializeMethodPrimitiveParm<string>(method, "OrderNumber", ordernumber); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (decimal)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void ReturnMemberRewardOrder (string ordernumber, bool? isfporder, string externalId, out double elapsedTime)
		{
			string method = "ReturnMemberRewardOrder";

			ReturnMemberRewardOrderIn input = new ReturnMemberRewardOrderIn(){OrderNumber = ordernumber,IsFPOrder = isfporder};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual ShippingAddressStruct[] GetAllRewardOrderShippingAddresses (string memberidentity, string externalId, out double elapsedTime)
		{
			string method = "GetAllRewardOrderShippingAddresses";

			string payload = _serializer.SerializeMethodPrimitiveParm<string>(method, "MemberIdentity", memberidentity); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<ShippingAddressStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual RewardCategoryStruct[] GetRewardCategories (long? categoryid, bool? visibleinln, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetRewardCategories";

			GetRewardCategoriesIn input = new GetRewardCategoriesIn(){CategoryId = categoryid,VisibleInLN = visibleinln,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<RewardCategoryStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual int GetRewardCatalogCount (bool? activeonly, string tier, long? categoryid, ContentSearchAttributesStruct[] contentsearchattributes, string externalId, out double elapsedTime)
		{
			string method = "GetRewardCatalogCount";

			GetRewardCatalogCountIn input = new GetRewardCatalogCountIn(){ActiveOnly = activeonly,Tier = tier,CategoryId = categoryid,ContentSearchAttributes = contentsearchattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (int)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual RewardCatalogSummaryStruct[] GetRewardCatalog (bool? activeonly, string tier, string language, long? categoryid, bool? returnrewardcategory, ContentSearchAttributesStruct[] contentsearchattributes, int? startindex, int? batchsize, decimal? currencytoearnlow, decimal? currencytoearnhigh, string externalId, out double elapsedTime)
		{
			string method = "GetRewardCatalog";

			GetRewardCatalogIn input = new GetRewardCatalogIn(){ActiveOnly = activeonly,Tier = tier,Language = language,CategoryId = categoryid,ReturnRewardCategory = returnrewardcategory,ContentSearchAttributes = contentsearchattributes,StartIndex = startindex,BatchSize = batchsize,CurrencyToEarnLow = currencytoearnlow,CurrencyToEarnHigh = currencytoearnhigh};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<RewardCatalogSummaryStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual RewardCatalogItemStruct GetRewardCatalogItem (long rewardid, string language, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "GetRewardCatalogItem";

			GetRewardCatalogItemIn input = new GetRewardCatalogItemIn(){RewardID = rewardid,Language = language,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (RewardCatalogItemStruct)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual int GetMessageDefinitionCount (bool? activeonly, ContentSearchAttributesStruct[] contentsearchattributes, string externalId, out double elapsedTime)
		{
			string method = "GetMessageDefinitionCount";

			GetMessageDefinitionCountIn input = new GetMessageDefinitionCountIn(){ActiveOnly = activeonly,ContentSearchAttributes = contentsearchattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (int)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MessageDefinitionStruct[] GetMessageDefinitions (string language, string channel, bool? active, ContentSearchAttributesStruct[] contentsearchattributes, bool? returnattributes, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetMessageDefinitions";

			GetMessageDefinitionsIn input = new GetMessageDefinitionsIn(){Language = language,Channel = channel,Active = active,ContentSearchAttributes = contentsearchattributes,ReturnAttributes = returnattributes,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<MessageDefinitionStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MessageDefinitionStruct GetMessageDefinition (long messagedefid, string language, string channel, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "GetMessageDefinition";

			GetMessageDefinitionIn input = new GetMessageDefinitionIn(){MessageDefId = messagedefid,Language = language,Channel = channel,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (MessageDefinitionStruct)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MemberMessageStruct[] GetMemberMessages (string memberidentity, string language, string channel, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetMemberMessages";

			GetMemberMessagesIn input = new GetMemberMessagesIn(){MemberIdentity = memberidentity,Language = language,Channel = channel,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<MemberMessageStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual int GetCouponDefinitionCount (bool? activeonly, ContentSearchAttributesStruct[] contentsearchattributes, string externalId, out double elapsedTime)
		{
			string method = "GetCouponDefinitionCount";

			GetCouponDefinitionCountIn input = new GetCouponDefinitionCountIn(){ActiveOnly = activeonly,ContentSearchAttributes = contentsearchattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (int)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual CouponDefinitionStruct[] GetCouponDefinitions (string language, string channel, bool? active, ContentSearchAttributesStruct[] contentsearchattributes, bool? returnattributes, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetCouponDefinitions";

			GetCouponDefinitionsIn input = new GetCouponDefinitionsIn(){Language = language,Channel = channel,Active = active,ContentSearchAttributes = contentsearchattributes,ReturnAttributes = returnattributes,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<CouponDefinitionStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual CouponDefinitionStruct GetCouponDefinition (long coupondefid, string channel, string language, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "GetCouponDefinition";

			GetCouponDefinitionIn input = new GetCouponDefinitionIn(){CouponDefId = coupondefid,Channel = channel,Language = language,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (CouponDefinitionStruct)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MemberCouponStruct[] GetMemberCoupons (string memberidentity, string language, string channel, string typecode, int? startindex, int? batchsize, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "GetMemberCoupons";

			GetMemberCouponsIn input = new GetMemberCouponsIn(){MemberIdentity = memberidentity,Language = language,Channel = channel,TypeCode = typecode,StartIndex = startindex,BatchSize = batchsize,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<MemberCouponStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MemberCouponStruct GetMemberCouponById (long id, string language, string channel, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "GetMemberCouponById";

			GetMemberCouponByIdIn input = new GetMemberCouponByIdIn(){Id = id,Language = language,Channel = channel,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (MemberCouponStruct)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MemberCouponStruct GetMemberCouponByCertNmbr (string certnmbr, string language, string channel, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "GetMemberCouponByCertNmbr";

			GetMemberCouponByCertNmbrIn input = new GetMemberCouponByCertNmbrIn(){CertNmbr = certnmbr,Language = language,Channel = channel,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (MemberCouponStruct)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual RedeemMemberCouponByIdOut RedeemMemberCouponById (long membercouponid, string channel, string language, DateTime? redemptiondate, int? timesused, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "RedeemMemberCouponById";

			RedeemMemberCouponByIdIn input = new RedeemMemberCouponByIdIn(){MemberCouponId = membercouponid,Channel = channel,Language = language,RedemptionDate = redemptiondate,TimesUsed = timesused,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (RedeemMemberCouponByIdOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual RedeemMemberCouponByCertNmbrOut RedeemMemberCouponByCertNmbr (string certnmbr, string channel, string language, DateTime? redemptiondate, int? timesused, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "RedeemMemberCouponByCertNmbr";

			RedeemMemberCouponByCertNmbrIn input = new RedeemMemberCouponByCertNmbrIn(){CertNmbr = certnmbr,Channel = channel,Language = language,RedemptionDate = redemptiondate,TimesUsed = timesused,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (RedeemMemberCouponByCertNmbrOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void UnredeemMemberCouponById (long membercouponid, string externalId, out double elapsedTime)
		{
			string method = "UnredeemMemberCouponById";

			string payload = _serializer.SerializeMethodPrimitiveParm<long>(method, "MemberCouponId", membercouponid); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void UnredeemMemberCouponByCertNmbr (string certnmbr, string externalId, out double elapsedTime)
		{
			string method = "UnredeemMemberCouponByCertNmbr";

			string payload = _serializer.SerializeMethodPrimitiveParm<string>(method, "CertNmbr", certnmbr); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual int GetBonusDefinitionCount (bool? activeonly, ContentSearchAttributesStruct[] contentsearchattributes, string externalId, out double elapsedTime)
		{
			string method = "GetBonusDefinitionCount";

			GetBonusDefinitionCountIn input = new GetBonusDefinitionCountIn(){ActiveOnly = activeonly,ContentSearchAttributes = contentsearchattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (int)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual BonusDefinitionStruct[] GetBonusDefinitions (string language, string channel, bool? active, ContentSearchAttributesStruct[] contentsearchattributes, bool? returnattributes, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetBonusDefinitions";

			GetBonusDefinitionsIn input = new GetBonusDefinitionsIn(){Language = language,Channel = channel,Active = active,ContentSearchAttributes = contentsearchattributes,ReturnAttributes = returnattributes,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<BonusDefinitionStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual BonusDefinitionStruct GetBonusDefinition (long bonusdefid, string channel, string language, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "GetBonusDefinition";

			GetBonusDefinitionIn input = new GetBonusDefinitionIn(){BonusDefId = bonusdefid,Channel = channel,Language = language,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (BonusDefinitionStruct)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MemberBonusStruct[] GetMemberBonuses (string memberidentity, string language, string channel, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetMemberBonuses";

			GetMemberBonusesIn input = new GetMemberBonusesIn(){MemberIdentity = memberidentity,Language = language,Channel = channel,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<MemberBonusStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual GetMemberWalletOut GetMemberWallet (string memberidentity, bool? returnrewards, bool? returncoupons, bool? returnpromotions, long? categoryid, DateTime? startdate, DateTime? enddate, bool? unredeemedonly, bool? unexpiredonly, bool? returncontentattributes, bool? returnpromotiondefinition, string language, string channel, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetMemberWallet";

			GetMemberWalletIn input = new GetMemberWalletIn(){MemberIdentity = memberidentity,ReturnRewards = returnrewards,ReturnCoupons = returncoupons,ReturnPromotions = returnpromotions,CategoryId = categoryid,StartDate = startdate,EndDate = enddate,UnRedeemedOnly = unredeemedonly,UnexpiredOnly = unexpiredonly,ReturnContentAttributes = returncontentattributes,ReturnPromotionDefinition = returnpromotiondefinition,Language = language,Channel = channel,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (GetMemberWalletOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual RequestCreditTxnSearchOut RequestCreditTxnSearch (string txntype, RequestCreditTxnSearchParametersStruct[] requestcredittxnsearchparameters, string memberidentity, string cardid, string note, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "RequestCreditTxnSearch";

			RequestCreditTxnSearchIn input = new RequestCreditTxnSearchIn(){TxnType = txntype,RequestCreditTxnSearchParameters = requestcredittxnsearchparameters,MemberIdentity = memberidentity,CardID = cardid,Note = note,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (RequestCreditTxnSearchOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual decimal ApplyTxnCredit (string memberidentity, string cardid, string txnheaderid, string note, string externalId, out double elapsedTime)
		{
			string method = "ApplyTxnCredit";

			ApplyTxnCreditIn input = new ApplyTxnCreditIn(){MemberIdentity = memberidentity,CardID = cardid,TxnHeaderId = txnheaderid,Note = note};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (decimal)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual int GetPromotionDefinitionsCount (bool? active, ContentSearchAttributesStruct[] contentsearchattributes, string externalId, out double elapsedTime)
		{
			string method = "GetPromotionDefinitionsCount";

			GetPromotionDefinitionsCountIn input = new GetPromotionDefinitionsCountIn(){Active = active,ContentSearchAttributes = contentsearchattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (int)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual PromotionDefinitionStruct[] GetPromotionDefinitions (string language, string channel, bool? active, ContentSearchAttributesStruct[] contentsearchattributes, bool? returnattributes, int? startindex, int? batchsize, string externalId, out double elapsedTime)
		{
			string method = "GetPromotionDefinitions";

			GetPromotionDefinitionsIn input = new GetPromotionDefinitionsIn(){Language = language,Channel = channel,Active = active,ContentSearchAttributes = contentsearchattributes,ReturnAttributes = returnattributes,StartIndex = startindex,BatchSize = batchsize};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<PromotionDefinitionStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual PromotionDefinitionStruct GetPromotionDefinition (long? promotiondefid, string promotioncode, string language, string channel, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "GetPromotionDefinition";

			GetPromotionDefinitionIn input = new GetPromotionDefinitionIn(){PromotionDefId = promotiondefid,PromotionCode = promotioncode,Language = language,Channel = channel,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (PromotionDefinitionStruct)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MemberPromotionStruct AddMemberPromotion (string memberidentity, string promotioncode, string certificatenmbr, bool? returndefinition, string language, string channel, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "AddMemberPromotion";

			AddMemberPromotionIn input = new AddMemberPromotionIn(){MemberIdentity = memberidentity,PromotionCode = promotioncode,CertificateNmbr = certificatenmbr,ReturnDefinition = returndefinition,Language = language,Channel = channel,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (MemberPromotionStruct)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual int GetMemberPromotionsCount (string memberidentity, string externalId, out double elapsedTime)
		{
			string method = "GetMemberPromotionsCount";

			string payload = _serializer.SerializeMethodPrimitiveParm<string>(method, "MemberIdentity", memberidentity); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (int)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual MemberPromotionStruct[] GetMemberPromotions (string memberidentity, int? startindex, int? batchsize, bool? returndefinition, string language, string channel, bool? returnattributes, string externalId, out double elapsedTime)
		{
			string method = "GetMemberPromotions";

			GetMemberPromotionsIn input = new GetMemberPromotionsIn(){MemberIdentity = memberidentity,StartIndex = startindex,BatchSize = batchsize,ReturnDefinition = returndefinition,Language = language,Channel = channel,ReturnAttributes = returnattributes};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<MemberPromotionStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual TriggerUserEventOut TriggerUserEvent (string memberidentity, string eventname, string channel, string language, ClientContextStruct[] clientcontext, bool? returncoupons, bool? returnallcoupons, bool? returnbonuses, bool? returnallbonuses, bool? returnpromotions, bool? returnallpromotions, bool? returnmessages, bool? returnallmessages, string externalId, out double elapsedTime)
		{
			string method = "TriggerUserEvent";

			TriggerUserEventIn input = new TriggerUserEventIn(){MemberIdentity = memberidentity,EventName = eventname,Channel = channel,Language = language,ClientContext = clientcontext,ReturnCoupons = returncoupons,ReturnAllCoupons = returnallcoupons,ReturnBonuses = returnbonuses,ReturnAllBonuses = returnallbonuses,ReturnPromotions = returnpromotions,ReturnAllPromotions = returnallpromotions,ReturnMessages = returnmessages,ReturnAllMessages = returnallmessages};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (TriggerUserEventOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual void SendTriggeredEmail (string memberidentity, string emailname, string recipientemail, bool? asynchronous, AdditionalFieldsStruct[] additionalfields, string externalId, out double elapsedTime)
		{
			string method = "SendTriggeredEmail";

			SendTriggeredEmailIn input = new SendTriggeredEmailIn(){MemberIdentity = memberidentity,EmailName = emailname,RecipientEmail = recipientemail,Asynchronous = asynchronous,AdditionalFields = additionalfields};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return;				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual long CreateCSNote (string memberidentity, string note, long createdby, string externalId, out double elapsedTime)
		{
			string method = "CreateCSNote";

			CreateCSNoteIn input = new CreateCSNoteIn(){MemberIdentity = memberidentity,Note = note,CreatedBy = createdby};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (long)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual CSNoteStruct[] GetCSNotes (string memberidentity, DateTime? startdate, DateTime? enddate, string externalId, out double elapsedTime)
		{
			string method = "GetCSNotes";

			GetCSNotesIn input = new GetCSNotesIn(){MemberIdentity = memberidentity,StartDate = startdate,EndDate = enddate};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return _serializer.DeserializeResponseObjectArray<CSNoteStruct>(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual GetServiceInfoOut GetServiceInfo (string externalId, out double elapsedTime)
		{
			string method = "GetServiceInfo";

			string payload = string.Empty; 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (GetServiceInfoOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual Member AEGetMember (string loyaltynumber, string externalId, out double elapsedTime)
		{
			string method = "AEGetMember";

			string payload = _serializer.SerializeMethodPrimitiveParm<string>(method, "LoyaltyNumber", loyaltynumber); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (Member)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AERegisterMemberOut AERegisterMember (string loyaltynumber, string firstname, string lastname, string address1, string address2, string city, string state, string postalcode, string countrycode, string birthdate, string emailaddress, string mobilephone, bool? smsoptin, string externalId, out double elapsedTime)
		{
			string method = "AERegisterMember";

			AERegisterMemberIn input = new AERegisterMemberIn(){LoyaltyNumber = loyaltynumber,FirstName = firstname,LastName = lastname,Address1 = address1,Address2 = address2,City = city,State = state,PostalCode = postalcode,CountryCode = countrycode,BirthDate = birthdate,EmailAddress = emailaddress,MobilePhone = mobilephone,SMSOptIn = smsoptin};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AERegisterMemberOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AEAutoRegisterOut AEAutoRegister (string firstname, string lastname, string loyaltynumber, string emailaddress, string externalId, out double elapsedTime)
		{
			string method = "AEAutoRegister";

			AEAutoRegisterIn input = new AEAutoRegisterIn(){FirstName = firstname,LastName = lastname,LoyaltyNumber = loyaltynumber,EmailAddress = emailaddress};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AEAutoRegisterOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AEValidateMemberOut AEValidateMember (string loyaltynumber, string firstname, string lastname, string address1, string postalcode, string externalId, out double elapsedTime)
		{
			string method = "AEValidateMember";

			AEValidateMemberIn input = new AEValidateMemberIn(){Loyaltynumber = loyaltynumber,FirstName = firstname,LastName = lastname,Address1 = address1,PostalCode = postalcode};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AEValidateMemberOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual GetLoyaltyProfileStruct AEGetLoyaltyProfile (string loyaltynumber, string externalId, out double elapsedTime)
		{
			string method = "AEGetLoyaltyProfile";

			string payload = _serializer.SerializeMethodPrimitiveParm<string>(method, "LoyaltyNumber", loyaltynumber); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (GetLoyaltyProfileStruct)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AEGetAccountSummaryOut AEGetAccountSummary (string loyaltynumber, string externalId, out double elapsedTime)
		{
			string method = "AEGetAccountSummary";

			string payload = _serializer.SerializeMethodPrimitiveParm<string>(method, "LoyaltyNumber", loyaltynumber); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AEGetAccountSummaryOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AEPOSGetAccountSummaryOut AEPOSGetAccountSummary (string loyaltynumber, string externalId, out double elapsedTime)
		{
			string method = "AEPOSGetAccountSummary";

			string payload = _serializer.SerializeMethodPrimitiveParm<string>(method, "LoyaltyNumber", loyaltynumber); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AEPOSGetAccountSummaryOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AERequestPointStoreOut AERequestPointStore (string loyaltynumber, string registernumber, string storenumber, string totalpayment, string transactiondate, string transactionnumber, string externalId, out double elapsedTime)
		{
			string method = "AERequestPointStore";

			AERequestPointStoreIn input = new AERequestPointStoreIn(){LoyaltyNumber = loyaltynumber,RegisterNumber = registernumber,StoreNumber = storenumber,TotalPayment = totalpayment,TransactionDate = transactiondate,TransactionNumber = transactionnumber};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AERequestPointStoreOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AERequestPointOnlineOut AERequestPointOnline (string loyaltynumber, string ordernumber, string orderamount, string externalId, out double elapsedTime)
		{
			string method = "AERequestPointOnline";

			AERequestPointOnlineIn input = new AERequestPointOnlineIn(){LoyaltyNumber = loyaltynumber,OrderNumber = ordernumber,OrderAmount = orderamount};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AERequestPointOnlineOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AEGetAccountActivityOut AEGetAccountActivity (string loyaltynumber, DateTime? startdate, DateTime? enddate, int? pagenumber, string externalId, out double elapsedTime)
		{
			string method = "AEGetAccountActivity";

			AEGetAccountActivityIn input = new AEGetAccountActivityIn(){LoyaltyNumber = loyaltynumber,StartDate = startdate,EndDate = enddate,PageNumber = pagenumber};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AEGetAccountActivityOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AEConnectedGetAccountActivityOut AEConnectedGetAccountActivity (string loyaltynumber, DateTime? startdate, DateTime? enddate, int? pagenumber, string externalId, out double elapsedTime)
		{
			string method = "AEConnectedGetAccountActivity";

			AEConnectedGetAccountActivityIn input = new AEConnectedGetAccountActivityIn(){LoyaltyNumber = loyaltynumber,StartDate = startdate,EndDate = enddate,PageNumber = pagenumber};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AEConnectedGetAccountActivityOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual AEPOSGetAccountActivityOut AEPOSGetAccountActivity (string loyaltynumber, DateTime? startdate, DateTime? enddate, int? pagenumber, string externalId, out double elapsedTime)
		{
			string method = "AEPOSGetAccountActivity";

			AEPOSGetAccountActivityIn input = new AEPOSGetAccountActivityIn(){LoyaltyNumber = loyaltynumber,StartDate = startdate,EndDate = enddate,PageNumber = pagenumber};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (AEPOSGetAccountActivityOut)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		/// <summary>
		/// 
		/// </summary>
		
										
		public virtual string AEAddEngagementActivity (string loyaltynumber, string engagementtype, string[] additionalfields, string externalId, out double elapsedTime)
		{
			string method = "AEAddEngagementActivity";

			AEAddEngagementActivityIn input = new AEAddEngagementActivityIn(){LoyaltyNumber = loyaltynumber,EngagementType = engagementtype,AdditionalFields = additionalfields};
			string payload = _serializer.SerializeMethodParm(method, "input", input); 
			payload = string.Format("<{0}InParms>{1}</{0}InParms>", method, payload);           
            _logger.WriteMessage("\n**** Invoking method " + method);
            _logger.WriteMessage(payload);
            elapsedTime = 0;

			if (!string.IsNullOrEmpty(externalId) && externalId.Length > 50)
            {
                throw new LWClientException("externalId cannot be more than 50 characters.") { ErrorCode = 2002 };
            }

			if ( _proxy == null )
			{
				_proxy = GetLWIntegrationServiceProxy(_url);
			}			
            Brierley.LoyaltyWare.LWIntegrationSvc.LWAPIResponse response = _proxy.Execute(method, _source, _srcEnv, externalId, payload);
            if (response.ResponseCode == 0)
            {
				elapsedTime = response.ElapsedTime;
				_logger.WriteMessage("Response received: " + response.ResponseDetail);
                return (string)_serializer.DeserializeSingleResponseObject(method, response.ResponseDetail);				
            }
            else
            {
				_logger.WriteMessage("Error invoking method + " + method);
                _logger.WriteMessage("Error code = " + response.ResponseCode);
                _logger.WriteMessage("Error detail: " + response.ResponseDetail);
                throw new LWClientException(response.ResponseDetail) { ErrorCode = response.ResponseCode, ElapsedTime = response.ElapsedTime };
            }
		}			
		#endregion
	}
}
