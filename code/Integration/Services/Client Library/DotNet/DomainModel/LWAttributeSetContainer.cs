//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by LoyaltyWare.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;

using System.ComponentModel;

namespace Brierley.LoyaltyWare.ClientLib.DomainModel
{
    public class LWAttributeSetContainer
    {
        #region Fields
        IList<LWAttributeSetContainer> children = new List<LWAttributeSetContainer>();
        OrderedDictionary transientProperties = new OrderedDictionary();
        #endregion

        #region methods

        #region Transient Properties
        public void AddTransientProperty(string propertyName, object propertyValue)
        {
            transientProperties.Add(propertyName.ToLower(), propertyValue);
        }

        public void UpdateTransientProperty(string propertyName, object propertyValue)
        {
            if (transientProperties.Contains(propertyName.ToLower()))
            {
                transientProperties.Remove(propertyName.ToLower());
            }
            transientProperties.Add(propertyName.ToLower(), propertyValue);
        }

        public void RemoveTransientProperty(string propertyName)
        {
            if (transientProperties.Contains(propertyName.ToLower()))
            {
                transientProperties.Remove(propertyName.ToLower());
            }            
        }

        public object GetTransientProperty(string propertyName)
        {
            return transientProperties[propertyName.ToLower()];
        }
        public bool HasTransientProperty(string propertyName)
        {
            return transientProperties.Contains(propertyName.ToLower());
        }
        
        public virtual ICollection GetTransientPropertyNames()
	{
	    return transientProperties.Keys;
        }
        
        #endregion

        [Browsable(false)]       
        internal IList<LWAttributeSetContainer> Children
        {
            get { return children; }
        }

        public void Add(LWAttributeSetContainer attSet)
        {
            try
            {
                children.Add(attSet);
            }
            catch (Exception ex)
            {                
                throw new LWClientException("Error adding attribute set.", ex);
            }
        }
        
        public virtual IList<LWAttributeSetContainer> GetAttributeSets(string name)
	        {
	            IList<LWAttributeSetContainer> list = new List<LWAttributeSetContainer>();
	            foreach (LWAttributeSetContainer obj in children)
	            {
	                LWClientDataObject attSet = obj as LWClientDataObject;
	                if (obj != null && obj.GetType().Name == name)
	                {
	                    list.Add(obj);
	                }
	            }
	            return list;
        }
		        
        #endregion
    }
}
